<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>比赛形式</title>
      <link href="/2021/12/27/CTF/CTF%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/3%E3%80%81%E6%AF%94%E8%B5%9B%E5%BD%A2%E5%BC%8F/"/>
      <url>/2021/12/27/CTF/CTF%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/3%E3%80%81%E6%AF%94%E8%B5%9B%E5%BD%A2%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="比赛形式"><a href="#比赛形式" class="headerlink" title="比赛形式"></a>比赛形式</h1><p>CTF比赛一般分为<strong>线上赛和线下赛</strong>。通常来说，线上赛多为<code>初赛</code>, 线下赛多为<code>决赛</code>, 但是也不排除直接进行</p><h2 id="线上"><a href="#线上" class="headerlink" title="线上"></a>线上</h2><p>选手通过主办方搭建的比赛平台在线注册，在线做题并提交flag，线上比赛多为解题模式，攻防模式较为少见。通常来说<strong>对于长时间未解出的题目，主办方会酌情给出提示(<code>Hint</code>)来帮助选手做题。</strong></p><h2 id="线下"><a href="#线下" class="headerlink" title="线下"></a>线下</h2><p>选手前往比赛所在地，现场接入比赛网络进行比赛，<strong>线下多为AWD模式</strong>，近年来随着比赛赛制的不断革新，线下赛也会出现多种模式混合进行，例如结合<strong>解题+AWD</strong> ，<strong>解题+RW</strong> 等等</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> CTF基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> 基础知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>竞赛模式</title>
      <link href="/2021/12/27/CTF/CTF%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/2%E3%80%81%E7%AB%9E%E8%B5%9B%E6%A8%A1%E5%BC%8F/"/>
      <url>/2021/12/27/CTF/CTF%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/2%E3%80%81%E7%AB%9E%E8%B5%9B%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="竞赛模式"><a href="#竞赛模式" class="headerlink" title="竞赛模式"></a>竞赛模式</h1><p>CTF竞赛模式具体分为以下几类：</p><h2 id="理论知识"><a href="#理论知识" class="headerlink" title="理论知识"></a>理论知识</h2><p><strong>理论题多见于国内比赛，通常为选择题。</strong>包含单选及多选，选手需要根据自己所学的相关理论知识进行作答。最终得出分数。理论部分通常<strong>多见于初赛或是初赛之前的海选</strong></p><h2 id="Jeopardy-解题"><a href="#Jeopardy-解题" class="headerlink" title="Jeopardy-解题"></a>Jeopardy-解题</h2><p>参赛队伍可以通过互联网或者现场网络参与，参数队伍通过与在线环境交互或文件离线分析，解决网络安全技术挑战获取相应分值，类似于 ACM 编程竞赛、信息学奥林匹克赛，根据总分和时间来进行排名。</p><p>不同的是这个解题模式一般会设置 一血(First Blood) 、 二血(Second Blood) 、 三血(Third Blood) ，也即最先完成的前三支队伍会获得额外分值，所以这不仅是对首先解出题目的队伍的分值鼓励，也是一种团队能力的间接体现。</p><p>当然还有一种流行的计分规则是设置每道题目的初始分数后，根据该题的成功解答队伍数，来逐渐降低该题的分值，也就是说如果解答这道题的人数越多，那么这道题的分值就越低。最后会下降到一个保底分值后便不再下降。一般称之为<code>动态积分</code></p><p>题目类型主要包含 Web 网络攻防 、 RE 逆向工程 、 Pwn 二进制漏洞利用 、 Crypto 密码攻击以及 Misc 安全杂项 这五个类别，个别比赛会根据题目类型进行扩展。</p><h2 id="AwD-攻防模式"><a href="#AwD-攻防模式" class="headerlink" title="AwD-攻防模式"></a>AwD-攻防模式</h2><p><strong>A</strong> ttack <strong>w</strong> ith <strong>D</strong> efense(AwD)全称攻防模式，在攻防模式CTF赛制中，参赛队伍连接到同一个网络空间。主办方会预先为每个参赛队分配要防守的主机，该主机称之为<code>GameBox</code>，每个队伍之间的GameBox<code>配置及漏洞是完全一致</code>的，选手需要防护自己的GameBox不被攻击的同时挖掘漏洞并攻击对手服务来得分。在AwD中主办方会运行一个名为<code>Checker</code>的程序定时检测选手的GameBox的运行状态。若检测到状态不对则判定该GameBox宕机，按照规则扣除一定分数。攻防模式CTF赛制可以实时通过得分反映出比赛情况，最终也以得分直接分出胜负，是一种竞争激烈，具有很强观赏性和高度透明性的网络安全赛制。在这种赛制中，不仅仅是比参赛队员的智力和技术，也比体力（因为比赛一般都会持续24至48小时左右），同时也比团队之间的分工配合与合作。</p><p>AwD通常仅包含<code>Web</code>及<code>Pwn</code>两种类型的题目。每个队伍可能会分到多个GameBox，随着比赛的进行，最早的GameBox可能会下线，同时会上线新的GameBox。</p><h2 id="AWP-攻防增强"><a href="#AWP-攻防增强" class="headerlink" title="AWP-攻防增强"></a>AWP-攻防增强</h2><p><strong>A</strong> ttack <strong>D</strong> efense <strong>P</strong> lus(ADP)全称攻防增强模式，在该模式下中，参赛队伍连接到同一个网络空间。主办方会在平台上放置题目，选手需要登录到平台获得题目信息</p><p>攻击模式下，平台会给出题目的访问链接，选手按照解题模式做题提交flag即可完成攻击，当完成攻击后， 每轮计算分数时均会计算该题目的攻击得分。</p><p>防御模式下，选手需要自行挖掘题目的漏洞，并制作漏洞补丁包上传至平台，之后点击验证。验证时平台会新建一个完全干净的题目环境，使用预置的Exploit进行攻击，若攻击成功当验证通过之后（即已经完成修补），每轮计算分数均会认为该题目已防御。</p><p>也就是说，对于每个题目，仅需要攻击成功一次，防御成功一次，该题就可以认为已完成，后续无需进行关注。</p><p>ADP通常仅包含<code>Web</code>及<code>Pwn</code>两种类型的题目。随着比赛的进行，最早的题目可能会下线，后续也有可能会上线新的题目。</p><p>ADP相较于AwD来说，选手无须编写批量攻击脚本，也无需关注题目的环境是否被攻击，是否服务异常等等，要做的只是攻击一次，防御一次，选手可以有更多的时间聚焦于还未完成的题目。从主办方的角度来说，大大减轻了比赛的硬件成本和运维成本。</p><h2 id="RHG-自动化-AI自动化"><a href="#RHG-自动化-AI自动化" class="headerlink" title="RHG-自动化[ AI自动化]"></a>RHG-自动化[ AI自动化]</h2><p><strong>R</strong> obo <strong>H</strong> acking <strong>G</strong> ame(RHG)该利用人工智能或是AI或是自动化攻击程序来全自动的挖掘并利用漏洞，考验选手对于<code>漏洞理解</code>以及<code>工程化</code>能力。比赛开始前(一般为1-4周左右)主办方会给出测试环境以及相关接口文档。选手需要编写自动化程序来请求接口获取题目相关信息，该类程序通常称之为<code>bot</code>，在程序中<code>全自动</code>访问并挖掘目标漏洞，完成利用漏洞攻击并获取flag的过程。获取到的flag也由程序自动化提交。RHG因为是由bot全自动进行工作，所以比赛开始即可视为结束。剩下的一切全看参赛选手编写的自动化bot的工作情况。</p><p>比赛过程中不允许选手对bot进行任何的操作(包括debug/patch等等)。选手仅能看到自己的bot完成了哪些题。目前的得分情况等等。</p><h2 id="RW-真实世界"><a href="#RW-真实世界" class="headerlink" title="RW-真实世界"></a>RW-真实世界</h2><p><strong>R</strong> eal <strong>W</strong> orld(RW) 首次于2018年<code>长亭科技</code>主办的RealWorldCTF中出现，该赛制着重考察选手在面对真实的环境下的漏洞挖掘与利用能力。通常RW模式出题也会围绕着能够应用于真实渗透攻击当中的漏洞，一般来说RW常见题型为VM/Docker逃逸、针对浏览器的攻击、针对IoT/Car等设备的攻击，Web类攻击等等 在RW赛制中会有一个<code>Show Time</code>，当选手认为自己已经可以完成题目时，选手可以在比赛平台上提交展示申请，由工作人员根据申请先后顺序进行展示排期。选手展示之前需要上台并连接相关网络，同时现场大屏会切换至目标的正常页面。选手确认连接并测试OK之后开始计时。一般情况下上台攻击的时间为<code>5分钟</code>，选手一旦完成攻击现场大屏幕会实时看到攻击的效果，此时裁判会根据效果是否符合题目要求来判定该题是否完成。如5在攻击时间内依然未能看到展示效果则认为本次攻击失败。现如今为了防止选手恶意排期。通常会有一个队伍总展示次数(例如在2019年数字经济云安全公测大赛中每个队伍只允许上台展示30次)，选手也需要尽可能保证上台之后攻击的成功率</p><p>举个例子。题目要求需要攻击位于比赛网络中的某个网站并将首页替换为包含队伍名称的页面。题目给出该网站的一些信息(源代码/数据库等等)，选手经过本地挖掘漏洞之后，提交展示申请，排期到了之后进行上台展示。注意，因为RW模式是以展示效果来作为题目是否完成的准则，所以在RW模式中并<code>不存在Flag</code>。</p><h2 id="KoH-抢占山头"><a href="#KoH-抢占山头" class="headerlink" title="KoH-抢占山头"></a>KoH-抢占山头</h2><p><strong>K</strong> ing <strong>o</strong> f <strong>H</strong> ill(KoH)是近些年新衍生的一种赛制。该赛制有点类似于AwD，但是又和AwD有些不一样。选手面对的是一个黑盒的目标，需要先挖掘漏洞并利用漏洞控制目标。将自己的队伍标识(<code>队伍名称</code>或是<code>Token</code>之类)写入到指定文件。随后在该主机上进行加固等操作防止其他队伍攻击，主办方会定期去检查标识文件，根据文件中的队伍标识来判定本回合分数给予哪个队伍。可以看出KoH也是一种对抗极为激烈的赛制，同时考察选手的渗透能力及防御加固能力。</p><h2 id="Mix-混合"><a href="#Mix-混合" class="headerlink" title="Mix[混合]"></a>Mix[混合]</h2><p>混合模式结合了以上多种模式，现如今单一的赛制已经无法满足比赛及选手的参赛需求，所以大部分比赛会同时以多个模式进行比赛。例如参赛队伍通过解题(Jeopardy)可以获取一些初始分数，然后通过攻防对抗(AwD)进行得分增减的零和游戏，最终以得分高低分出胜负。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><strong>国内前三种模式比较常见</strong></p><p><strong>理论知识，解题模式，攻防模式</strong></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> CTF基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> 基础知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF简介</title>
      <link href="/2021/12/27/CTF/CTF%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/1%E3%80%81CTF%E7%AE%80%E4%BB%8B/"/>
      <url>/2021/12/27/CTF/CTF%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/1%E3%80%81CTF%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="CTF简介"><a href="#CTF简介" class="headerlink" title="CTF简介"></a>CTF简介</h1><p>CTF（<strong>C</strong> apture <strong>T</strong> he <strong>F</strong> lag，夺旗赛）CTF 的前身是传统黑客之间的网络技术比拼游戏，起源于 1996 年第四届 DEFCON，以代替之前黑客们通过互相发起真实攻击进行技术比拼的方式。</p><p>CTF是一种流行的信息安全竞赛形式，其英文名可直译为“夺得Flag”，也可意译为“夺旗赛”。其大致流程是，参赛团队之间通过进行攻防对抗、程序分析等形式，率先从主办方给出的比赛环境中得到一串具有<code>一定格式的字符串</code>或其他内容，并将其提交给主办方，从而夺得分数。为了方便称呼，我们把这样的内容称之为<strong>“Flag”。</strong></p><p>flag所表示的为目标服务器上存储的一些<code>敏感机密</code>的信息, 这些信息正常情况下是不能对外暴露的。选手利用目标的一些漏洞，获取到flag，其表示的即为在真实的黑客攻击中窃取到的机密信息。</p><p>一般情况下flag拥有固定格式为<code>flag&#123;xxxxx&#125;</code>，有些比赛会把flag关键词替换，例如CTFHub平台的flag为<code>ctfhub&#123;xxxxx&#125;</code>，利用固定格式来反推flag也是一种常见的解题思路</p><p>通常来说CTF是以团队为单位进行参赛。每个团队3-5人(具体根据主办方要求决定)，在整个比赛过程中<strong>既要每个选手拥有某个方向的漏洞挖掘能力</strong>，也要同队选手之间的<strong>相互配合</strong>。</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> CTF基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> 基础知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>题目类型</title>
      <link href="/2021/12/27/CTF/CTF%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/4%E3%80%81%E9%A2%98%E7%9B%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>/2021/12/27/CTF/CTF%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/4%E3%80%81%E9%A2%98%E7%9B%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="题目类型"><a href="#题目类型" class="headerlink" title="题目类型"></a>题目类型</h1><p>在CTF中主要包含以下5个大类的题目，有些比赛会根据自己的侧重点单独添加某个分类，例如<code>移动设备(Mobile)</code>, <code>电子取证(Forensics)</code>等，近年来也会出来混合类型的题目，例如在Web中存在一个二进制程序，需要选手先利用Web的漏洞获取到二进制程序，之后通过逆向或是Pwn等方式获得最终flag</p><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><p>Web类题目大部分情况下和网、Web、HTTP等相关技能有关。主要考察选手对于Web攻防的一些知识技巧。诸如<code>SQL注入</code>、<code>XSS</code>、<code>代码执行</code>、<code>代码审计</code>等等都是很常见的考点。一般情况下Web题目只会给出一个能够访问的URL。部分题目会给出附件</p><h2 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h2><p>Pwn类题目重点考察选手对于<code>二进制漏洞的挖掘和利用</code>能力，其考点也通常在<code>堆栈溢出</code>、<code>格式化漏洞</code>、<code>UAF</code>、<code>Double Free</code>等常见二进制漏洞上。选手需要根据题目中给出的二进制可执行文件进行逆向分析，找出其中的漏洞并进行利用，编写对应的漏洞攻击脚本(<code>Exploit</code>)，进而对主办方给出的远程服务器进行攻击并获取flag通常来说Pwn类题目给出的远程服务器信息为<code>nc IP_ADDRESS PORT</code>，例如<code>nc 1.2.3.4 4567</code>这种形式，表示在<code>1.2.3.4</code>这个IP的<code>4567</code>端口上运行了该题目</p><h2 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h2><p>Re类题目考察选手<code>逆向工程</code>能力。题目会给出一个可执行二进制文件，有些时候也可能是Android的APK安装包。选手需要逆向给出的程序，分析其程序工作原理。最终根据程序行为等获得flag</p><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><p>Crypto类题目考察选手对<code>密码学</code>相关知识的了解程度，诸如<code>RSA</code>、<code>AES</code>、<code>DES</code>等都是密码学题目的常客。有些时候也会给出一个加密脚本和密文，根据加密流程逆推出明文。</p><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><p>Misc意为杂项，即不包含在以上分类的题目都会放到这个分类。题目会给出一个附件。选手下载该附件进行分析，最终得出flag</p><p>常见的题型有图片隐写、视频隐写、文档隐写、流量分析、协议分析、游戏、IoT相关等等。五花八门，种类繁多。</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> CTF基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> 基础知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>日志的自动分类插件 hexo-auto-category</title>
      <link href="/2021/12/27/Hexo/%E6%97%A5%E5%BF%97%E7%9A%84%E8%87%AA%E5%8A%A8%E5%88%86%E7%B1%BB%E6%8F%92%E4%BB%B6-hexo-auto-category/"/>
      <url>/2021/12/27/Hexo/%E6%97%A5%E5%BF%97%E7%9A%84%E8%87%AA%E5%8A%A8%E5%88%86%E7%B1%BB%E6%8F%92%E4%BB%B6-hexo-auto-category/</url>
      
        <content type="html"><![CDATA[<h1 id="日志的自动分类插件-hexo-auto-category"><a href="#日志的自动分类插件-hexo-auto-category" class="headerlink" title="日志的自动分类插件 hexo-auto-category"></a>日志的自动分类插件 hexo-auto-category</h1><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Hexo写日志，通常我们都需要维护一个front-matter信息，包括<code>title</code>、<code>date</code>。博客多了，为了方便日志分类，一般还需要设置<code>categories</code>。<br>比如下面的例子：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">title: Hexo简介</span><br><span class="line">date: 2008-08-08</span><br><span class="line">categories:</span><br><span class="line">  - web开发</span><br><span class="line">  - 前端</span><br><span class="line">  - 博客框架</span><br></pre></td></tr></table></figure><p>久而久之，就会发现很多问题：</p><ul><li><strong>工作繁琐</strong>：大量的category是重复性工作</li><li><strong>容易出错</strong>：大小写和中英文目录有可能混杂。比如有个<code>web</code>目录，偶尔我们写成了<code>Web</code>，造成了目录树中冗余的节点。</li><li><strong>可维护性差</strong>：如果要更改<code>目录树</code>中的节点，就要手动更改每个日志的<code>categories</code>变量。</li></ul><p>本文介绍一种<strong>自动生成categories</strong>的插件 <a href="https://github.com/xu-song/hexo-auto-category">hexo-auto-category官方地址</a>。</p><h1 id="自动生成-categories"><a href="#自动生成-categories" class="headerlink" title="自动生成 categories"></a>自动生成 <code>categories</code></h1><p>最常用的文件管理策略，就是利用文件系统目录结构(树形结构 directory-tree)。<br>同样，为了便于管理大量的日志文件，采用目录结构是一种简便可行的方案。<code>hexo-auto-category</code>根据日志文件(Markdown)所在文件目录自动分类，即自动生成<code>markdown</code>的front-matter中的<code>categories</code>变量。</p><p><strong>示例</strong></p><p>对于博客  <code>source/_post/web/framework/hexo.md</code>，该插件会自动生成以下<code>categories</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">categories:</span><br><span class="line">  - web</span><br><span class="line">  - framework</span><br></pre></td></tr></table></figure><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-auto-category --save</span><br></pre></td></tr></table></figure><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>在站点根目录下的<code>_config.yml</code>添加：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Generate categories from directory-tree</span><br><span class="line"># Dependencies: https://github.com/xu-song/hexo-auto-category</span><br><span class="line"># depth: the depth of directory-tree you want to generate, should &gt; 0</span><br><span class="line">auto_category:</span><br><span class="line"> enable: true</span><br><span class="line"> depth:</span><br></pre></td></tr></table></figure><h1 id="编译-amp-部署"><a href="#编译-amp-部署" class="headerlink" title="编译 &amp; 部署"></a>编译 &amp; 部署</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure><h1 id="高级配置"><a href="#高级配置" class="headerlink" title="高级配置"></a>高级配置</h1><p>如果只想生成第一级目录分类，可以设置<code>depth</code>属性，比如：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">auto_category:</span><br><span class="line"> <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line"> depth: 1</span><br></pre></td></tr></table></figure><p>如有任何疑问，可在<a href="https://github.com/xu-song/hexo-auto-category/issues">Github Issue</a>提出</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Win10下python3和python2同时安装并解决pip共存问题</title>
      <link href="/2021/12/26/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/Win10%E4%B8%8Bpython3%E5%92%8Cpython2%E5%90%8C%E6%97%B6%E5%AE%89%E8%A3%85%E5%B9%B6%E8%A7%A3%E5%86%B3pip%E5%85%B1%E5%AD%98%E9%97%AE%E9%A2%98/"/>
      <url>/2021/12/26/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/Win10%E4%B8%8Bpython3%E5%92%8Cpython2%E5%90%8C%E6%97%B6%E5%AE%89%E8%A3%85%E5%B9%B6%E8%A7%A3%E5%86%B3pip%E5%85%B1%E5%AD%98%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="Win10下python3和python2同时安装并解决pip共存问题"><a href="#Win10下python3和python2同时安装并解决pip共存问题" class="headerlink" title="Win10下python3和python2同时安装并解决pip共存问题"></a>Win10下python3和python2同时安装并解决pip共存问题</h1><p><strong>特别说明</strong>，本文是在<strong>Windows64位系统</strong>下进行的，32位系统请下载相应版本的安装包，安装方法类似。</p><p>使用python开发，环境有Python2和 python3 两种，有时候需要两种环境切换使用，下面提供详细教程一份。</p><h2 id="1、下载python3和python2"><a href="#1、下载python3和python2" class="headerlink" title="1、下载python3和python2"></a><strong>1、下载python3和python2</strong></h2><p>进入python官网，链接<a href="https://link.jianshu.com/?t=https://www.python.org/">https://www.python.org/</a></p><p>选择Downloads—&gt;Windows，点击进入就可以看到寻找想要的python版本</p><p><img src="https://gitee.com/littlefiremonkey/image/raw/master/5988523-de82357bbba2ad6a" alt="img"></p><p>本文选择的是：</p><p>Python3.5.2,点击后面链接可直接下载，<a href="https://link.jianshu.com/?t=https://www.python.org/ftp/python/3.5.2/python-3.5.2rc1-amd64.exe">https://www.python.org/ftp/python/3.5.2/python-3.5.2rc1-amd64.exe</a></p><p>Python2.7.9, 点击后面链接可直接下载，<a href="https://link.jianshu.com/?t=https://www.python.org/ftp/python/2.7.9/python-2.7.9.amd64.msi">https://www.python.org/ftp/python/2.7.9/python-2.7.9.amd64.msi</a></p><p><img src="https://gitee.com/littlefiremonkey/image/raw/master/5988523-41d9c51fce8d0cf5" alt="img"></p><p><img src="https://gitee.com/littlefiremonkey/image/raw/master/5988523-3ec402f13d0f8913" alt="img"></p><h2 id="2、python3安装"><a href="#2、python3安装" class="headerlink" title="2、python3安装"></a><strong>2、python3安装</strong></h2><p><strong>说明：</strong>本文先安装python3，然后安装python2</p><p>首先选择安装目录，本文安装路径为D:\Python\python35，然后点击下载好的python3软件包进行安装，具体流程如下：</p><p>在下图红色标记的地方Add Python3.5 to PATH前勾选，可以直接将python3添加到系统环境变量，然后在Customize installation中自定义安装路径。</p><p><img src="https://gitee.com/littlefiremonkey/image/raw/master/5988523-1d289078b74a795c" alt="img"></p><p>直接next即可</p><p><img src="https://gitee.com/littlefiremonkey/image/raw/master/5988523-d22ecf73cae68300" alt="img"></p><p>下图中Advanced Options中没有默认勾选的根据自己的需要进行勾选，黄色标记为VS 2015及其以后版本需要的，如果你以后打算在VS 2015中配置python环境请勾选此项，点击Browse选择安装目录，然后点击Install进行安装。</p><p><img src="https://gitee.com/littlefiremonkey/image/raw/master/5988523-2bc0d4a03f040fa5" alt="img"></p><p>等待如下安装过程</p><p><img src="https://gitee.com/littlefiremonkey/image/raw/master/5988523-e04dcb6ee0cffae8" alt="img"></p><p>安装成功</p><p><img src="https://gitee.com/littlefiremonkey/image/raw/master/5988523-eddb404f2dc2b6a9" alt="img"></p><p>点击关闭，查看python3安装情况，按“Win +  R”快捷键，在打开的“运行”对话框中，输入“cmd”按回车，进入如下界面，输入python查看python3安装情况，显示python  3.5.2 的版本信息，则安装成功，可以输入语句print(1 + 1)进行测试。</p><p><img src="https://gitee.com/littlefiremonkey/image/raw/master/5988523-b1da48b9e7669877" alt="img"></p><h2 id="3、python2安装"><a href="#3、python2安装" class="headerlink" title="3、python2安装"></a><strong>3、python2安装</strong></h2><p>点击python2安装包，点击运行，next，选择安装目录，本文安装路径为D:\Python\python27，然后next</p><p><img src="https://gitee.com/littlefiremonkey/image/raw/master/5988523-62b0fedd18e80c74" alt="img"></p><p>下图黄色圈出的部分，显示不能够添加路径到系统变量，不能够直接使用python命令没有关系，先点击next进行安装，后面专门解决。</p><p><img src="https://gitee.com/littlefiremonkey/image/raw/master/5988523-2f886478a13581ae" alt="img"></p><p><img src="https://gitee.com/littlefiremonkey/image/raw/master/5988523-31615841f1bbb5fa" alt="img"></p><p>点击finish完成安装。</p><p>至此，python2和python3安装完毕。</p><p><strong>特别说明：此时运行“cmd”命令进入DOS命令提示框，输入python仍然显示python3版本，接下来请参考本系列教程二。</strong></p><h2 id="4、添加python2到系统环境变量"><a href="#4、添加python2到系统环境变量" class="headerlink" title="4、添加python2到系统环境变量"></a><strong>4、添加python2到系统环境变量</strong></h2><p>打开，控制面板\系统和安全\系统，选择高级系统设置，环境变量，选择Path，点击编辑，新建，分别添加D:\Python\python27和D:\Python\python27\Scripts到环境变量。</p><p><img src="https://gitee.com/littlefiremonkey/image/raw/master/image-20211203224731212.png" alt="image-20211203224731212"></p><p><strong>注意：</strong>python3安装时可以选择自动添加到系统环境变量，如未选择，方法和python2添加过程相同。</p><h2 id="5、修改python-exe名字为python2-exe和python3-exe"><a href="#5、修改python-exe名字为python2-exe和python3-exe" class="headerlink" title="5、修改python.exe名字为python2.exe和python3.exe"></a><strong>5、修改python.exe名字为python2.exe和python3.exe</strong></h2><p>找到python2和python3的安装目录，修改python2.7.9和python3.5.2中python.exe和pythonw.exe的名称为python2.exe、pythonw2.exe和python3.exe、pythonw3.exe。</p><p>然后在运行cmd命令，输入python2即可运行python2.7.9版本</p><p><img src="https://gitee.com/littlefiremonkey/image/raw/master/5988523-794c9229971e7428" alt="img"></p><p>输入python3即可运行python3.5.2版本</p><p><img src="https://gitee.com/littlefiremonkey/image/raw/master/5988523-24d49a00b8330d6a" alt="img"></p><p>至此，python2和python3 安装完毕。</p><h2 id="6、pip2-和-pip3设置"><a href="#6、pip2-和-pip3设置" class="headerlink" title="6、pip2 和 pip3设置"></a><strong>6、pip2 和 pip3设置</strong></h2><p>Python 安装包需要用到包管理工具pip，但是当同时安装python2和python3的时候，pip只是其中一个版本，以下将提供一个修改方式，即重新安装两个版本的pip，使得两个python版本的pip能够共存。</p><p>在DOS命令框输入命令</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python3 -m pip install --upgrade pip --force-reinstall</span><br></pre></td></tr></table></figure><p>显示重新安装成功。</p><p><img src="https://gitee.com/littlefiremonkey/image/raw/master/5988523-054a7aa96cfeb593" alt="img"></p><p>在DOS命令框输入命令</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python2 -m pip install --upgrade pip --force-reinstall</span><br></pre></td></tr></table></figure><p>显示重新安装成功。</p><p><img src="https://gitee.com/littlefiremonkey/image/raw/master/5988523-2a6cb492ae23168c" alt="img"></p><p>现在可以通过pip2 -V 和 pip3 -V 查看两个版本的pip信息，以后只需运行</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip2 install XXX和pip3 install XXX</span><br></pre></td></tr></table></figure><p>即可安装各自的python包。</p><p><img src="https://gitee.com/littlefiremonkey/image/raw/master/image-20211203224550722.png" alt="image-20211203224550722"></p><p>至此，pip2和pip3 修改成功。</p><h2 id="7、在PyCharm中切换"><a href="#7、在PyCharm中切换" class="headerlink" title="7、在PyCharm中切换"></a><strong>7、在PyCharm中切换</strong></h2><p>如果你使用的是PyCharm编写Python，当需要切换Python版本时，只需要在设置中搜索“Project Interpreter”，然后进行切换即可，同时可以看到已经安装到该版本中的库。</p>]]></content>
      
      
      <categories>
          
          <category> 环境配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java开发环境搭建</title>
      <link href="/2021/12/26/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/Java%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
      <url>/2021/12/26/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/Java%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="Java开发环境搭建"><a href="#Java开发环境搭建" class="headerlink" title="Java开发环境搭建"></a>Java开发环境搭建</h1><p>这里只介绍<code>window</code>环境下的<code>Jdk</code>安装配置、Linux以及Mac的后面补充</p><h2 id="1、Jdk简介"><a href="#1、Jdk简介" class="headerlink" title="1、Jdk简介"></a>1、Jdk简介</h2><blockquote><p>Jdk全称（java development kit）,及java标准开发包。</p><blockquote><p>JDK是 <a href="https://baike.baidu.com/item/Java/85979">Java</a> 语言的<a href="https://baike.baidu.com/item/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E5%8C%85/10418833">软件开发工具包</a>主要用于<a href="https://baike.baidu.com/item/%E7%A7%BB%E5%8A%A8%E8%AE%BE%E5%A4%87/9157757">移动设备</a>、<a href="https://baike.baidu.com/item/%E5%B5%8C%E5%85%A5%E5%BC%8F%E8%AE%BE%E5%A4%87/10055189">嵌入式设备</a>上的java应用程序。JDK是整个java开发的核心，它包含了JAVA的运行环境（JVM+Java系统类库）和JAVA工具。</p><blockquote><p>Jdk中包含了Jre(Java Runtime Envirnment)【java运行环境】、java工具和java开发所需的一些基础类库（及JavaApi 包括rt.jar）</p></blockquote></blockquote></blockquote><h2 id="2、Jdk下载"><a href="#2、Jdk下载" class="headerlink" title="2、Jdk下载"></a>2、Jdk下载</h2><p><a href="https://www.oracle.com/java/technologies/downloads/">官网</a></p><p>​        根据自己电脑的配置<code>32/64位</code>等选择版本下载。个人使用的jdk1.8_211版本，如果需要可以下载，下面是连接</p><p>链接：<a href="https://pan.baidu.com/s/16wOSHaTDmol25wVDLNgy6A">https://pan.baidu.com/s/16wOSHaTDmol25wVDLNgy6A</a><br> 提取码：fd8j</p><h2 id="3、jdk的安装"><a href="#3、jdk的安装" class="headerlink" title="3、jdk的安装"></a>3、jdk的安装</h2><p>​      双击下载好的exe软件，一路下一步默认安装、安装过程中也可以根据需要选择安装路径</p><h2 id="4、环境变量配置"><a href="#4、环境变量配置" class="headerlink" title="4、环境变量配置"></a>4、环境变量配置</h2><p><strong>右击此电脑&gt;属性&gt;高级系统设置&gt;环境变量</strong></p><p><img src="https://gitee.com/littlefiremonkey/image/raw/master/image-20211201085153585.png" alt="image-20211201085153585"></p><h3 id="1、新建JAVA-HOME"><a href="#1、新建JAVA-HOME" class="headerlink" title="1、新建JAVA_HOME"></a>1、新建JAVA_HOME</h3><p><strong>系统变量中点击新建按钮</strong></p><p>输入：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">变量名：JAVA_HOME</span><br><span class="line">变量值：安装jdk的路径</span><br></pre></td></tr></table></figure><p>示范：</p><p><img src="https://gitee.com/littlefiremonkey/image/raw/master/image-20211201085651886.png" alt="image-20211201085651886"></p><h3 id="2、新建CLASSPATH"><a href="#2、新建CLASSPATH" class="headerlink" title="2、新建CLASSPATH"></a>2、新建CLASSPATH</h3><p><strong>系统变量中新建，注意前面的<code>.</code>不要忽略</strong></p><p>输入：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">变量名：CLASSPATH</span><br><span class="line">变量值：.;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar;</span><br></pre></td></tr></table></figure><p>示范：</p><p><img src="https://gitee.com/littlefiremonkey/image/raw/master/image-20211201090328307.png" alt="image-20211201090328307"></p><h3 id="3、修改Path变量"><a href="#3、修改Path变量" class="headerlink" title="3、修改Path变量"></a>3、修改Path变量</h3><p><strong>找到path点击编辑&gt;新建两条</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%JAVA_HOME%\bin</span><br><span class="line">%JAVA_HOME%\jre\bin</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/littlefiremonkey/image/raw/master/image-20211201090342556.png" alt="image-20211201090342556"></p><p><strong>所有配置完成后确认</strong></p><h3 id="4、测试是否成功"><a href="#4、测试是否成功" class="headerlink" title="4、测试是否成功"></a>4、测试是否成功</h3><p>打开命令提示符窗口、快捷键win+R输入cmd打开</p><p>输入java、java -version出现信息表示安装成功</p><p><img src="https://gitee.com/littlefiremonkey/image/raw/master/image-20211203224300895.png" alt="image-20211203224300895"></p>]]></content>
      
      
      <categories>
          
          <category> 环境配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 环境配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搜狗输入法自动创建Page Front-matter</title>
      <link href="/2021/12/26/Hexo/%E6%90%9C%E7%8B%97%E8%BE%93%E5%85%A5%E6%B3%95%E8%87%AA%E5%8A%A8%E5%88%9B%E5%BB%BAPage-Front-matter/"/>
      <url>/2021/12/26/Hexo/%E6%90%9C%E7%8B%97%E8%BE%93%E5%85%A5%E6%B3%95%E8%87%AA%E5%8A%A8%E5%88%9B%E5%BB%BAPage-Front-matter/</url>
      
        <content type="html"><![CDATA[<h1 id="搜狗输入法自动创建Page-Front-matter"><a href="#搜狗输入法自动创建Page-Front-matter" class="headerlink" title="搜狗输入法自动创建Page Front-matter"></a>搜狗输入法自动创建Page Front-matter</h1><p>所示，本章的header就是我输入“ifm”三个字母并按下空格自动创建的内容。其中包含了Hexo post的所有参数，并且自动生成了文章id、文章的创建时间、更新时间以及文章的永久链接：</p><p><img src="https://gitee.com/littlefiremonkey/picture/raw/master/d3eb0de8dddcda417311e714f9709520.gif" alt="img"></p><p>由于每次写文章都要写Page Front-matter，非常麻烦，每次都需要写许多重复的内容。类似于：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 搜狗输入法自动创建Page Front-matter</span><br><span class="line">categories:</span><br><span class="line">  - Hexo</span><br><span class="line">tags:</span><br><span class="line">  - Hexo</span><br><span class="line">date: 2021-12-26 15:27:47</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>通过使用搜狗输入法自定义短语的时间戳语法（理论上国产的拼音输入法都有此功能），你可以快速、简洁地创建文章的header内容。</p><h2 id="搜狗输入法自定义短语的时间戳语法"><a href="#搜狗输入法自定义短语的时间戳语法" class="headerlink" title="搜狗输入法自定义短语的时间戳语法"></a>搜狗输入法自定义短语的时间戳语法</h2><p><img src="https://gitee.com/littlefiremonkey/picture/raw/master/image-20211226234405762.png" alt="image-20211226234405762"></p><p><img src="https://gitee.com/littlefiremonkey/picture/raw/master/image-20211226235230142.png" alt="image-20211226235230142"></p><p>搜狗输入法自带短语</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">;  函数    含义    举例</span><br><span class="line">;  <span class="variable">$year</span>    年(4位) 2006、2008</span><br><span class="line">;  <span class="variable">$year_yy</span>年(2位) 06、08</span><br><span class="line">;  <span class="variable">$month</span>     月      12、8、3</span><br><span class="line">;  <span class="variable">$month_mm</span>  月      12、08、03//此函数在输入法3.1版之后（含）有效</span><br><span class="line">;  <span class="variable">$day</span>     日      3、13、22</span><br><span class="line">;  <span class="variable">$day_dd</span>日       03、13、22//此函数在输入法3.1版之后（含）有效</span><br><span class="line">;  <span class="variable">$weekday</span> 星期    0、1、2、5、6</span><br><span class="line">;  <span class="variable">$fullhour</span>时(24小时制)  2、8、13、23</span><br><span class="line">;  <span class="variable">$fullhour_hh</span>时(24小时制)  02、08、13、23//此函数在输入法3.1版之后（含）有效</span><br><span class="line">;  <span class="variable">$halfhour</span>时(12小时制)2、8、10、11</span><br><span class="line">;  <span class="variable">$halfhour_hh</span>时(12小时制)02、08、10、11//此函数在输入法3.1版之后（含）有效</span><br><span class="line">;  <span class="variable">$ampm</span>    AM、PM(英)AM、PM（大写）</span><br><span class="line">;  <span class="variable">$minute</span>  分      02、08、15、28</span><br><span class="line">;  <span class="variable">$second</span>  秒      02、08、15、28</span><br><span class="line">;  <span class="variable">$year_cn</span> 年(中文4位)二〇〇六</span><br><span class="line">;  <span class="variable">$year_yy_cn</span>年(中文2位)〇六</span><br><span class="line">;  <span class="variable">$month_cn</span>月(中文)十二、八、三</span><br><span class="line">;  <span class="variable">$day_cn</span>  日(中文)三、十三、二十二</span><br><span class="line">;  <span class="variable">$weekday_cn</span> 星期(中文)日、一、二、五、六</span><br><span class="line">;  <span class="variable">$fullhour_cn</span>时(中文24时制)二、八、十三、二十三</span><br><span class="line">;  <span class="variable">$halfhour_cn</span>时(中文12时制)二、八、一、十一</span><br><span class="line">;  <span class="variable">$ampm_cn</span> 上午下午(中文)上午、下午</span><br><span class="line">;  <span class="variable">$minute_cn</span>分(中文)零二、零八、十五、二十八</span><br><span class="line">;  <span class="variable">$second_cn</span>秒(中文)零二、零八、十五、二十八</span><br><span class="line">;  具体你可以参考这个文件最下面的例子，实际体验一下就明白了。</span><br><span class="line">;  你可以用自定义短语来做一个带动态时间的多行回信落款。</span><br><span class="line">;  ss,1=<span class="comment">#$year年$month月$day_dd日 $fullhour:$minute:$second</span></span><br></pre></td></tr></table></figure><p>按照语法添加新短语即可</p><p><img src="https://gitee.com/littlefiremonkey/picture/raw/master/image-20211226235416804.png" alt="image-20211226235416804"></p><p>我添加的自定义短语</p><p><img src="https://gitee.com/littlefiremonkey/picture/raw/master/image-20211226235754970.png" alt="image-20211226235754970"></p><p>缩写</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ifm</span><br></pre></td></tr></table></figure><p>短语</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#---</span></span><br><span class="line">title: </span><br><span class="line">categories: </span><br><span class="line">tags: </span><br><span class="line">  - </span><br><span class="line">  - </span><br><span class="line">date: <span class="variable">$year</span>-<span class="variable">$month_mm</span>-<span class="variable">$day_dd</span> <span class="variable">$fullhour</span>:<span class="variable">$minute</span>:<span class="variable">$second</span></span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>上面缩写是自己打出来的缩写，出现的第一个（候选位置）就是下面的结果</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>在文本框打出ifm，按 ‘1’ 键查看结果</p><p><img src="https://gitee.com/littlefiremonkey/picture/raw/master/image-20211226235953546.png" alt="image-20211226235953546"></p><p><img src="https://gitee.com/littlefiremonkey/picture/raw/master/image-20211227000132699.png" alt="image-20211227000132699"></p><p>如果出现了这样的结果说明成功了</p><p><strong>PS：我用的typora打开，所以前面和后面的“—”转换成了一个边框</strong></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTFd+CTFd-whale动态靶场搭建</title>
      <link href="/2021/12/25/CTF/CTFd+CTFd-whale%E5%8A%A8%E6%80%81%E9%9D%B6%E5%9C%BA%E6%90%AD%E5%BB%BA/"/>
      <url>/2021/12/25/CTF/CTFd+CTFd-whale%E5%8A%A8%E6%80%81%E9%9D%B6%E5%9C%BA%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="CTFd-CTFd-whale动态靶场搭建"><a href="#CTFd-CTFd-whale动态靶场搭建" class="headerlink" title="CTFd+CTFd-whale动态靶场搭建"></a>CTFd+CTFd-whale动态靶场搭建</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>目前CTFd平台的搭建教程网上有很多，但也有部分写的水，不够详细，跟着那些教程部署完多多少少还是会出现不少问题，从而导致部署失败，既浪费了时间精力不说还多多少少影响了学习的进度，有这个功夫在这多折腾平台，还不如多做两道Web题目呢~</p><p>由于学校社团内部学习交流的需要，本人在经过两天的折腾学习后，结合各位前辈所写的的教程，终于成功搭建了<strong>最新的版本的CTFd</strong>，同时使用<strong>CTFd-Whale</strong>支持<strong>动态靶场环境</strong>。</p><p>本教程基于 <strong>Ubuntu14.02 + Docker + Docker Compose</strong>部署，采用最新的<strong>CTFd v3.3.1</strong>安装，文章最后更新日期为 2021.12.25</p><p>如遇到网络环境不佳，导致下载安装速度过慢，请尝试换源、科学上网等。</p><p>本文使用的是@M1kasu已经对<strong>CTFd v3.3.1</strong>官方源码进行了更换国内镜像源、添加CTFd-Whale子模块、配置frp网络、设置静态文件CDN加速等工作，可前往使用M1kasu修改的版本进行安装部署。请前往获取：<a href="https://github.com/M1kasu/CTFd">https://github.com/M1kasu/CTFd</a></p><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><p><strong>使用的服务器版本：Ubuntu 21.10/Ubuntu 20.04 LTS</strong></p><p><strong>软件版本：Docker version 20.10.11, build dea9396</strong></p><p><strong>docker-compose version 1.29.2, build 5becea4c</strong></p><p>测试环境：谷歌云</p><p>不建议用虚拟机搭建，同样的办法我在虚拟机上没有搭建成功，建议使用云服务器</p><p><strong>=======================================================</strong></p><h3 id="系统换源"><a href="#系统换源" class="headerlink" title="系统换源"></a>系统换源</h3><p>由于本人的环境为<strong>腾讯云Ubuntu14.02</strong>，故只针对此系统进行换源。</p><p><strong>由于腾讯云自带腾讯云源，所以不需要换源就很快。</strong></p><p><strong>如果是虚拟机搭建就必须要换源。</strong></p><p>具体方法如下：</p><p>Ubuntu系统中，软件源文件地址为：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/etc/apt/sources.list</span><br></pre></td></tr></table></figure><p><strong>1.备份原来的源，将以前的源备份一下，以防以后可以用的。</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak</span><br></pre></td></tr></table></figure><p><strong>2.打开/etc/apt/sources.list文件，在前面添加如下条目，并保存。</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/apt/sources.list</span><br></pre></td></tr></table></figure><p>（可将vim更换为自己熟悉的编辑器）</p><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">#添加阿里源</span><br><span class="line"><span class="keyword">deb</span> http://mirrors.aliyun.<span class="keyword">com</span>/ubuntu/ focal main restricted universe multiverse</span><br><span class="line"><span class="keyword">deb</span>-src http://mirrors.aliyun.<span class="keyword">com</span>/ubuntu/ focal main restricted universe multiverse</span><br><span class="line"><span class="keyword">deb</span> http://mirrors.aliyun.<span class="keyword">com</span>/ubuntu/ focal-security main restricted universe multiverse</span><br><span class="line"><span class="keyword">deb</span>-src http://mirrors.aliyun.<span class="keyword">com</span>/ubuntu/ focal-security main restricted universe multiverse</span><br><span class="line"><span class="keyword">deb</span> http://mirrors.aliyun.<span class="keyword">com</span>/ubuntu/ focal-updates main restricted universe multiverse</span><br><span class="line"><span class="keyword">deb</span>-src http://mirrors.aliyun.<span class="keyword">com</span>/ubuntu/ focal-updates main restricted universe multiverse</span><br><span class="line"><span class="keyword">deb</span> http://mirrors.aliyun.<span class="keyword">com</span>/ubuntu/ focal-proposed main restricted universe multiverse</span><br><span class="line"><span class="keyword">deb</span>-src http://mirrors.aliyun.<span class="keyword">com</span>/ubuntu/ focal-proposed main restricted universe multiverse</span><br><span class="line"><span class="keyword">deb</span> http://mirrors.aliyun.<span class="keyword">com</span>/ubuntu/ focal-backports main restricted universe multiverse</span><br><span class="line"><span class="keyword">deb</span>-src http://mirrors.aliyun.<span class="keyword">com</span>/ubuntu/ focal-backports main restricted universe multiverse</span><br></pre></td></tr></table></figure><p><strong>3.更新</strong></p><p>更新源</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure><p>如出现依赖问题，解决方式如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get -f install</span><br></pre></td></tr></table></figure><p>更新软件：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get upgrade</span><br></pre></td></tr></table></figure><p>更改完 sources.list 文件后请运行 sudo apt-get update 更新索引以生效。</p><h3 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get install git -y</span><br></pre></td></tr></table></figure><h3 id="Docker环境安装"><a href="#Docker环境安装" class="headerlink" title="Docker环境安装"></a>Docker环境安装</h3><p><strong>更新软件列表</strong></p><p>安装前记得先更新一下软件源和软件列表，不然可能会报错</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get upgrade</span><br></pre></td></tr></table></figure><p><strong>安装docker</strong></p><p>通过版本安装</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">更新系统包索引</span><br><span class="line">sudo apt-get update</span><br><span class="line">添加HTTPS协议，允许apt从HTTPS安装软件包</span><br><span class="line">sudo apt-get install  apt-transport-https  ca-certificates curl  software-properties-common</span><br><span class="line">添加Docker公共密钥 Docker 官方源</span><br><span class="line">curl -fsSL  https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add</span><br><span class="line">设置版本库类型，软件版本包括三种： stable、edge、<span class="built_in">test</span></span><br><span class="line">sudo add-apt-repository <span class="string">&quot;deb [arch=amd64]  https://download.docker.com/linux/ubuntu <span class="subst">$(lsb_release -cs)</span> stable&quot;</span></span><br><span class="line">安装最新版docker-ce</span><br><span class="line">sudo apt-get install docker-ce</span><br><span class="line">设置开机自启动并启动docker</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> docker</span><br><span class="line">sudo systemctl start docker</span><br></pre></td></tr></table></figure><h3 id="Docker-Compose安装"><a href="#Docker-Compose安装" class="headerlink" title="Docker-Compose安装"></a>Docker-Compose安装</h3><p>通过GitHub安装</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">进入https://github.com/docker/compose/releases 查看最新版本。</span><br><span class="line">sudo curl -L https://github.com/docker/compose/releases/download/1.26.2/docker-compose-`uname -s`-`uname -m` -o /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line">设置权限</span><br><span class="line">sudo chmod +x /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line">查看是否安装成功</span><br><span class="line">docker-compose --version</span><br><span class="line">出现docker-compose version 1.26.2即安装成功</span><br></pre></td></tr></table></figure><p><strong>设置docker镜像加速</strong></p><p>这个是需要设置的</p><ul><li>进入阿里云容器镜像服务:<a href="https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors">https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors</a></li><li>根据底下配置方法进行配置</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-<span class="string">&#x27;EOF&#x27;</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://******.mirror.aliyuncs.com&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><p>通过<strong>docker –version</strong>来验证Docker安装是否成功</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker --version</span><br></pre></td></tr></table></figure><p>如果能正常返回版本信息，那么恭喜你现在已经完成了环境准备环节，加油！</p><h2 id="安装准备"><a href="#安装准备" class="headerlink" title="安装准备"></a>安装准备</h2><p><strong>本文针对的是最新版CTFd 3.3.1及CTFd-whale的教程，若不需要配置CTFd-Whale，请移步官方教程。</strong></p><h3 id="Docker集群设置"><a href="#Docker集群设置" class="headerlink" title="Docker集群设置"></a>Docker集群设置</h3><p><strong>1、启用Docker Swarm，并为生成的Manager节点取一个别名</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker swarm init<span class="comment"># 初始化</span></span><br><span class="line">docker node ls<span class="comment"># 查看节点ID</span></span><br><span class="line">docker node update --label-add name=linux-1 &lt;节点 ID&gt;  <span class="comment"># 添加别名</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/littlefiremonkey/picture/raw/master/image-20211227111036360.png" alt="image-20211227111036360"></p><h3 id="下载CTFd修改版"><a href="#下载CTFd修改版" class="headerlink" title="下载CTFd修改版"></a><strong>下载CTFd修改版</strong></h3><p>博主已经对CTFd v3.3.1官方源码进行了更换国内镜像源、添加CTFd-Whale子模块、配置frp网络、设置静态文件CDN加速等工作，可前往使用作者修改的版本进行安装部署。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> -b frp https://github.com/M1kasu/CTFd.git<span class="comment"># 修改版（根目录不建议修改名字）</span></span><br><span class="line"><span class="built_in">cd</span> CTFd<span class="comment"># 进入CTFd目录</span></span><br><span class="line">git submodule update --init <span class="comment"># 更新CTFd-Whale子模块</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ——————————————————————————————————————————————————————</span></span><br><span class="line"><span class="comment"># 如果你访问Github的速度不佳，也可以使用别人提供的CSDN和Gitee版（可选）</span></span><br><span class="line">git <span class="built_in">clone</span> -b https://codechina.csdn.net/vicosna/CTFd.git<span class="comment"># CSDN</span></span><br><span class="line"><span class="built_in">cd</span> CTFd<span class="comment"># 进入CTFd目录</span></span><br><span class="line">sed -i <span class="string">&#x27;s/github.com/codechina.csdn.net/g&#x27;</span> .gitmodules<span class="comment"># 修改子模块Url</span></span><br><span class="line">git submodule update --init <span class="comment"># 更新CTFd-Whale子模块</span></span><br><span class="line"><span class="comment"># ——————————————————————————————————————————————————————</span></span><br><span class="line">git <span class="built_in">clone</span> -b frp https://gitee.com/vicosna/CTFd.git<span class="comment"># Gitee</span></span><br><span class="line"><span class="built_in">cd</span> CTFd<span class="comment"># 进入CTFd目录</span></span><br><span class="line">sed -i <span class="string">&#x27;s/github.com/gitee.com/g&#x27;</span> .gitmodules<span class="comment"># 修改子模块Url</span></span><br><span class="line">git submodule update --init </span><br></pre></td></tr></table></figure><h2 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h2><p>运行<strong>docker-compose build</strong>命令，等待结果</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose build</span><br></pre></td></tr></table></figure><p>如果修改的各配置文件没有错误的话，那么应该就会返回 <strong>Successfully tagged ctfd_ctfd:latest~</strong></p><h2 id="部署容器"><a href="#部署容器" class="headerlink" title="部署容器"></a>部署容器</h2><p>运行<strong>docker-compose up -d</strong>部署容器，耐心等待~</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p>我们再来使用docker ps -a查看一下当前正在运行的容器是否都正常。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/littlefiremonkey/picture/raw/master/image-20211227111934919.png" alt="image-20211227111934919"></p><p>访问你的服务器的公网IP就能打开平台界面啦，由于CTFd最新版启用了nginx端口转发，我们直接访问80端口即可，当然CTFd的默认端口8000也可以访问。</p><p>Hint: 对于Docker的两条命令docker-compose build 和 docker-compose up -d ，我们可以将它们合起来写成一句命令 </p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose up -d --build</span><br></pre></td></tr></table></figure><h2 id="后续配置"><a href="#后续配置" class="headerlink" title="后续配置"></a>后续配置</h2><p>进入平台后的账号主题相关配置请自行设置，这里我们主要提一下根据本教程安装的CTFd-Whale的配置（别的教程可能不能保证完全适用）如果你使用的是本人修改集成CTFd-Whale插件的CTFd版本，那么插件设置处只需要修公网IP和HTTP域名即可。</p><p>进入后台CTFd-Whale插件的Frp标签下</p><p><strong>第一处：Http Domain Suffix（HTTP模式域名）</strong></p><p>此处填写的域名为Frp容器的节点域名，并非为CTFd平台的域名，（请先将该节点域名泛解析到本服务器的IP上）</p><p>例如 ***.node.yuyapeng.cn | A | xxx.xxx.xxx.xxx** ，不同DNS服务商操作或许不一样。</p><p><img src="https://gitee.com/littlefiremonkey/picture/raw/master/image-20211227112254759.png" alt="image-20211227112254759"></p><p>然后在<strong>CTFd-Whale</strong>插件设置里设置<strong>node.yuyapeng.cn</strong>，这里填写的域名不需要填写 *.</p><p><img src="https://gitee.com/littlefiremonkey/picture/raw/master/image-20211227112534000.png" alt="image-20211227112534000"></p><p><strong>第二处：Direct IP Address（服务器公网IP）</strong></p><p><img src="https://gitee.com/littlefiremonkey/picture/raw/master/image-20211227112725596.png" alt="image-20211227112725596"></p><p>如果你修改了其他配置，例如CTFd根目录的文件夹名称可能会导致容器名称变化，或是Swarm节点别名，导致无法正常启动靶场，请参照CTFd-Whale完整配置信息表自行修改。</p><table><thead><tr><th>属性</th><th>配置</th></tr></thead><tbody><tr><td>Docker API URL</td><td>unix://var/run/docker.sock</td></tr><tr><td>Frp API IP</td><td>frpc的ip配置</td></tr><tr><td>Frp API Port</td><td>frpc的端口配置</td></tr><tr><td>Frp Http Domain Suffix</td><td>Docker API URL to connect（可填None）</td></tr><tr><td>Frp Http Port</td><td>80</td></tr><tr><td>Frp Direct IP Address</td><td>你的公网ip，本机即为127.0.0.1</td></tr><tr><td>Frp Direct Minimum Port</td><td>与之前frps最小端口呼应</td></tr><tr><td>Frp Direct Minimum Port</td><td>与之前frps最大端口呼应</td></tr><tr><td>Max Container Count</td><td>不超过最大-最小</td></tr><tr><td>Max Renewal Times</td><td>最大实例延时次数</td></tr><tr><td>Frp config template</td><td>填入frps的配置，只需填[common]</td></tr><tr><td>Docker Auto Connect Containers</td><td>ctfd_frpc_1</td></tr><tr><td>Docker Dns Setting</td><td>可填机器内DNS，没有可填个外网DNS</td></tr><tr><td>Docker Swarm Nodes</td><td>linux-1 与前面swarm集群呼应</td></tr><tr><td>Docker Multi-Container Network Subnet</td><td>内网题大子网ip配置/CIDR</td></tr><tr><td>Docker Multi-Container Network Subnet New Prefix</td><td>每个内网题实例的CIDR</td></tr><tr><td>Docker Container Timeout</td><td>单位为秒</td></tr></tbody></table><h2 id="题目测试"><a href="#题目测试" class="headerlink" title="题目测试"></a>题目测试</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Challenge Type题目类型选择dynamic_docker</span><br><span class="line">Name题目名字</span><br><span class="line">Category题目分类</span><br><span class="line">Initial Value初始分值</span><br><span class="line">Decay Value递减分值</span><br><span class="line">Minimum Value最小分值</span><br><span class="line">Docker Image支持动态flag的镜像</span><br><span class="line">Frp Http Portfrps http开放的端口</span><br><span class="line">Frp Redirect Type没有域名选择Direct</span><br><span class="line">Frp Redirect Port转发到靶机容器的端口</span><br><span class="line">Score Type是否启用动态分数</span><br></pre></td></tr></table></figure><p>这里我们使用 ctftraining/qwb_2019_supersqli 进行测试，添加题目后进行访问。</p><p>添加题目过程参考下图：</p><p><strong>Direct模式：</strong></p><p><img src="https://gitee.com/littlefiremonkey/picture/raw/master/image-20211227113346021.png" alt="image-20211227113346021"></p><p><img src="https://gitee.com/littlefiremonkey/picture/raw/master/image-20211227113358354.png" alt="image-20211227113358354"></p><p><img src="https://gitee.com/littlefiremonkey/picture/raw/master/image-20211227113513830.png" alt="image-20211227113513830"></p><p><strong>http模式：</strong></p><p>将模式改成http，其他的都一样</p><p><img src="https://gitee.com/littlefiremonkey/picture/raw/master/image-20211227113646321.png" alt="image-20211227113646321"></p><p>如果两种模式下都能正常访问容器，那么恭喜你现在CTFd最新版本你已经成功部署啦~</p><p>由于使用的是我改良集成版本的CTFd，目前来看可以一气呵成的的部署成功~</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://www.vicosna.com/posts/ctfd/">https://www.vicosna.com/posts/ctfd/</a></p><p><a href="https://blog.csdn.net/qq_44747972/article/details/111183971">https://blog.csdn.net/qq_44747972/article/details/111183971</a></p><p><a href="https://blog.csdn.net/qq_35948609/article/details/121532200">https://blog.csdn.net/qq_35948609/article/details/121532200</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> 靶场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF</title>
      <link href="/2021/12/25/CTF/Web/CTF/"/>
      <url>/2021/12/25/CTF/Web/CTF/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/12/24/hello-world/"/>
      <url>/2021/12/24/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
